<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Layer5 Resources]]></title><description><![CDATA[Expect more from your infrastructure. Cloud native, open source software for your cloud native infrastructure and applications. Allowing developers to focus on business logic, not infrastructure concerns. Empowering operators to confidentally run modern infrastructure.]]></description><link>https://layer5.io</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 27 Jul 2022 12:31:41 GMT</lastBuildDate><item><title><![CDATA[Managing Containers]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Managing Containers",
  "thumbnail": "./docker.svg",
  "date": "2022-07-06 10:30:05 -0530",
  "category": "Kubernetes",
  "type": "Article",
  "technology": "Kubernetes",
  "tags": ["Docker", "Kubernetes"],
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", {
    className: "intro"
  }, mdx("p", null, "Learn more about managing containers with our ", mdx("a", {
    className: "blog",
    href: "https://github.com/layer5io/containers-101-workshop"
  }, "Containers 101 Workshop"), ". Walk-through four hands-on exercises with Docker.")), mdx("p", null, "Container management refers to a set of practices that govern and maintain containerization software. Container management tools automate the creation, deployment, destruction and scaling of application or systems containers. Containerization is an approach to software development that isolates processes that share an OS kernel -- unlike virtual machines (VMs), which require their own -- and binds application libraries and dependencies into one deployable unit. This makes containers lightweight to run, as they require only the application configuration information and code from the host OS. This design also increases interoperability compared to VM hosting. Each container instance can scale independently with demand."), mdx("p", null, "Modern Linux container technology was popularized by the Docker project, which started in 2013. Interest soon expanded beyond containerization itself, to the intricacies of how to effectively and efficiently deploy and manage containers."), mdx("p", null, "In 2015, Google introduced the container orchestration platform Kubernetes, which was based on its internal data center management software called Borg. At its most basic level, open source Kubernetes automates the process of running, scheduling, scaling and managing a group of Linux containers. With more stable releases throughout 2017 and 2018, Kubernetes rapidly attracted industry adoption, and today it is the de facto container management technology."), mdx("p", null, "IT teams use containers for cloud-native, distributed -- often microservices- based -- applications, and to package legacy applications for increased portability and efficient deployment. Containers have surged in popularity as IT organizations embrace DevOps, which emphasizes rapid application deployment. Organizations can containerize application code from development through test and deployment."), mdx("h2", null, "Benefits of container management"), mdx("p", null, "The chief benefit of container management is simplified management for clusters of container hosts. IT admins and developers can start, stop and restart containers, as well as release updates or check health status, among other actions. Container management includes orchestration and schedulers, security tools, storage, and virtual network management systems and monitoring."), mdx("h3", null, "Wrangling container sprawl"), mdx("p", null, "Organizations can set policies that ensure containers share a host -- or cannot share a host -- based on application design and resource requirements For example, IT admins should colocate containers that communicate heavily to avoid latency. Or, containers with large resource requirements might require an anti-affinity rule to avoid physical storage overload. Container instances can spin up to meet demand -- then shut down -- frequently. Containers also must communicate for distributed applications to work, without opening an attack surface to hackers."), mdx("p", null, "A container management ecosystem automates orchestration, log management, monitoring, networking, load balancing, testing and secrets management, along with other processes. Automation enables IT organizations to manage large containerized environments that are too vast for a human operator to keep up with."), mdx("h2", null, "Challenges of container management"), mdx("p", null, "One drawback to container management is its complexity, particularly as it relates to open source container orchestration platforms such as Kubernetes and Apache Mesos. The installation and setup for container orchestration tools can be arduous and error prone. IT operations staff need container management skills and training. It is crucial, for example, to understand the relationships between clusters of host servers as well as how the container network corresponds to applications and dependencies."), mdx("p", null, "Issues of persistence and storage present significant container management challenges. Containers are ephemeral -- designed to exist only when needed. Stateful application activities are difficult because any data produced within a container ceases to exist when the container spins down."), mdx("p", null, "Container security is another concern. Container orchestrators have several components, including an API server and monitoring and management tools. These pieces make it a major attack vector for hackers. Container management system vulnerabilities mirror standard types of OS vulnerabilities, such as those related to access and authorization, images and intercontainer network traffic. Organizations should minimize risk with security best practices -- for example, identify trusted image sources and close network connections unless they're needed."), mdx("h2", null, "Container management strategy"), mdx("p", null, "Forward-thinking enterprise IT organizations and startups alike use containers and container management tools to quickly deploy and update applications. IT organizations must first implement the correct infrastructure setup for containers, with a solid grasp of the scope and scale of the containerization project in terms of business projections for growth and developers' requirements. IT admins must also know how the existing infrastructure's pieces connect and communicate to preserve those relationships in a containerized environment. Containers can run on bare-metal servers, VMs or in the cloud -- or in a hybrid setup -- based on IT requirements."), mdx("p", null, "In addition, the container management tool or platform should meet the project's needs for multi-tenancy; user and application isolation; authentication; resource requirements and constraints; logging, monitoring and alerts; backup management; license management; and other management tasks. IT organizations should understand their hosting commitment and future container plans, such as if the company will adopt multiple cloud platforms or a microservices architecture."), mdx("h2", null, "Kubernetes implementation considerations"), mdx("p", null, "As described above, containers are arranged into pods in Kubernetes, which run on clusters of nodes; pods, nodes and clusters are controlled by a master. One pod can include one or multiple containers. IT admins should carefully consider the relationships between pods, nodes and clusters when they set up Kubernetes."), mdx("p", null, "Organizations should plan their container deployment based on how many pieces of the application can scale under load -- this depends on the application, not the deployment method. Additionally, capacity planning is vital for balanced pod-to-node mapping, and IT admins should ensure high availability with redundancy with master node components."), mdx("p", null, "IT organizations can address container security concerns by applying some general IT security best practices to containerization. For example, create multiple security layers throughout the environment, scan all container images for vulnerabilities, enforce signed certificates and run the most up-to-date version of any container or application image. Containers introduce the benefits of an immutable infrastructure methodology as well; the regular disposal and redeployment of containers, with their associated components and dependencies, improves overall system availability and security. Additionally, Kubernetes multi-tenancy promises greater resource isolation, but recently revealed security vulnerabilities make multicluster management preferred for now."), mdx("p", null, "Networking is another significant factor. Kubernetes networking occurs within pods, between pods and in user-to-containerized resource connections. Kubernetes enables pods and nodes to communicate without address translation, allocating subnets as necessary. Lastly, IT admins working with Kubernetes should prepare to troubleshoot common container performance problems, including those caused by unavailable nodes and noisy neighbors, in an implementation.")));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/kubernetes/managing-containers</link><guid isPermaLink="false">https://layer5.io/resources/kubernetes/managing-containers</guid><pubDate>Wed, 06 Jul 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/35d3da96a133c8222b06cb143d6c9b7b/docker.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;div class=&quot;intro&quot;&gt;&lt;p&gt;Learn more about managing containers with our &lt;a class=&quot;blog&quot; href=&quot;https://github.com/layer5io/containers-101-workshop&quot;&gt;Containers 101 Workshop&lt;/a&gt;. Walk-through four hands-on exercises with Docker.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Container management refers to a set of practices that govern and maintain containerization software. Container management tools automate the creation, deployment, destruction and scaling of application or systems containers. Containerization is an approach to software development that isolates processes that share an OS kernel -- unlike virtual machines (VMs), which require their own -- and binds application libraries and dependencies into one deployable unit. This makes containers lightweight to run, as they require only the application configuration information and code from the host OS. This design also increases interoperability compared to VM hosting. Each container instance can scale independently with demand.&lt;/p&gt;&lt;p&gt;Modern Linux container technology was popularized by the Docker project, which started in 2013. Interest soon expanded beyond containerization itself, to the intricacies of how to effectively and efficiently deploy and manage containers.&lt;/p&gt;&lt;p&gt;In 2015, Google introduced the container orchestration platform Kubernetes, which was based on its internal data center management software called Borg. At its most basic level, open source Kubernetes automates the process of running, scheduling, scaling and managing a group of Linux containers. With more stable releases throughout 2017 and 2018, Kubernetes rapidly attracted industry adoption, and today it is the de facto container management technology.&lt;/p&gt;&lt;p&gt;IT teams use containers for cloud-native, distributed -- often microservices- based -- applications, and to package legacy applications for increased portability and efficient deployment. Containers have surged in popularity as IT organizations embrace DevOps, which emphasizes rapid application deployment. Organizations can containerize application code from development through test and deployment.&lt;/p&gt;&lt;h2&gt;Benefits of container management&lt;/h2&gt;&lt;p&gt;The chief benefit of container management is simplified management for clusters of container hosts. IT admins and developers can start, stop and restart containers, as well as release updates or check health status, among other actions. Container management includes orchestration and schedulers, security tools, storage, and virtual network management systems and monitoring.&lt;/p&gt;&lt;h3&gt;Wrangling container sprawl&lt;/h3&gt;&lt;p&gt;Organizations can set policies that ensure containers share a host -- or cannot share a host -- based on application design and resource requirements For example, IT admins should colocate containers that communicate heavily to avoid latency. Or, containers with large resource requirements might require an anti-affinity rule to avoid physical storage overload. Container instances can spin up to meet demand -- then shut down -- frequently. Containers also must communicate for distributed applications to work, without opening an attack surface to hackers.&lt;/p&gt;&lt;p&gt;A container management ecosystem automates orchestration, log management, monitoring, networking, load balancing, testing and secrets management, along with other processes. Automation enables IT organizations to manage large containerized environments that are too vast for a human operator to keep up with.&lt;/p&gt;&lt;h2&gt;Challenges of container management&lt;/h2&gt;&lt;p&gt;One drawback to container management is its complexity, particularly as it relates to open source container orchestration platforms such as Kubernetes and Apache Mesos. The installation and setup for container orchestration tools can be arduous and error prone. IT operations staff need container management skills and training. It is crucial, for example, to understand the relationships between clusters of host servers as well as how the container network corresponds to applications and dependencies.&lt;/p&gt;&lt;p&gt;Issues of persistence and storage present significant container management challenges. Containers are ephemeral -- designed to exist only when needed. Stateful application activities are difficult because any data produced within a container ceases to exist when the container spins down.&lt;/p&gt;&lt;p&gt;Container security is another concern. Container orchestrators have several components, including an API server and monitoring and management tools. These pieces make it a major attack vector for hackers. Container management system vulnerabilities mirror standard types of OS vulnerabilities, such as those related to access and authorization, images and intercontainer network traffic. Organizations should minimize risk with security best practices -- for example, identify trusted image sources and close network connections unless they&amp;#x27;re needed.&lt;/p&gt;&lt;h2&gt;Container management strategy&lt;/h2&gt;&lt;p&gt;Forward-thinking enterprise IT organizations and startups alike use containers and container management tools to quickly deploy and update applications. IT organizations must first implement the correct infrastructure setup for containers, with a solid grasp of the scope and scale of the containerization project in terms of business projections for growth and developers&amp;#x27; requirements. IT admins must also know how the existing infrastructure&amp;#x27;s pieces connect and communicate to preserve those relationships in a containerized environment. Containers can run on bare-metal servers, VMs or in the cloud -- or in a hybrid setup -- based on IT requirements.&lt;/p&gt;&lt;p&gt;In addition, the container management tool or platform should meet the project&amp;#x27;s needs for multi-tenancy; user and application isolation; authentication; resource requirements and constraints; logging, monitoring and alerts; backup management; license management; and other management tasks. IT organizations should understand their hosting commitment and future container plans, such as if the company will adopt multiple cloud platforms or a microservices architecture.&lt;/p&gt;&lt;h2&gt;Kubernetes implementation considerations&lt;/h2&gt;&lt;p&gt;As described above, containers are arranged into pods in Kubernetes, which run on clusters of nodes; pods, nodes and clusters are controlled by a master. One pod can include one or multiple containers. IT admins should carefully consider the relationships between pods, nodes and clusters when they set up Kubernetes.&lt;/p&gt;&lt;p&gt;Organizations should plan their container deployment based on how many pieces of the application can scale under load -- this depends on the application, not the deployment method. Additionally, capacity planning is vital for balanced pod-to-node mapping, and IT admins should ensure high availability with redundancy with master node components.&lt;/p&gt;&lt;p&gt;IT organizations can address container security concerns by applying some general IT security best practices to containerization. For example, create multiple security layers throughout the environment, scan all container images for vulnerabilities, enforce signed certificates and run the most up-to-date version of any container or application image. Containers introduce the benefits of an immutable infrastructure methodology as well; the regular disposal and redeployment of containers, with their associated components and dependencies, improves overall system availability and security. Additionally, Kubernetes multi-tenancy promises greater resource isolation, but recently revealed security vulnerabilities make multicluster management preferred for now.&lt;/p&gt;&lt;p&gt;Networking is another significant factor. Kubernetes networking occurs within pods, between pods and in user-to-containerized resource connections. Kubernetes enables pods and nodes to communicate without address translation, allocating subnets as necessary. Lastly, IT admins working with Kubernetes should prepare to troubleshoot common container performance problems, including those caused by unavailable nodes and noisy neighbors, in an implementation.&lt;/p&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Kubernetes Architecture 101]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Kubernetes Architecture 101",
  "thumbnail": "../kubernetes.svg",
  "date": "2022-07-05 10:30:05 -0530",
  "category": "Kubernetes",
  "type": "Article",
  "technology": "Kubernetes",
  "tags": ["Docker", "Kubernetes"],
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, "The way Kubernetes is architected is what makes it powerful. Kubernetes has a basic client and server architecture, but it goes way beyond that. Kubernetes has the ability to do rolling updates, it also adapts to additional workloads by auto scaling nodes if it needs to and it can also self-heal in the case of a pod meltdown. These innate abilities provide developers and operations teams with a huge advantage in that your applications will have little to no down time. In this section we provide a brief overview of the master and its worker nodes with a high level overview of how Kubernetes manages workloads."), mdx("div", {
    className: "right"
  }, mdx("img", {
    src: ArchDiagram,
    alt: "Simple Kubernetes Architecture Diagram"
  }), mdx("i", null, "Simple Kubernetes Architecture Diagram")), mdx("h1", null, "Kubernetes Components"), mdx("p", null, "Let's dive into each of the Kubernetes components, starting with the Master node."), mdx("h2", null, "Kubernetes Master"), mdx("p", null, "The Kubernetes master is the primary control unit for the cluster. The master is responsible for managing and scheduling the workloads in addition to the networking and communications across the entire cluster. The master node is responsible for the management of Kubernetes cluster. This is the entry point of all administrative tasks. The master node is the one taking care of orchestrating the worker nodes, where the actual services are running."), mdx("p", null, "These are the components that run on the master:"), mdx("h3", null, "Etcd Storage"), mdx("p", null, "Etcd is an open-source key-value data store that can be accessed by all nodes in the cluster. It stores configuration data of the cluster\u2019s state. etcd is a simple, distributed, consistent key-value store. It\u2019s mainly used for shared configuration and service discovery."), mdx("p", null, "It provides a REST API for CRUD operations as well as an interface to register watchers on specific nodes, which enables a reliable way to notify the rest of the cluster about configuration changes."), mdx("p", null, "An example of data stored by Kubernetes in etcd is jobs being scheduled, created and deployed, pod/service details and state, namespaces and replication information, etc."), mdx("h3", null, "Kube-API-Server"), mdx("p", null, "Kube-API-Server manages requests from the worker nodes, and it receives REST requests for modifications, and serves as a front-end to control cluster. The API server is the entry points for all the REST commands used to control the cluster. It processes the REST requests, validates them, and executes the bound business logic. The result state has to be persisted somewhere, and that brings us to the next component of the master node."), mdx("h3", null, "Kube-scheduler"), mdx("p", null, "Kube-scheduler schedules the pods on nodes based on resource utilization and also decides where services are deployed. The deployment of configured pods and services onto the nodes happens thanks to the scheduler component. The scheduler has the information regarding resources available on the members of the cluster, as well as the ones required for the configured service to run and hence is able to decide where to deploy a specific service."), mdx("h3", null, "Kube-controller-manager"), mdx("p", null, "Kube-controller-manager runs a number of distinct controller processes in the background to regulate the shared state of the cluster and perform routine tasks. When there is a change to a service, the controller recognizes the change and initiates an update to bring the cluster up to the desired state. Optionally you can run different kinds of controllers inside the master node. controller-manager is a daemon embedding those."), mdx("p", null, "A controller uses apiserver to watch the shared state of the cluster and makes corrective changes to the current state to change it to the desired one.\nAn example of such a controller is the Replication controller, which takes care of the number of pods in the system. The replication factor is configured by the user, and it's the controller\u2019s responsibility to recreate a failed pod or remove an extra-scheduled one. Other examples of controllers are endpoints controller, namespace controller, and serviceaccounts controller, but we will not dive into details here."), mdx("h2", null, "Worker Nodes"), mdx("p", null, "These nodes run the workloads according the schedule provided by the master. The interaction between the master and worker nodes are what\u2019s known as the control plane. The pods are run here, so the worker node contains all the necessary services to manage the networking between the containers, communicate with the master node, and assign resources to the containers scheduled."), mdx("h3", null, "Kubelet"), mdx("p", null, "Kubelet ensures that all containers in the node are running and are in a healthy state.  If a node fails, a replication controller observes this change and launches pods on another healthy pod. Integrated into the kubelet binary is \u2018cAdvisor` that auto-discovers all containers and collects CPU, memory, file system, and network usage statistics and also provides machine usage stats by analyzing the \u2018root\u2019 container. "), mdx("p", null, "Kubelet gets the configuration of a pod from the apiserver and ensures that the described containers are up and running. This is the worker service that\u2019s responsible for communicating with the master node. It also communicates with etcd, to get information about services and write the details about newly created ones."), mdx("h3", null, "Kube Proxy"), mdx("p", null, "Kube Proxy acts as a network proxy and a load balancer for a service on a single worker node. . It takes care of the network routing for TCP and UDP packets. It forwards the request to the correct pods across isolated networks in a cluster. "), mdx("h3", null, "Pods"), mdx("p", null, "A pod is the basic building block on Kubernetes. It represents the workloads that get deployed. Pods are generally collections of related containers, but a pod may also only have one container. A pod shares network/storage and also a specification for how to run the containers."), mdx("h3", null, "Containers"), mdx("p", null, "Containers are the lowest level of microservice. These are placed inside of the pods and need external IP addresses to view any outside processes. Docker is not the only supported container runtime, but is by far, the most popular. Docker runs on each of the worker nodes, and runs the configured pods. It takes care of downloading the images and starting the containers."), mdx("h3", null, "kubectl"), mdx("p", null, "Kubectl is a command line tool to communicate with the API service and send commands to the master node. kubectl must be configured to communicate with your cluster. If you have multiple clusters, you might try using kubectx, which makes switching between contexts easy."), mdx("h4", null, "Managing objects with kubectl"), mdx("p", null, "You can divide a Kubernetes cluster into multiple environments by using namespaces (e.g., Dev1, Dev2, QA1, QA2, etc.), and each environment can be managed by a different user. One of the inconveniences of writing kubectl commands is that every time you write a command, you need the --namespace option at the end. People often forget this and end up creating objects (pods, services, deployments) in the wrong namespace. "), mdx("p", null, "With this trick, you can set the namespace preference before running kubectl commands. Run the following command before executing the kubectl commands, and it will save the namespace for all subsequent kubectl commands for your current context:"), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "kubectl config set-context $(kubectl config current-context) --namespace=mynamespace\n"))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/kubernetes/kubernetes-architecture-101</link><guid isPermaLink="false">https://layer5.io/resources/kubernetes/kubernetes-architecture-101</guid><pubDate>Tue, 05 Jul 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/9287b4a708bb510f64057ea305498b77/kubernetes.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;p&gt;The way Kubernetes is architected is what makes it powerful. Kubernetes has a basic client and server architecture, but it goes way beyond that. Kubernetes has the ability to do rolling updates, it also adapts to additional workloads by auto scaling nodes if it needs to and it can also self-heal in the case of a pod meltdown. These innate abilities provide developers and operations teams with a huge advantage in that your applications will have little to no down time. In this section we provide a brief overview of the master and its worker nodes with a high level overview of how Kubernetes manages workloads.&lt;/p&gt;&lt;div class=&quot;right&quot;&gt;&lt;img src=&quot;static/kubernetes-highlevel-architecture-5759d8cb4ac0991f91ef736d48e531fc.png&quot; alt=&quot;Simple Kubernetes Architecture Diagram&quot;/&gt;&lt;i&gt;Simple Kubernetes Architecture Diagram&lt;/i&gt;&lt;/div&gt;&lt;h1&gt;Kubernetes Components&lt;/h1&gt;&lt;p&gt;Let&amp;#x27;s dive into each of the Kubernetes components, starting with the Master node.&lt;/p&gt;&lt;h2&gt;Kubernetes Master&lt;/h2&gt;&lt;p&gt;The Kubernetes master is the primary control unit for the cluster. The master is responsible for managing and scheduling the workloads in addition to the networking and communications across the entire cluster. The master node is responsible for the management of Kubernetes cluster. This is the entry point of all administrative tasks. The master node is the one taking care of orchestrating the worker nodes, where the actual services are running.&lt;/p&gt;&lt;p&gt;These are the components that run on the master:&lt;/p&gt;&lt;h3&gt;Etcd Storage&lt;/h3&gt;&lt;p&gt;Etcd is an open-source key-value data store that can be accessed by all nodes in the cluster. It stores configuration data of the cluster’s state. etcd is a simple, distributed, consistent key-value store. It’s mainly used for shared configuration and service discovery.&lt;/p&gt;&lt;p&gt;It provides a REST API for CRUD operations as well as an interface to register watchers on specific nodes, which enables a reliable way to notify the rest of the cluster about configuration changes.&lt;/p&gt;&lt;p&gt;An example of data stored by Kubernetes in etcd is jobs being scheduled, created and deployed, pod/service details and state, namespaces and replication information, etc.&lt;/p&gt;&lt;h3&gt;Kube-API-Server&lt;/h3&gt;&lt;p&gt;Kube-API-Server manages requests from the worker nodes, and it receives REST requests for modifications, and serves as a front-end to control cluster. The API server is the entry points for all the REST commands used to control the cluster. It processes the REST requests, validates them, and executes the bound business logic. The result state has to be persisted somewhere, and that brings us to the next component of the master node.&lt;/p&gt;&lt;h3&gt;Kube-scheduler&lt;/h3&gt;&lt;p&gt;Kube-scheduler schedules the pods on nodes based on resource utilization and also decides where services are deployed. The deployment of configured pods and services onto the nodes happens thanks to the scheduler component. The scheduler has the information regarding resources available on the members of the cluster, as well as the ones required for the configured service to run and hence is able to decide where to deploy a specific service.&lt;/p&gt;&lt;h3&gt;Kube-controller-manager&lt;/h3&gt;&lt;p&gt;Kube-controller-manager runs a number of distinct controller processes in the background to regulate the shared state of the cluster and perform routine tasks. When there is a change to a service, the controller recognizes the change and initiates an update to bring the cluster up to the desired state. Optionally you can run different kinds of controllers inside the master node. controller-manager is a daemon embedding those.&lt;/p&gt;&lt;p&gt;A controller uses apiserver to watch the shared state of the cluster and makes corrective changes to the current state to change it to the desired one.
An example of such a controller is the Replication controller, which takes care of the number of pods in the system. The replication factor is configured by the user, and it&amp;#x27;s the controller’s responsibility to recreate a failed pod or remove an extra-scheduled one. Other examples of controllers are endpoints controller, namespace controller, and serviceaccounts controller, but we will not dive into details here.&lt;/p&gt;&lt;h2&gt;Worker Nodes&lt;/h2&gt;&lt;p&gt;These nodes run the workloads according the schedule provided by the master. The interaction between the master and worker nodes are what’s known as the control plane. The pods are run here, so the worker node contains all the necessary services to manage the networking between the containers, communicate with the master node, and assign resources to the containers scheduled.&lt;/p&gt;&lt;h3&gt;Kubelet&lt;/h3&gt;&lt;p&gt;Kubelet ensures that all containers in the node are running and are in a healthy state.  If a node fails, a replication controller observes this change and launches pods on another healthy pod. Integrated into the kubelet binary is ‘cAdvisor` that auto-discovers all containers and collects CPU, memory, file system, and network usage statistics and also provides machine usage stats by analyzing the ‘root’ container. &lt;/p&gt;&lt;p&gt;Kubelet gets the configuration of a pod from the apiserver and ensures that the described containers are up and running. This is the worker service that’s responsible for communicating with the master node. It also communicates with etcd, to get information about services and write the details about newly created ones.&lt;/p&gt;&lt;h3&gt;Kube Proxy&lt;/h3&gt;&lt;p&gt;Kube Proxy acts as a network proxy and a load balancer for a service on a single worker node. . It takes care of the network routing for TCP and UDP packets. It forwards the request to the correct pods across isolated networks in a cluster. &lt;/p&gt;&lt;h3&gt;Pods&lt;/h3&gt;&lt;p&gt;A pod is the basic building block on Kubernetes. It represents the workloads that get deployed. Pods are generally collections of related containers, but a pod may also only have one container. A pod shares network/storage and also a specification for how to run the containers.&lt;/p&gt;&lt;h3&gt;Containers&lt;/h3&gt;&lt;p&gt;Containers are the lowest level of microservice. These are placed inside of the pods and need external IP addresses to view any outside processes. Docker is not the only supported container runtime, but is by far, the most popular. Docker runs on each of the worker nodes, and runs the configured pods. It takes care of downloading the images and starting the containers.&lt;/p&gt;&lt;h3&gt;kubectl&lt;/h3&gt;&lt;p&gt;Kubectl is a command line tool to communicate with the API service and send commands to the master node. kubectl must be configured to communicate with your cluster. If you have multiple clusters, you might try using kubectx, which makes switching between contexts easy.&lt;/p&gt;&lt;h4&gt;Managing objects with kubectl&lt;/h4&gt;&lt;p&gt;You can divide a Kubernetes cluster into multiple environments by using namespaces (e.g., Dev1, Dev2, QA1, QA2, etc.), and each environment can be managed by a different user. One of the inconveniences of writing kubectl commands is that every time you write a command, you need the --namespace option at the end. People often forget this and end up creating objects (pods, services, deployments) in the wrong namespace. &lt;/p&gt;&lt;p&gt;With this trick, you can set the namespace preference before running kubectl commands. Run the following command before executing the kubectl commands, and it will save the namespace for all subsequent kubectl commands for your current context:&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;kubectl config set-context $(kubectl config current-context) --namespace=mynamespace&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[What is Multi-Cluster Kubernetes?]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "What is Multi-Cluster Kubernetes?",
  "thumbnail": "./kubernetes.svg",
  "date": "2022-07-05 10:30:05 -0530",
  "category": "Kubernetes",
  "type": "Article",
  "technology": "Kubernetes",
  "tags": ["Docker", "Kubernetes", "Meshery"],
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, "Developers who work in fast-paced environments face the risk of infrastructure sprawl in their VMs or servers. Even with the rise in containerized deployments on Kubernetes and other platforms, admins still must determine how to efficiently manage hundreds and thousands of clusters for various projects.", mdx("p", null, "Common concerns for an organization\u2019s project deployments include how to run multiple workloads and whether a cluster is large enough to handle the work."), mdx("p", null, "A Kubernetes multi-cluster setup can solve these problems. Multi-cluster architecture is a strategy for spinning up several clusters to achieve better isolation, availability, and scalability. In this type of implementation, an application\u2019s infrastructure is distributed and maintained across multiple clusters. Because this strategy can also make cluster management more difficult, it needs to be handled properly."), mdx("h2", null, "What Is a Kubernetes Multi-Cluster Setup?"), mdx("p", null, "Kubernetes works with clusters to efficiently run and manage workloads."), mdx("p", null, "In Kubernetes multi-cluster orchestration, platforms such as managed services help you to run workloads across multiple clusters and environments. The multiple clusters can be configured within a single physical host, within multiple hosts in the same data center, or even in a single cloud provider across different regions. This allows you to provision your workloads in several clusters, rather than just one."), mdx("p", null, "This type of deployment enables more scalability, availability, and isolation for your workloads and environments. It also enables you to better coordinate the planning, delivery, and management of these environments."), mdx("p", null, "A key feature of multi-cluster Kubernetes architecture is that each cluster is highly independent, managing its internal state for maximum resource provisioning and service configuration."), mdx("h2", null, "Why Use a Kubernetes Multi-Cluster Setup?"), mdx("p", null, "There are multiple use cases for a multi-cluster deployment. You can use it to deploy workloads spanning multiple regions for increased availability, eliminate cloud blast radius, prevent compliance issues, and enforce security around your clusters and tenants."), mdx("p", null, "As your environment grows, so do the potential issues you need to solve in order to align your cluster maintenance with your business needs. Using a Kubernetes multi-cluster setup can help with the following concerns."), mdx("h2", null, "Cluster Discovery and Tenant Isolation"), mdx("p", null, "It is common for projects to exist in dev, staging, and production environments. To achieve this kind of isolation, you require multiple Kubernetes environments."), mdx("p", null, "Conventionally, using namespaces would be enough for discovery and isolation in a single cluster, but Kubernetes isn\u2019t a direct multitenant system. Namespaces are also not great for isolation since any compromise in the namespace means that your cluster is also compromised. Additionally, badly configured applications in a namespace can consume more resources than expected, which impacts other applications in the cluster."), mdx("p", null, "Kubernetes multi-cluster environments enable you to isolate users and projects by cluster, simplifying the process."), mdx("h2", null, "Failover"), mdx("p", null, "Architecting multi-cluster workloads minimizes the downtime issues common within a single cluster, because you can freely transfer the workloads to other running clusters."), mdx("h1", null, "Multi-Cluster, Multitenancy, or a Mix?"), mdx("p", null, "Kubernetes is a complex, high-level platform that offers multiple options for your deployments: single server, multitenant, or multi-cluster."), mdx("p", null, "Multitenancy means a cluster is shared among several workloads, or tenants. Multiple users share the same cluster resources and control plane. Multitenant clusters require fair allocation of resources to the tenants as well as isolation of tenants from each other, in order to minimize the effects of a faulty tenant on other tenants and the overall cluster."), mdx("p", null, "A multi-cluster setup, on the other hand, involves several clusters deployed across one or many data centers. This type of deployment can be used to separate development and production. It improves availability and enhances security around workloads."), mdx("p", null, "The best choice for your organization depends on factors that include the technical expertise of your team, your infrastructure availability, and your budget. Many organizations separate their critical production services from non-critical services by placing them in separate tenants across tiers, teams, locations, or infrastructure providers. Projects that are time- and resource-dependent (where resources are spun up and down on the go) are, however, suitable for multi-cluster architecture."), mdx("h1", null, "When to Use a Multi-Cluster Setup"), mdx("p", null, "To decide whether your projects would function best in a multi-cluster deployment, you first need to define your goals."), mdx("p", null, "You should know the challenges you are trying to solve and how transitioning to a multi-cluster setup would help your organization. Projects that are performance-dependent with workloads that are sensitive to factors like latency can take advantage of the high availability and isolation available in multi-cluster setups. In other words, you can run workloads with intensive computations that don\u2019t need to share resources."), mdx("p", null, "You\u2019ll need to collect workload data and other feedback from your various teams before making a decision. You should assess your teams\u2019 expertise: are they well-versed in provisioning single clusters, even before transitioning to multi-clusters? You\u2019ll also need to evaluate your business model and how such an infrastructure transition could affect your users or customers."), mdx("p", null, "The following are some of the advantages of transitioning to a Kubernetes multi-cluster setup."), mdx("ul", null, mdx("li", null, "Tenant Isolation"), "You might want to establish order while accommodating your development teams. The multi-cluster architecture allows workload isolation. For example, you could spin up separate clusters for staging and production.", mdx("p", null, "With multiple clusters, any tenant configuration changes affect only that specific cluster. This way, cluster admins can easily identify issues, run new feature experiments, and carry out workload shifts without troubling other tenants and clusters."), mdx("li", null, "No  Single Point of Failure"), "Running a single cluster can expose your project to a single point of failure, in which one malfunctioning component can bring down an entire system. Using a multi-cluster environment enables you to shift your workloads between clusters so that your projects continue to function if one cluster is down or even disappears entirely.", mdx("li", null, "No Vendor Lock-In"), "There are multiple third-party cloud vendors available with varying resource offerings. Because of evolving resource pricing and models, organizations change their usage models over time as well. A Kubernetes multi-cluster setup ensures your workloads are cloud-agnostic so that you can safely use multiple vendors or move workloads from one cloud to another."), mdx("p", null, "Kubernetes provisions clusters that run and manage our workloads. Depending on the needs of an organization, Kubernetes deployments can be replicated to have the same workloads accessible across multiple nodes and environments. This concept is called Kubernetes multi-cluster orchestration. It\u2019s simply provisioning your workloads in several Kubernetes clusters (going beyond a single cluster). "), mdx("p", null, "A Kubernetes multi-cluster defines deployment strategies to introduce scalability, availability, and isolation for your workloads and environments. A Kubernetes multi-cluster is fully embraced when an organization coordinates the planning, delivery, and management of several Kubernetes environments using appropriate tools and processes."), mdx("h2", null, "Why Do You Need a Kubernetes Multi-Cluster?"), mdx("p", null, "In simple deployment cases, Kubernetes can spin workloads in a single cluster. However, some cases need advanced deployment models, and for such scenarios, a multi-cluster architecture is suitable and can improve the performance of your workloads."), mdx("p", null, "Simply put, a development team may need a Kubernetes multi-cluster to handle workloads spanning regions, eliminate a cloud blast radius, manage compliance requirements, solve multi-tenancy conflicts, and enforce security around clusters and tenants."), mdx("h3", null, "Cluster Upgrades and Security Management"), mdx("p", null, "Teams that rely heavily on Kubernetes for deployments need to plan for regular upgrades and patches on their environments for comprehensive security fixes."), mdx("p", null, "Running cluster upgrades without due care or proper tools can break more things, and more so when dependent resources are overloaded. Tools like kOPs and Cluster APIs can therefore be used to apply upgrades to your running clusters."), mdx("p", null, "The tools that you install to run your clusters depend entirely on the workloads that your clusters support. How you upgrade a cluster and its tools also depends on how you initially deployed and ran the Kubernetes cluster, that is, whether you\u2019re using a hosted Kubernetes provider or some other means for deployment. Most hosted providers support and handle automatic upgrades, which relieves developers from manual upgrades and patching."), mdx("p", null, "Upgrading a cluster and its toolset follows the approach of upgrading the control plane first, then the nodes in a cluster, followed by upgrading clients such as ", mdx("inlineCode", {
    parentName: "p"
  }, "kubectl"), "."), mdx("h3", null, "Managing Kubernetes Multi-Cluster Complexity"), mdx("p", null, "The complexity of management tasks across multiple Kubernetes clusters greatly increases your the number of clusters increase. You need higher-level view and control as you manage workloads across clusters; need to be able to simply switch between clusters; you need a management plane. "), mdx(Link, {
    className: "blog",
    to: "/meshery",
    mdxType: "Link"
  }, "Meshery"), " is the open source, cloud native management plane that enables the adoption, operation, and management of Kubernetes, any service mesh, and their workloads.", mdx("p", null, "MeshSync, a custom controller managed by Meshery Operator, uniquely contains cluster-wide details of all objects across any number of managed clusters separated by Kubernetes Cluster ID. "), mdx("h3", null, "Deprovisioning Clusters That Are No Longer Needed"), mdx("p", null, "When you deprovision a cluster, its running resources are also deleted. The control plane resources, the node instances, pods, and stored data are all deleted."), mdx("p", null, "Different hosted Kubernetes providers have varying ways of deleting Kubernetes clusters. For instance, GKE supports deletion of clusters from the Google Cloud CLI and Cloud Console. Other tools for spinning Kubernetes clusters such as kOps and Amazon EKS also support the deletion from their CLIs and consoles."), mdx("p", null, "Suppose you have provisioned your clusters with the Google Kubernetes Engine; you can run the following command in the gcloud CLI to deprovision your clusters that are no longer needed:"), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "gcloud container clusters delete CLUSTER_NAME\n")), mdx("p", null, "At this point, you\u2019ve seen the operations around managing a cluster lifecycle, that is, creation, deletion, and upgrading of clusters."), mdx("h2", null, "Conclusion"), mdx("p", null, "Teams want working with clusters to be as easy as possible. This ease in operating clusters can be ensured by managing the cluster lifecycle. In this article, you learned what\u2019s involved in managing a cluster lifecycle. You\u2019ve seen how clusters are created at scale using various tools. You\u2019ve also seen what cluster upgrades and security patch management involve while trying to maintain the health of your clusters."), mdx("p", null, "The complexity of Kubernetes environments does present challenges, but setting clear goals and objectives for deploying your clusters can help you overcome any obstacles as your organization makes the transition."), mdx("p", null, "Finally, multi-cluster deployments are a good choice for organizations that are building highly distributed systems, with geographic and regulatory control in check to help scale workloads beyond the limits of single clusters. Multi-cluster deployment and management is useful for minimizing exposure of production services, preventing access to sensitive data in environments like development and testing. Organizations are now opting to deploy their more critical workloads on separate multiple clusters from their less critical ones.")));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/kubernetes/what-is-multi-cluster-kubernetes</link><guid isPermaLink="false">https://layer5.io/resources/kubernetes/what-is-multi-cluster-kubernetes</guid><pubDate>Tue, 05 Jul 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/9287b4a708bb510f64057ea305498b77/kubernetes.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;Developers who work in fast-paced environments face the risk of infrastructure sprawl in their VMs or servers. Even with the rise in containerized deployments on Kubernetes and other platforms, admins still must determine how to efficiently manage hundreds and thousands of clusters for various projects.&lt;p&gt;Common concerns for an organization’s project deployments include how to run multiple workloads and whether a cluster is large enough to handle the work.&lt;/p&gt;&lt;p&gt;A Kubernetes multi-cluster setup can solve these problems. Multi-cluster architecture is a strategy for spinning up several clusters to achieve better isolation, availability, and scalability. In this type of implementation, an application’s infrastructure is distributed and maintained across multiple clusters. Because this strategy can also make cluster management more difficult, it needs to be handled properly.&lt;/p&gt;&lt;h2&gt;What Is a Kubernetes Multi-Cluster Setup?&lt;/h2&gt;&lt;p&gt;Kubernetes works with clusters to efficiently run and manage workloads.&lt;/p&gt;&lt;p&gt;In Kubernetes multi-cluster orchestration, platforms such as managed services help you to run workloads across multiple clusters and environments. The multiple clusters can be configured within a single physical host, within multiple hosts in the same data center, or even in a single cloud provider across different regions. This allows you to provision your workloads in several clusters, rather than just one.&lt;/p&gt;&lt;p&gt;This type of deployment enables more scalability, availability, and isolation for your workloads and environments. It also enables you to better coordinate the planning, delivery, and management of these environments.&lt;/p&gt;&lt;p&gt;A key feature of multi-cluster Kubernetes architecture is that each cluster is highly independent, managing its internal state for maximum resource provisioning and service configuration.&lt;/p&gt;&lt;h2&gt;Why Use a Kubernetes Multi-Cluster Setup?&lt;/h2&gt;&lt;p&gt;There are multiple use cases for a multi-cluster deployment. You can use it to deploy workloads spanning multiple regions for increased availability, eliminate cloud blast radius, prevent compliance issues, and enforce security around your clusters and tenants.&lt;/p&gt;&lt;p&gt;As your environment grows, so do the potential issues you need to solve in order to align your cluster maintenance with your business needs. Using a Kubernetes multi-cluster setup can help with the following concerns.&lt;/p&gt;&lt;h2&gt;Cluster Discovery and Tenant Isolation&lt;/h2&gt;&lt;p&gt;It is common for projects to exist in dev, staging, and production environments. To achieve this kind of isolation, you require multiple Kubernetes environments.&lt;/p&gt;&lt;p&gt;Conventionally, using namespaces would be enough for discovery and isolation in a single cluster, but Kubernetes isn’t a direct multitenant system. Namespaces are also not great for isolation since any compromise in the namespace means that your cluster is also compromised. Additionally, badly configured applications in a namespace can consume more resources than expected, which impacts other applications in the cluster.&lt;/p&gt;&lt;p&gt;Kubernetes multi-cluster environments enable you to isolate users and projects by cluster, simplifying the process.&lt;/p&gt;&lt;h2&gt;Failover&lt;/h2&gt;&lt;p&gt;Architecting multi-cluster workloads minimizes the downtime issues common within a single cluster, because you can freely transfer the workloads to other running clusters.&lt;/p&gt;&lt;h1&gt;Multi-Cluster, Multitenancy, or a Mix?&lt;/h1&gt;&lt;p&gt;Kubernetes is a complex, high-level platform that offers multiple options for your deployments: single server, multitenant, or multi-cluster.&lt;/p&gt;&lt;p&gt;Multitenancy means a cluster is shared among several workloads, or tenants. Multiple users share the same cluster resources and control plane. Multitenant clusters require fair allocation of resources to the tenants as well as isolation of tenants from each other, in order to minimize the effects of a faulty tenant on other tenants and the overall cluster.&lt;/p&gt;&lt;p&gt;A multi-cluster setup, on the other hand, involves several clusters deployed across one or many data centers. This type of deployment can be used to separate development and production. It improves availability and enhances security around workloads.&lt;/p&gt;&lt;p&gt;The best choice for your organization depends on factors that include the technical expertise of your team, your infrastructure availability, and your budget. Many organizations separate their critical production services from non-critical services by placing them in separate tenants across tiers, teams, locations, or infrastructure providers. Projects that are time- and resource-dependent (where resources are spun up and down on the go) are, however, suitable for multi-cluster architecture.&lt;/p&gt;&lt;h1&gt;When to Use a Multi-Cluster Setup&lt;/h1&gt;&lt;p&gt;To decide whether your projects would function best in a multi-cluster deployment, you first need to define your goals.&lt;/p&gt;&lt;p&gt;You should know the challenges you are trying to solve and how transitioning to a multi-cluster setup would help your organization. Projects that are performance-dependent with workloads that are sensitive to factors like latency can take advantage of the high availability and isolation available in multi-cluster setups. In other words, you can run workloads with intensive computations that don’t need to share resources.&lt;/p&gt;&lt;p&gt;You’ll need to collect workload data and other feedback from your various teams before making a decision. You should assess your teams’ expertise: are they well-versed in provisioning single clusters, even before transitioning to multi-clusters? You’ll also need to evaluate your business model and how such an infrastructure transition could affect your users or customers.&lt;/p&gt;&lt;p&gt;The following are some of the advantages of transitioning to a Kubernetes multi-cluster setup.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Tenant Isolation&lt;/li&gt;You might want to establish order while accommodating your development teams. The multi-cluster architecture allows workload isolation. For example, you could spin up separate clusters for staging and production.&lt;p&gt;With multiple clusters, any tenant configuration changes affect only that specific cluster. This way, cluster admins can easily identify issues, run new feature experiments, and carry out workload shifts without troubling other tenants and clusters.&lt;/p&gt;&lt;li&gt;No  Single Point of Failure&lt;/li&gt;Running a single cluster can expose your project to a single point of failure, in which one malfunctioning component can bring down an entire system. Using a multi-cluster environment enables you to shift your workloads between clusters so that your projects continue to function if one cluster is down or even disappears entirely.&lt;li&gt;No Vendor Lock-In&lt;/li&gt;There are multiple third-party cloud vendors available with varying resource offerings. Because of evolving resource pricing and models, organizations change their usage models over time as well. A Kubernetes multi-cluster setup ensures your workloads are cloud-agnostic so that you can safely use multiple vendors or move workloads from one cloud to another.&lt;/ul&gt;&lt;p&gt;Kubernetes provisions clusters that run and manage our workloads. Depending on the needs of an organization, Kubernetes deployments can be replicated to have the same workloads accessible across multiple nodes and environments. This concept is called Kubernetes multi-cluster orchestration. It’s simply provisioning your workloads in several Kubernetes clusters (going beyond a single cluster). &lt;/p&gt;&lt;p&gt;A Kubernetes multi-cluster defines deployment strategies to introduce scalability, availability, and isolation for your workloads and environments. A Kubernetes multi-cluster is fully embraced when an organization coordinates the planning, delivery, and management of several Kubernetes environments using appropriate tools and processes.&lt;/p&gt;&lt;h2&gt;Why Do You Need a Kubernetes Multi-Cluster?&lt;/h2&gt;&lt;p&gt;In simple deployment cases, Kubernetes can spin workloads in a single cluster. However, some cases need advanced deployment models, and for such scenarios, a multi-cluster architecture is suitable and can improve the performance of your workloads.&lt;/p&gt;&lt;p&gt;Simply put, a development team may need a Kubernetes multi-cluster to handle workloads spanning regions, eliminate a cloud blast radius, manage compliance requirements, solve multi-tenancy conflicts, and enforce security around clusters and tenants.&lt;/p&gt;&lt;h3&gt;Cluster Upgrades and Security Management&lt;/h3&gt;&lt;p&gt;Teams that rely heavily on Kubernetes for deployments need to plan for regular upgrades and patches on their environments for comprehensive security fixes.&lt;/p&gt;&lt;p&gt;Running cluster upgrades without due care or proper tools can break more things, and more so when dependent resources are overloaded. Tools like kOPs and Cluster APIs can therefore be used to apply upgrades to your running clusters.&lt;/p&gt;&lt;p&gt;The tools that you install to run your clusters depend entirely on the workloads that your clusters support. How you upgrade a cluster and its tools also depends on how you initially deployed and ran the Kubernetes cluster, that is, whether you’re using a hosted Kubernetes provider or some other means for deployment. Most hosted providers support and handle automatic upgrades, which relieves developers from manual upgrades and patching.&lt;/p&gt;&lt;p&gt;Upgrading a cluster and its toolset follows the approach of upgrading the control plane first, then the nodes in a cluster, followed by upgrading clients such as &lt;code&gt;kubectl&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;Managing Kubernetes Multi-Cluster Complexity&lt;/h3&gt;&lt;p&gt;The complexity of management tasks across multiple Kubernetes clusters greatly increases your the number of clusters increase. You need higher-level view and control as you manage workloads across clusters; need to be able to simply switch between clusters; you need a management plane. &lt;/p&gt;&lt;a class=&quot;blog&quot; href=&quot;/meshery&quot;&gt;Meshery&lt;/a&gt; is the open source, cloud native management plane that enables the adoption, operation, and management of Kubernetes, any service mesh, and their workloads.&lt;p&gt;MeshSync, a custom controller managed by Meshery Operator, uniquely contains cluster-wide details of all objects across any number of managed clusters separated by Kubernetes Cluster ID. &lt;/p&gt;&lt;h3&gt;Deprovisioning Clusters That Are No Longer Needed&lt;/h3&gt;&lt;p&gt;When you deprovision a cluster, its running resources are also deleted. The control plane resources, the node instances, pods, and stored data are all deleted.&lt;/p&gt;&lt;p&gt;Different hosted Kubernetes providers have varying ways of deleting Kubernetes clusters. For instance, GKE supports deletion of clusters from the Google Cloud CLI and Cloud Console. Other tools for spinning Kubernetes clusters such as kOps and Amazon EKS also support the deletion from their CLIs and consoles.&lt;/p&gt;&lt;p&gt;Suppose you have provisioned your clusters with the Google Kubernetes Engine; you can run the following command in the gcloud CLI to deprovision your clusters that are no longer needed:&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;gcloud container clusters delete CLUSTER_NAME&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;At this point, you’ve seen the operations around managing a cluster lifecycle, that is, creation, deletion, and upgrading of clusters.&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Teams want working with clusters to be as easy as possible. This ease in operating clusters can be ensured by managing the cluster lifecycle. In this article, you learned what’s involved in managing a cluster lifecycle. You’ve seen how clusters are created at scale using various tools. You’ve also seen what cluster upgrades and security patch management involve while trying to maintain the health of your clusters.&lt;/p&gt;&lt;p&gt;The complexity of Kubernetes environments does present challenges, but setting clear goals and objectives for deploying your clusters can help you overcome any obstacles as your organization makes the transition.&lt;/p&gt;&lt;p&gt;Finally, multi-cluster deployments are a good choice for organizations that are building highly distributed systems, with geographic and regulatory control in check to help scale workloads beyond the limits of single clusters. Multi-cluster deployment and management is useful for minimizing exposure of production services, preventing access to sensitive data in environments like development and testing. Organizations are now opting to deploy their more critical workloads on separate multiple clusters from their less critical ones.&lt;/p&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Istio Virtual Service]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Istio Virtual Service",
  "thumbnail": "../../../../assets/images/service-mesh-icons/istio.svg",
  "date": "2022-06-16 10:30:05 -0530",
  "type": "Article",
  "category": "Service Mesh",
  "mesh": "Istio",
  "technology": "Kubernetes",
  "tags": ["Istio", "Envoy"],
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, "Istio Virtual Service defines a set of traffic routing rules to apply when host is addressed. Each routing rule defines standards for the traffic of a specific protocol. If the traffic is matched, then it is sent to a named destination service defined in the registry."), mdx("p", null, "The source of traffic can also be matched within a routing rule that allows routing to be customized for every specific client context."), mdx("div", {
    className: "fact-left"
  }, mdx("p", null, "The below example on Kubernetes routes all HTTP traffic by default to pods of the reviews service with the label \u201Cversion: v1\u201D. Additionally, HTTP requests with path starting with /wpcatalog/ or /consumercatalog/ will be rewritten to /newcatalog and sent to the pods with label \u201Cversion: v2\u201D.")), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews-route\nspec:\n  hosts:\n  - reviews.prod.svc.cluster.local\n  http:\n  - name: \"reviews-v2-routes\"\n    match:\n    - uri:\n        prefix: \"/wpcatalog\"\n    - uri:\n        prefix: \"/consumercatalog\"\n    rewrite:\n      uri: \"/newcatalog\"\n    route:\n    - destination:\n        host: reviews.prod.svc.cluster.local\n        subset: v2\n  - name: \"reviews-v1-route\"\n    route:\n    - destination:\n        host: reviews.prod.svc.cluster.local\n        subset: v1\n\n")), mdx("h2", null, "Virtual Service Configuration Affecting Traffic Routing "), mdx("p", null, "A single Virtual Service can be used to describe all the traffic properties of the hosts, including those for multiple HTTP and TCP ports."), mdx("div", null, mdx("h3", null, "Hosts"), mdx("ul", null, mdx("li", null, "The application traffic created by hosts, clients, servers, and applications that use the network as a transport is contained in the physical network data plane (also known as the forwarding plane). As a result, data plane traffic should never have source or destination IP addresses that are assigned to network elements like routers and switches; instead, it should be originated from and delivered to end devices like PCs and servers. To forward data plane traffic as swiftly as possible, routers and switches use hardware chips called application-specific integrated circuits (ASICs). A forwarding information base is referenced by the physical networking data plane (FIB)."), mdx("li", null, "The destination hosts to which traffic is being sent it could be a DNS name with wildcard prefix or an IP address depending on the platform."))), mdx("div", null, mdx("h3", null, "Gateways"), mdx("ul", null, mdx("li", null, "The names of gateways and sidecars that should apply all these routes. Gateways in other namespaces may be referred to by ", mdx("code", null, " gateway namespace>/gateway name "), "; specifying a gateway with no namespace qualifier is the same as specifying the VirtualService\u2019s namespace."))), mdx("div", null, mdx("h3", null, "HTTP"), mdx("ul", null, mdx("li", null, "An ordered list of route rules for HTTP traffic. The HTTP routes will be applied to the platform service ports named ", mdx("code", null, "\u2018http-\u2019/\u2018http2-\u2019/\u2018grpc-*\u2019, gateway ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS "), " and service entry ports using HTTP/HTTP2/GRPC protocols."), mdx("li", null, "The first rule is matching an incoming request which is used."))), mdx("div", null, mdx("h3", null, "TCP"), mdx("ul", null, mdx("li", null, "An ordered list of all the routing rules for opaque TCP traffic. TCP routes will be applied to any of the port which is not a HTTP or TLS port."))), mdx("div", null, mdx("h3", null, "ExportTo"), mdx("ul", null, mdx("li", null, "Exporting a virtual service allows it to be used by the sidecars and the gateways defined in other namespaces."), mdx("li", null, "If no namespaces are specified then the virtual service is exported to all namespaces by default."))), mdx("h2", null, "Destination"), mdx("p", null, "A destination indicates that the network addressable service to which the request/connection will be sent. A DestinationRule defines policies that apply to traffic intended for a service after routing has occurred."), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "apiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: reviews-destination\nspec:\n  host: reviews.prod.svc.cluster.local\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n\n")), mdx("div", {
    className: "fact-left"
  }, mdx("p", null, "A version of the route destination is identified with a reference to a named service subset which should be declared in a corresponding DestinationRule."))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/service-mesh/istio-virtual-service</link><guid isPermaLink="false">https://layer5.io/resources/service-mesh/istio-virtual-service</guid><pubDate>Thu, 16 Jun 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/731763d720780a49c2ffdfede8c28f4b/istio.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;p&gt;Istio Virtual Service defines a set of traffic routing rules to apply when host is addressed. Each routing rule defines standards for the traffic of a specific protocol. If the traffic is matched, then it is sent to a named destination service defined in the registry.&lt;/p&gt;&lt;p&gt;The source of traffic can also be matched within a routing rule that allows routing to be customized for every specific client context.&lt;/p&gt;&lt;div class=&quot;fact-left&quot;&gt;&lt;p&gt;The below example on Kubernetes routes all HTTP traffic by default to pods of the reviews service with the label “version: v1”. Additionally, HTTP requests with path starting with /wpcatalog/ or /consumercatalog/ will be rewritten to /newcatalog and sent to the pods with label “version: v2”.&lt;/p&gt;&lt;/div&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;apiVersion: networking.istio.io/v1alpha3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;kind: VirtualService&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;metadata:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  name: reviews-route&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;spec:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  hosts:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  - reviews.prod.svc.cluster.local&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  http:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  - name: &amp;quot;reviews-v2-routes&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    match:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    - uri:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;        prefix: &amp;quot;/wpcatalog&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    - uri:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;        prefix: &amp;quot;/consumercatalog&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    rewrite:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      uri: &amp;quot;/newcatalog&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    route:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    - destination:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;        host: reviews.prod.svc.cluster.local&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;        subset: v2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  - name: &amp;quot;reviews-v1-route&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    route:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    - destination:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;        host: reviews.prod.svc.cluster.local&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;        subset: v1&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;h2&gt;Virtual Service Configuration Affecting Traffic Routing &lt;/h2&gt;&lt;p&gt;A single Virtual Service can be used to describe all the traffic properties of the hosts, including those for multiple HTTP and TCP ports.&lt;/p&gt;&lt;div&gt;&lt;h3&gt;Hosts&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;The application traffic created by hosts, clients, servers, and applications that use the network as a transport is contained in the physical network data plane (also known as the forwarding plane). As a result, data plane traffic should never have source or destination IP addresses that are assigned to network elements like routers and switches; instead, it should be originated from and delivered to end devices like PCs and servers. To forward data plane traffic as swiftly as possible, routers and switches use hardware chips called application-specific integrated circuits (ASICs). A forwarding information base is referenced by the physical networking data plane (FIB).&lt;/li&gt;&lt;li&gt;The destination hosts to which traffic is being sent it could be a DNS name with wildcard prefix or an IP address depending on the platform.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;Gateways&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;The names of gateways and sidecars that should apply all these routes. Gateways in other namespaces may be referred to by &lt;code&gt; gateway namespace&amp;gt;/gateway name &lt;/code&gt;; specifying a gateway with no namespace qualifier is the same as specifying the VirtualService’s namespace.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;HTTP&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;An ordered list of route rules for HTTP traffic. The HTTP routes will be applied to the platform service ports named &lt;code&gt;‘http-’/‘http2-’/‘grpc-*’, gateway ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS &lt;/code&gt; and service entry ports using HTTP/HTTP2/GRPC protocols.&lt;/li&gt;&lt;li&gt;The first rule is matching an incoming request which is used.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;TCP&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;An ordered list of all the routing rules for opaque TCP traffic. TCP routes will be applied to any of the port which is not a HTTP or TLS port.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;ExportTo&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Exporting a virtual service allows it to be used by the sidecars and the gateways defined in other namespaces.&lt;/li&gt;&lt;li&gt;If no namespaces are specified then the virtual service is exported to all namespaces by default.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h2&gt;Destination&lt;/h2&gt;&lt;p&gt;A destination indicates that the network addressable service to which the request/connection will be sent. A DestinationRule defines policies that apply to traffic intended for a service after routing has occurred.&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;apiVersion: networking.istio.io/v1alpha3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;kind: DestinationRule&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;metadata:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  name: reviews-destination&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;spec:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  host: reviews.prod.svc.cluster.local&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  subsets:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  - name: v1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    labels:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      version: v1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  - name: v2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    labels:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      version: v2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;div class=&quot;fact-left&quot;&gt;&lt;p&gt;A version of the route destination is identified with a reference to a named service subset which should be declared in a corresponding DestinationRule.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Istio Authorization Policy]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Istio Authorization Policy",
  "thumbnail": "../../../../assets/images/service-mesh-icons/istio.svg",
  "date": "2022-06-01 10:30:05 -0530",
  "type": "Article",
  "category": "Service Mesh",
  "mesh": "Istio",
  "technology": "Docker",
  "tags": ["Istio"],
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", {
    className: "intro"
  }, mdx("p", null, "Istio is a massive project with a wide range of capabilities and deployment options. We will learn about the Istio\u2019s authorization policy with an example .")), mdx("p", null, mdx("h2", null, "Let\u2019s see Istio\u2019s Security Architecture ")), mdx("p", null, "Before we directly jump into Istio's Authorization policies let's have a glance at Istio's Security architecture. The below diagram is directly referenced from Istio documentation. From the control plane, users can create things like authorization policies authentication policies, and policies will get translated into envoy config and streamed bent the varied proxies that form up the service mesh, on the information plane side there is east-west traffic from service b to c and also the actual communication takes place through sidecar proxies. If the traffic is entering it moves to the Ingress gateway and if it\u2019s leaving it can attend the Egress gateway in between all this we will apply JWT enforcements."), mdx("p", null, mdx("img", {
    src: istiosecurityarch,
    align: "center",
    alt: "comparative spectrum"
  })), mdx("h2", null, " Istio includes a high-level architecture that involves multiple factors such as:"), mdx("p", null, mdx("ul", null, mdx("li", null, "  Certificate Authority for key and certificate management "), mdx("li", null, " Sidecar and perimeter proxies work as Policy Enforcement Points to secure communication between the clients and servers. "), mdx("li", null, " A set of Envoy proxy extensions is there to manage telemetry and auditing "))), mdx("h2", null, " Istio\u2019s Authorization policies"), mdx("p", null, mdx("ul", null, mdx("li", null, "  Workload-to-workload and end-user-to-workload authorization. "), mdx("li", null, " A Simple API includes one single Authorization Policy, which is easy to use and maintain."), mdx("li", null, "Flexible semantics: operators can define custom conditions on Istio attributes, and use DENY and permit actions. "), mdx("li", null, "  High performance: Istio authorization gets enforced natively on the Envoy. "), mdx("li", null, " High compatibility: supports gRPC, HTTP, HTTPS, and HTTP2 natively, additionaly as well as any plain TCP protocols. "))), mdx("h2", null, "Example Authorization Policy"), mdx("p", null, "In this example, we allow access to our service httpbin in namespace foo from any JWT (regardless of the principle) to use the GET method."), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "apiVersion: \"security.istio.io/v1beta1\"\nkind: \"AuthorizationPolicy\"\nmetadata:\n  name: \"allow-reads\"\n  namespace: foo\nspec:\n  selector:\n    matchLabels:\n      app: httpbin\n  rules:\n  - from:\n    - source:\n        principals: [\"*\"]\n    to:\n    - operation:\n        methods: [\"GET\"]\n\n")), mdx("h2", null, "Access Flow with Auth Policies"), mdx("p", null, "There is some logic behind how authorization is set given defined AuthorizationPolicies. Below is that the flow as taken directly from the Istio documentation."), mdx("ul", null, mdx("li", null, "If there are any CUSTOM policies that match the request, evaluate and deny the request if the evaluation result's is deny."), mdx("li", null, "If there are any DENY policies that match with the request, deny the request."), mdx("li", null, "If there are not any ALLOW policies for the workload, allow the request."), mdx("li", null, "If any of the ALLOW policies gets match with the request, allow the request."), mdx("li", null, "Deny the request."))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/service-mesh/istio-authorization-policy</link><guid isPermaLink="false">https://layer5.io/resources/service-mesh/istio-authorization-policy</guid><pubDate>Wed, 01 Jun 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/731763d720780a49c2ffdfede8c28f4b/istio.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;div class=&quot;intro&quot;&gt;&lt;p&gt;Istio is a massive project with a wide range of capabilities and deployment options. We will learn about the Istio’s authorization policy with an example .&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;h2&gt;Let’s see Istio’s Security Architecture &lt;/h2&gt;&lt;/p&gt;&lt;p&gt;Before we directly jump into Istio&amp;#x27;s Authorization policies let&amp;#x27;s have a glance at Istio&amp;#x27;s Security architecture. The below diagram is directly referenced from Istio documentation. From the control plane, users can create things like authorization policies authentication policies, and policies will get translated into envoy config and streamed bent the varied proxies that form up the service mesh, on the information plane side there is east-west traffic from service b to c and also the actual communication takes place through sidecar proxies. If the traffic is entering it moves to the Ingress gateway and if it’s leaving it can attend the Egress gateway in between all this we will apply JWT enforcements.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;static/istio-securityarch-48cc1d41d8816131a3bf66bd55fd78df.svg&quot; align=&quot;center&quot; alt=&quot;comparative spectrum&quot;/&gt;&lt;/p&gt;&lt;h2&gt; Istio includes a high-level architecture that involves multiple factors such as:&lt;/h2&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;  Certificate Authority for key and certificate management &lt;/li&gt;&lt;li&gt; Sidecar and perimeter proxies work as Policy Enforcement Points to secure communication between the clients and servers. &lt;/li&gt;&lt;li&gt; A set of Envoy proxy extensions is there to manage telemetry and auditing &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;h2&gt; Istio’s Authorization policies&lt;/h2&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;  Workload-to-workload and end-user-to-workload authorization. &lt;/li&gt;&lt;li&gt; A Simple API includes one single Authorization Policy, which is easy to use and maintain.&lt;/li&gt;&lt;li&gt;Flexible semantics: operators can define custom conditions on Istio attributes, and use DENY and permit actions. &lt;/li&gt;&lt;li&gt;  High performance: Istio authorization gets enforced natively on the Envoy. &lt;/li&gt;&lt;li&gt; High compatibility: supports gRPC, HTTP, HTTPS, and HTTP2 natively, additionaly as well as any plain TCP protocols. &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;h2&gt;Example Authorization Policy&lt;/h2&gt;&lt;p&gt;In this example, we allow access to our service httpbin in namespace foo from any JWT (regardless of the principle) to use the GET method.&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;apiVersion: &amp;quot;security.istio.io/v1beta1&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;kind: &amp;quot;AuthorizationPolicy&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;metadata:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  name: &amp;quot;allow-reads&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  namespace: foo&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;spec:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  selector:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    matchLabels:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      app: httpbin&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  rules:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  - from:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    - source:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;        principals: [&amp;quot;*&amp;quot;]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    to:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    - operation:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;        methods: [&amp;quot;GET&amp;quot;]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;h2&gt;Access Flow with Auth Policies&lt;/h2&gt;&lt;p&gt;There is some logic behind how authorization is set given defined AuthorizationPolicies. Below is that the flow as taken directly from the Istio documentation.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If there are any CUSTOM policies that match the request, evaluate and deny the request if the evaluation result&amp;#x27;s is deny.&lt;/li&gt;&lt;li&gt;If there are any DENY policies that match with the request, deny the request.&lt;/li&gt;&lt;li&gt;If there are not any ALLOW policies for the workload, allow the request.&lt;/li&gt;&lt;li&gt;If any of the ALLOW policies gets match with the request, allow the request.&lt;/li&gt;&lt;li&gt;Deny the request.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Istio Ingress Gateway in Kubernetes]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Istio Ingress Gateway in Kubernetes",
  "thumbnail": "./Istio Ingress Gateway.png",
  "date": "2022-04-01 10:30:05 -0530",
  "category": "Service Mesh",
  "tags": ["Gateway"],
  "type": "Article",
  "product": "Meshery",
  "technology": "Kubernetes",
  "mesh": "Istio",
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, "Predominantly, Kubernetes has used an Ingress controller to handle the traffic that enters the cluster from the outside. Istio has replaced all the familiar Ingress resource with new Gateway and VirtualServices resources. They work in sync to route all the traffic into the mesh. Inside the mesh there is no requirement for Gateways since the services can access each other by a cluster local service name."), mdx("h3", null, "Let\u2019s understand the working with a representation"), mdx("p", null, mdx("img", {
    src: Rep,
    align: "center",
    alt: "Istio Ingress Gateway in Kubernetes No Title"
  })), mdx("p", null, mdx("ul", null, mdx("li", null, "Firstly A request is made by a client on a specific port"), mdx("li", null, "Then a load balancer on this port listens and forwards the request to one of the workers in theh cluster on same or a new port"), mdx("li", null, "Inside the cluster the request is routed to the Istio Ingress Gateway which is listened on the port of the load balancer"), mdx("li", null, "The Service forwards the requestto an Istio Ingress Gateway Pod which is managed by a deployment"), mdx("li", null, "The Ingress Gateway Pod is configured by a Gateway and a VirtualService."), mdx("li", null, "The Gateway configures all the ports, protocol, and certificates."), mdx("li", null, "The Virtual Service configures all the routing information to find the correct Servicein it."), mdx("li", null, "The Istio Ingress Gateway Pod routes the request to the application Service."), mdx("li", null, "And lastly, the application Service routes the request to an application Pod which is managed by a deployment."))), mdx("ul", null), mdx("h2", null, "Ingress Gateway Service"), mdx("p", null, "The Ingress Gateway Service must listen to all the ports to be able to forward the traffic to the Ingress Gateway pods. Here we will be using routing to bring all the port numbers back to their initial state."), mdx("p", null, "Note that a Kubernetes Service is not a real service, but, since we are using type: \"NodePort\", all the request will be handled by the kube-proxy provided by Kubernetes and forwarded to a node with a current running pod. Once on the node, an IP-tables is configured a request will be forwarded to the appropriate pod."), mdx("pre", null, mdx("code", {
    parentName: "pre",
    "className": "language-yaml"
  }, "\n# From the istio-ingressgateway service\n  ports:\n  - name: http2\n    nodePort: 30000\n    port: 80\n    protocol: TCP\n  - name: https\n    nodePort: 30443\n    port: 443\n    protocol: TCP\n  - name: mysql\n    nodePort: 30306\n    port: 3306\n    protocol: TCP\n")), mdx("p", null, "If we inspect the service, we will see that it defines more ports than we have describe above. So these ports will be used for all the internal Istio communication."), mdx("h2", null, "Ingress Gateway Deployment"), mdx("p", null, "It's a wrapper around the Envoy proxy and it is configured as the sidecars used inside the service mesh. When a Gateway or VirtualService gets changed, they are detected by the Istio Pilot controller and converts this information to an Envoy configuration and sends it to all the proxies, including the Envoy inside the IngressGateway."), mdx("p", null, "Since container ports are not supposed to be declared in Kubernetes pods, we don't have to declare the ports in the Ingress Gateway Deployment. If we look inside the deployment we can see that there are a number of ports that are already declared anyway. We have to take care about the Ingress Gateway Deployment in SSL certificates. To access the certificates inside the Gateway resources, make sure that we have mounted all the required certificates properly."), mdx("pre", null, mdx("code", {
    parentName: "pre",
    "className": "language-yaml"
  }, "\n# Example represents volume mounts\nvolumeMounts:\n- mountPath: /etc/istio/ingressgateway-certs\n  name: ingressgateway-certs\n  readOnly: true\n- mountPath: /etc/istio/ingressgateway-ca-certs\n  name: ingressgateway-ca-certs\n  readOnly: true\n\n# Example represents volumes\nvolumes:\n- name: ingressgateway-certs\n  secret:\n    defaultMode: 420\n    optional: true\n    secretName: istio-ingressgateway-certs\n- name: ingressgateway-ca-certs\n  secret:\n    defaultMode: 420\n    optional: true\n    secretName: istio-ingressgateway-ca-certs\n")), mdx("h2", null, "The Gateway"), mdx("p", null, "The Gateway resources are used to configure the ports for Envoy and also support for the Kubernetes Ingress. Since all the three ports are exposed with the servies, we need these ports to be handled by the Envoy. It can be handled by declaring one or more Gateways."), mdx("pre", null, mdx("code", {
    parentName: "pre",
    "className": "language-yaml"
  }, "\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: default-gateway\n  namespace: istio-system\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n\n  - hosts:\n    - '*'\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n\n  - hosts:\n    - '*'\n    port:\n      name: https\n      number: 443\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      privateKey: /etc/istio/ingressgateway-certs/tls.key\n      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt\n\n  - hosts: # For all the TCP routing this fields will be ignored, but it will be matched\n    - '*'  # with the VirtualService, We use * since it will match anything.\n    port:\n      name: mysql\n      number: 3306\n      protocol: TCP\n")), mdx("h2", null, "VirtualService"), mdx("p", null, "The last interesting resource we have is the VirtualService, it used in concert with the Gateway to configure Envoy."), mdx("p", null, "A general configuration for an HTTP(s) service"), mdx("pre", null, mdx("code", {
    parentName: "pre",
    "className": "language-yaml"
  }, "\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: counter\nspec:\n  gateways:\n  - default-gateway.istio-system.svc.cluster.local\n  hosts:\n  - counter.lab.example.com\n  http:\n  - match:\n    - uri:\n      prefix: /\n    route:\n    - destination:\n        host: counter\n        port:\n          number: 80\n\n")), mdx("h2", null, "Application Service and Deployment"), mdx("p", null, "The request have now reached the application service and deployment. These are normal Kubernetes resources."), mdx("h2", null, "Extras:"), mdx("h3", null, "Debugging Istio Gateway"), mdx("p", null, "First we will use istioctl to check the configuration status of Istio Ingress Gateway:"), mdx("pre", null, mdx("code", {
    parentName: "pre",
    "className": "language-yaml"
  }, "\n# istioctl proxy-status istio-ingressgateway-5586f47659-r64lb.istio-system\nClusters Match\nListeners Match\nRoutes Match\n\n")), mdx("p", null, "If anything does not get synced with it, try restarting the ingress gateway pod once - it may be possible that it somehow an update got missed. If RDS looked good, we can check access logs of it."), mdx("pre", null, mdx("code", {
    parentName: "pre",
    "className": "language-yaml"
  }, "\n#kubectl get configmap istio -n istio-system -o yaml | grep \"accessLogFile: \"\ndisable access log.\\naccessLogFile: \\\"/dev/stdout\\\"\\n\\n# If accessLogEncoding\n\n")), mdx("p", null, "Once all the access logs are enabled, we can try torequest a few more times and check the logs on the Ingress Gateway:"), mdx("pre", null, mdx("code", {
    parentName: "pre",
    "className": "language-yaml"
  }, "\n# kubectl logs -n istio-system istio-ingressgateway-5586f47659-r64lb | grep -v deprecated\n\n"))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/service-mesh/istio-ingress-gateway-in-kubernetes</link><guid isPermaLink="false">https://layer5.io/resources/service-mesh/istio-ingress-gateway-in-kubernetes</guid><pubDate>Fri, 01 Apr 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/7d817888386c321cf1d1e87dfbce798b/Istio Ingress Gateway.png" length="0" type="image/png"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;p&gt;Predominantly, Kubernetes has used an Ingress controller to handle the traffic that enters the cluster from the outside. Istio has replaced all the familiar Ingress resource with new Gateway and VirtualServices resources. They work in sync to route all the traffic into the mesh. Inside the mesh there is no requirement for Gateways since the services can access each other by a cluster local service name.&lt;/p&gt;&lt;h3&gt;Let’s understand the working with a representation&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;static/Istio Ingress Gateway No Title-080918fabe90005624619773f1cde554.png&quot; align=&quot;center&quot; alt=&quot;Istio Ingress Gateway in Kubernetes No Title&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;Firstly A request is made by a client on a specific port&lt;/li&gt;&lt;li&gt;Then a load balancer on this port listens and forwards the request to one of the workers in theh cluster on same or a new port&lt;/li&gt;&lt;li&gt;Inside the cluster the request is routed to the Istio Ingress Gateway which is listened on the port of the load balancer&lt;/li&gt;&lt;li&gt;The Service forwards the requestto an Istio Ingress Gateway Pod which is managed by a deployment&lt;/li&gt;&lt;li&gt;The Ingress Gateway Pod is configured by a Gateway and a VirtualService.&lt;/li&gt;&lt;li&gt;The Gateway configures all the ports, protocol, and certificates.&lt;/li&gt;&lt;li&gt;The Virtual Service configures all the routing information to find the correct Servicein it.&lt;/li&gt;&lt;li&gt;The Istio Ingress Gateway Pod routes the request to the application Service.&lt;/li&gt;&lt;li&gt;And lastly, the application Service routes the request to an application Pod which is managed by a deployment.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;ul&gt;&lt;/ul&gt;&lt;h2&gt;Ingress Gateway Service&lt;/h2&gt;&lt;p&gt;The Ingress Gateway Service must listen to all the ports to be able to forward the traffic to the Ingress Gateway pods. Here we will be using routing to bring all the port numbers back to their initial state.&lt;/p&gt;&lt;p&gt;Note that a Kubernetes Service is not a real service, but, since we are using type: &amp;quot;NodePort&amp;quot;, all the request will be handled by the kube-proxy provided by Kubernetes and forwarded to a node with a current running pod. Once on the node, an IP-tables is configured a request will be forwarded to the appropriate pod.&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-yaml&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token comment&quot; style=&quot;color:rgb(99, 119, 119);font-style:italic&quot;&gt;# From the istio-ingressgateway service&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; http2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;nodePort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color:rgb(247, 140, 108)&quot;&gt;30000&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color:rgb(247, 140, 108)&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; TCP&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; https&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;nodePort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color:rgb(247, 140, 108)&quot;&gt;30443&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color:rgb(247, 140, 108)&quot;&gt;443&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; TCP&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; mysql&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;nodePort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color:rgb(247, 140, 108)&quot;&gt;30306&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color:rgb(247, 140, 108)&quot;&gt;3306&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; TCP&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;If we inspect the service, we will see that it defines more ports than we have describe above. So these ports will be used for all the internal Istio communication.&lt;/p&gt;&lt;h2&gt;Ingress Gateway Deployment&lt;/h2&gt;&lt;p&gt;It&amp;#x27;s a wrapper around the Envoy proxy and it is configured as the sidecars used inside the service mesh. When a Gateway or VirtualService gets changed, they are detected by the Istio Pilot controller and converts this information to an Envoy configuration and sends it to all the proxies, including the Envoy inside the IngressGateway.&lt;/p&gt;&lt;p&gt;Since container ports are not supposed to be declared in Kubernetes pods, we don&amp;#x27;t have to declare the ports in the Ingress Gateway Deployment. If we look inside the deployment we can see that there are a number of ports that are already declared anyway. We have to take care about the Ingress Gateway Deployment in SSL certificates. To access the certificates inside the Gateway resources, make sure that we have mounted all the required certificates properly.&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-yaml&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token comment&quot; style=&quot;color:rgb(99, 119, 119);font-style:italic&quot;&gt;# Example represents volume mounts&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; /etc/istio/ingressgateway&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;certs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; ingressgateway&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;certs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token boolean important&quot; style=&quot;color:rgb(255, 88, 116)&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; /etc/istio/ingressgateway&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;ca&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;certs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; ingressgateway&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;ca&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;certs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token boolean important&quot; style=&quot;color:rgb(255, 88, 116)&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token plain&quot; style=&quot;display:inline-block&quot;&gt;
&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token comment&quot; style=&quot;color:rgb(99, 119, 119);font-style:italic&quot;&gt;# Example represents volumes&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; ingressgateway&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;certs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;defaultMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color:rgb(247, 140, 108)&quot;&gt;420&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token boolean important&quot; style=&quot;color:rgb(255, 88, 116)&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;secretName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; istio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;ingressgateway&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;certs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; ingressgateway&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;ca&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;certs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;defaultMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color:rgb(247, 140, 108)&quot;&gt;420&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token boolean important&quot; style=&quot;color:rgb(255, 88, 116)&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;secretName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; istio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;ingressgateway&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;ca&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;certs&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;h2&gt;The Gateway&lt;/h2&gt;&lt;p&gt;The Gateway resources are used to configure the ports for Envoy and also support for the Kubernetes Ingress. Since all the three ports are exposed with the servies, we need these ports to be handled by the Envoy. It can be handled by declaring one or more Gateways.&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-yaml&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; networking.istio.io/v1alpha3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; Gateway&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;gateway&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; istio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;system&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;istio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; ingressgateway&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;servers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token plain&quot; style=&quot;display:inline-block&quot;&gt;
&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color:rgb(173, 219, 103)&quot;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; http&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color:rgb(247, 140, 108)&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; HTTP&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token plain&quot; style=&quot;display:inline-block&quot;&gt;
&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color:rgb(173, 219, 103)&quot;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; https&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color:rgb(247, 140, 108)&quot;&gt;443&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; HTTPS&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; SIMPLE&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;privateKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; /etc/istio/ingressgateway&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;certs/tls.key&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;serverCertificate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; /etc/istio/ingressgateway&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;certs/tls.crt&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;token plain&quot; style=&quot;display:inline-block&quot;&gt;
&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token comment&quot; style=&quot;color:rgb(99, 119, 119);font-style:italic&quot;&gt;# For all the TCP routing this fields will be ignored, but it will be matched&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color:rgb(173, 219, 103)&quot;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token comment&quot; style=&quot;color:rgb(99, 119, 119);font-style:italic&quot;&gt;# with the VirtualService, We use * since it will match anything.&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; mysql&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color:rgb(247, 140, 108)&quot;&gt;3306&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; TCP&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;h2&gt;VirtualService&lt;/h2&gt;&lt;p&gt;The last interesting resource we have is the VirtualService, it used in concert with the Gateway to configure Envoy.&lt;/p&gt;&lt;p&gt;A general configuration for an HTTP(s) service&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-yaml&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; networking.istio.io/v1alpha3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; VirtualService&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; counter&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;gateways&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;gateway.istio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;system.svc.cluster.local&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; counter.lab.example.com&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; /&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; counter&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color:rgb(247, 140, 108)&quot;&gt;80&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;h2&gt;Application Service and Deployment&lt;/h2&gt;&lt;p&gt;The request have now reached the application service and deployment. These are normal Kubernetes resources.&lt;/p&gt;&lt;h2&gt;Extras:&lt;/h2&gt;&lt;h3&gt;Debugging Istio Gateway&lt;/h3&gt;&lt;p&gt;First we will use istioctl to check the configuration status of Istio Ingress Gateway:&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-yaml&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token comment&quot; style=&quot;color:rgb(99, 119, 119);font-style:italic&quot;&gt;# istioctl proxy-status istio-ingressgateway-5586f47659-r64lb.istio-system&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;Clusters Match&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;Listeners Match&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;Routes Match&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;If anything does not get synced with it, try restarting the ingress gateway pod once - it may be possible that it somehow an update got missed. If RDS looked good, we can check access logs of it.&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-yaml&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token comment&quot; style=&quot;color:rgb(99, 119, 119);font-style:italic&quot;&gt;#kubectl get configmap istio -n istio-system -o yaml | grep &amp;quot;accessLogFile: &amp;quot;&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;disable access log.\naccessLogFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color:rgb(199, 146, 234)&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; \&amp;quot;/dev/stdout\&amp;quot;\n\n&lt;/span&gt;&lt;span class=&quot;token comment&quot; style=&quot;color:rgb(99, 119, 119);font-style:italic&quot;&gt;# If accessLogEncoding&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;Once all the access logs are enabled, we can try torequest a few more times and check the logs on the Ingress Gateway:&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-yaml&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token comment&quot; style=&quot;color:rgb(99, 119, 119);font-style:italic&quot;&gt;# kubectl logs -n istio-system istio-ingressgateway-5586f47659-r64lb | grep -v deprecated&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[An Introduction to Meshery (Webinar-on-Demand)]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "An Introduction to Meshery (Webinar-on-Demand)",
  "thumbnail": "../../../assets/images/meshery/full-logo/meshery-logo-light-text.svg",
  "date": "2021-11-07 10:30:05 -0530",
  "category": "Meshery",
  "type": "Recorded Webinar",
  "product": "Meshery",
  "tags": ["Network Planes", "Meshery"],
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, mdx(Link, {
    to: "/service-mesh-management/meshery",
    mdxType: "Link"
  }, "Meshery"), " is an open source, vendor-neutral, extensible management plane that enables service mesh users to overcome the challenges of complex virtual networking, empowers them to design and apply patterns containing tried and true best practices, benchmarks the performance of your service mesh deployments and enables developers, operators, and product managers to understand and manage their cloud native services with confidence."), mdx("h3", null, "Let\u2019s learn how to manage service meshes with confidence with the extensible service mesh manager, ", mdx(Link, {
    to: "/service-mesh-management/meshery",
    mdxType: "Link"
  }, "Meshery"), "."), mdx("div", {
    className: "iframe-container"
  }, mdx("iframe", {
    width: "460",
    height: "215",
    src: "https://www.youtube.com/embed/mU8qHUGYsk8",
    loading: "lazy",
    title: "YouTube video player",
    frameBorder: "0",
    allow: "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",
    allowFullScreen: true
  }))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/meshery/an-introduction-to-meshery-webinar-on-demand</link><guid isPermaLink="false">https://layer5.io/resources/meshery/an-introduction-to-meshery-webinar-on-demand</guid><pubDate>Sun, 07 Nov 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/2f4a78ada287ae5dcc2e75fad653f671/meshery-logo-light-text.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;p&gt;&lt;a href=&quot;/service-mesh-management/meshery&quot;&gt;Meshery&lt;/a&gt; is an open source, vendor-neutral, extensible management plane that enables service mesh users to overcome the challenges of complex virtual networking, empowers them to design and apply patterns containing tried and true best practices, benchmarks the performance of your service mesh deployments and enables developers, operators, and product managers to understand and manage their cloud native services with confidence.&lt;/p&gt;&lt;h3&gt;Let’s learn how to manage service meshes with confidence with the extensible service mesh manager, &lt;a href=&quot;/service-mesh-management/meshery&quot;&gt;Meshery&lt;/a&gt;.&lt;/h3&gt;&lt;div class=&quot;iframe-container&quot;&gt;&lt;iframe width=&quot;460&quot; height=&quot;215&quot; src=&quot;https://www.youtube.com/embed/mU8qHUGYsk8&quot; loading=&quot;lazy&quot; title=&quot;YouTube video player&quot; frameBorder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Service Mesh FAQs]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Service Mesh FAQs",
  "thumbnail": "../../../assets/images/service-mesh-icons/service-mesh.svg",
  "date": "2021-11-05 10:30:05 -0530",
  "category": "FAQ",
  "tags": ["Service Mesh", "FAQ"],
  "type": "FAQ",
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", null, mdx(FAQ, {
    category: ["Service Mesh"],
    mdxType: "FAQ"
  }))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/faq/service-mesh-faqs</link><guid isPermaLink="false">https://layer5.io/resources/faq/service-mesh-faqs</guid><pubDate>Fri, 05 Nov 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/cb310234b6631abcabb632a85974a3dd/service-mesh.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;div&gt;&lt;section id=&quot;faq&quot; class=&quot;faqSectionstyle__FaqSectionWrapper-sc-197kv4v-0 iPiXYd&quot;&gt;&lt;div class=&quot;Container__ContainerWrapper-sc-1i64mot-0 eZMKUd&quot;&gt;&lt;div class=&quot;SectionTitle__TitleWrap-sc-1r9bvfi-0 cfYUXe section-title&quot;&gt;&lt;h1&gt;&lt;span&gt;Frequently Asked Questions&lt;/span&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;Accordion&quot; class=&quot;accordionstyle__AccordionWrapper-sc-zq6yo-0 wUaHE reusecore__accordion&quot;&gt;&lt;h2 class=&quot;category_name&quot;&gt;Service Mesh&lt;/h2&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-0&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-0&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;What value does a service mesh provide?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-0&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Service meshes provide visibility, resiliency, traffic, and security control of distributed application services. Much value is promised here, particularly to the extent that much is given without the need to change your application code.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-1&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-1&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;What if I deploy one service mesh, like Istio, then need to switch to another service mesh?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-1&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Use of Meshery and the Service Mesh Interface specification help avoid switching costs between service meshes.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The goal of Service Mesh Interface specifications are to provide an abstract, unified method of interacting with a service mesh.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;See if your service mesh adheres to SMI specifications at the link below.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;a href=&quot;/projects/service-mesh-interface-conformance&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn faqbutton&quot; title=&quot;Service Mesh Interface&quot;&gt; Service Mesh Interface&lt;/button&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-2&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-2&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;What are service mesh standards and why do they matter?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-2&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Three service mesh abstractions have arisen given the high number of service meshes available (see the Service Mesh Landscape)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Servcie Mesh Performance (SMP) - A standard for capturing and characterizing service mesh performance.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Service Mesh Interface (SMI) - A standard interface for using common service mesh functionality on Kubernetes.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Multi-Vendor Service Mesh Interoperation (Hamlet) - A set of API standards for enabling service mesh federation.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;a href=&quot;https://calcotestudios.com/talks/decks/slides-open-infrastructure-summit-2020-its-a-multi-mesh-world.html&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn faqbutton&quot; title=&quot;See Open Infrastructure Summit Presentation&quot;&gt; See Open Infrastructure Summit Presentation&lt;/button&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-3&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-3&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;How does a service mesh help me? in my role?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-3&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Operators don’t necessarily need to involve Developers to change how many times a service should retry before timing out or to run experiments (known as chaos engineering). They are empowered to affect service behavior independently.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Customer Success (support) teams can handle the revocation of client access without involving Operators.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Product Owners can use quota management to enforce price plan limitations for quantity-based consumption of particular services.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Developers can redirect their internal stakeholders to a canary with beta functionality without involving Operators.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Security Engineers can declaratively define authentication and authorization policies, enforced by the service mesh.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Network Engineers are empowered with an extraordinarily high degree of application-level control formerly simply unavailable to them.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-4&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-4&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;What is a service mesh?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-4&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Service meshes provide intent-based networking for microservices describing desired behavior of the network in the face of constantly changing conditions and network topology. At their core, service meshes provide:&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A services-first network; A developer-driven network;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A network that is primarily concerned with alleviating application developers from building infrastructure concerns into their application code; A network that empowers operators with the ability to declaratively define network behavior, node identity, and traffic flow through policy;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A network that enables service owners to control application logic without engaging developers to change its code.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Value derived from the layer of tooling that service meshes provide is most evident in the land of microservices. The more services, the more value derived from the mesh. In subsequent chapters, I show how service meshes provide value outside of the use of microservices and containers and help modernize existing services (running on virtual or bare metal servers) as well.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-5&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-5&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;When should I adopt a service mesh?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-5&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;There are many service meshes to choose from as well as a variety of deployment models. Which is right for you and your organization depends on where you are in your maturity curve (Cloud Native skill set), number of services, underlying infrastructure, and how centric technology is to your business. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;So, should you deploy a service mesh? More and more the answer is “yes”. Service meshes are quickly becoming a ubiquitous layer in modern infrastructures.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;a href=&quot;/deploy-service-mesh&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn faqbutton&quot; title=&quot;Factors When considering how strongly you need a service mesh&quot;&gt; Factors When considering how strongly you need a service mesh&lt;/button&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;askus_section&quot;&gt;&lt;h2&gt;Didn&amp;#x27;t find an answer to your question?&lt;/h2&gt;&lt;div class=&quot;Contact-Modal__ContactFormModalWrapper-sc-1sqlxv4-0 TKQLf&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn open-modal-btn&quot; title=&quot;Just Ask&quot;&gt; Just Ask&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Meshery FAQs]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Meshery FAQs",
  "thumbnail": "../../../assets/images/meshery/full-logo/meshery-logo-tag-dark-text-side.png",
  "date": "2021-11-03 10:30:05 -0530",
  "category": "FAQ",
  "tags": ["Meshery", "FAQ"],
  "type": "FAQ",
  "product": "Meshery",
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", null, mdx(FAQ, {
    category: ["Meshery"],
    mdxType: "FAQ"
  }))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/faq/meshery-faqs</link><guid isPermaLink="false">https://layer5.io/resources/faq/meshery-faqs</guid><pubDate>Wed, 03 Nov 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/eca348efb0259f2dcdd1cfa1dd19da69/meshery-logo-tag-dark-text-side.png" length="0" type="image/png"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;div&gt;&lt;section id=&quot;faq&quot; class=&quot;faqSectionstyle__FaqSectionWrapper-sc-197kv4v-0 iPiXYd&quot;&gt;&lt;div class=&quot;Container__ContainerWrapper-sc-1i64mot-0 eZMKUd&quot;&gt;&lt;div class=&quot;SectionTitle__TitleWrap-sc-1r9bvfi-0 cfYUXe section-title&quot;&gt;&lt;h1&gt;&lt;span&gt;Frequently Asked Questions&lt;/span&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;Accordion&quot; class=&quot;accordionstyle__AccordionWrapper-sc-zq6yo-0 wUaHE reusecore__accordion&quot;&gt;&lt;h2 class=&quot;category_name&quot;&gt;Meshery&lt;/h2&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-6&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-6&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;Does Meshery manage service meshes?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-6&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Yes, as the cloud native management plane, Meshery provisions and manages the lifecycle of service meshes.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;a href=&quot;/service-mesh-management/meshery&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn faqbutton&quot; title=&quot;Run Meshery&quot;&gt; Run Meshery&lt;/button&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-7&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-7&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;Why do I need to authenticate my social account to use Meshery?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-7&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Create your account - avoid having to reconfigure Meshery each time you deploy it. When you use a social account to authenticate to Meshery, your environment configuration persists from session to session. Meshery sources from Mixer Prometheus adapter and uses Prometheus node-exporter.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Rank your deployment - results of performance tests are anonymously collected using the Service Mesh Performance, so that Meshery may provide the public service of ranking the speed of your deployment against that of the rest of the world&amp;#x27;s users.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-8&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-8&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;Why use Meshery?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-8&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Meshery is an open source, vendor neutral project that facilitates testing across meshes.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Other performance benchmark tools are not packaged into a mesh testing utility, but are only load-generators unto their own.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;a href=&quot;/projects/service-mesh-performance&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn faqbutton&quot; title=&quot;Service Mesh Performance&quot;&gt; Service Mesh Performance&lt;/button&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-9&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-9&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;I have already selected and am operating a service mesh. Should I use Meshery?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-9&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;As a management plane, Meshery provides value in a number of ways post-adoption of a service mesh. For example, Meshery analyzes your deployments in evaluation of service mesh best practices and patterns, highlighting where you might be deviating. Meshery&amp;#x27;s Other ways can be articulated in its set of features spanning:&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Lifecycle Management&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Configuration Management&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Performance Management&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Workload Management&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;a href=&quot;/service-mesh-management/meshery&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn faqbutton&quot; title=&quot;Meshery&quot;&gt; Meshery&lt;/button&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-10&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-10&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;Is Meshery open source?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-10&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Yes, all of Layer5&amp;#x27;s projects are licensed under Apache v2, including Meshery.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;As the cloud native management plane, Meshery is an extensible platform, offering multiple extension points within which users and partners can customize and extend Meshery&amp;#x27;s functionality.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;askus_section&quot;&gt;&lt;h2&gt;Didn&amp;#x27;t find an answer to your question?&lt;/h2&gt;&lt;div class=&quot;Contact-Modal__ContactFormModalWrapper-sc-1sqlxv4-0 TKQLf&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn open-modal-btn&quot; title=&quot;Just Ask&quot;&gt; Just Ask&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Layer5 FAQs]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Layer5 FAQs",
  "thumbnail": "../../../assets/images/layer5/layer5-tagline/png/layer5-tag-dark-bg.png",
  "date": "2021-11-02 10:30:05 -0530",
  "category": "FAQ",
  "tags": ["Layer5", "FAQ"],
  "type": "FAQ",
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", null, mdx(FAQ, {
    category: ["Layer5"],
    mdxType: "FAQ"
  }))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/faq/layer5-faqs</link><guid isPermaLink="false">https://layer5.io/resources/faq/layer5-faqs</guid><pubDate>Tue, 02 Nov 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/078ee5ca788507b492122ff452c54c25/layer5-tag-dark-bg.png" length="0" type="image/png"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;div&gt;&lt;section id=&quot;faq&quot; class=&quot;faqSectionstyle__FaqSectionWrapper-sc-197kv4v-0 iPiXYd&quot;&gt;&lt;div class=&quot;Container__ContainerWrapper-sc-1i64mot-0 eZMKUd&quot;&gt;&lt;div class=&quot;SectionTitle__TitleWrap-sc-1r9bvfi-0 cfYUXe section-title&quot;&gt;&lt;h1&gt;&lt;span&gt;Frequently Asked Questions&lt;/span&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;Accordion&quot; class=&quot;accordionstyle__AccordionWrapper-sc-zq6yo-0 wUaHE reusecore__accordion&quot;&gt;&lt;h2 class=&quot;category_name&quot;&gt;Layer5&lt;/h2&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-11&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-11&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;Are Layer5&amp;#x27;s solutions open source?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-11&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Yes, all of Layer5&amp;#x27;s projects are licensed under Apache v2.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Layer5 also offers extensions to the Meshery project in which Enterprise-centric functionality is commercially offered and supported.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-12&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-12&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;As a member of one of Layer5&amp;#x27;s GitHub organizations, What is expected of me?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-12&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;As a member of one of Layer5&amp;#x27;s GitHub organizations, your user account is entitled with triage level permissions across all repositories in the org. You are expected to engage where the topic strikes your interest, triaging (assigning, clarifying, labeling, qualifying) any issue you feel comfortable doing so. You are encouraged to review any open pull request and offer feedback to or ask questions to the author.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Layer5 has a number of GitHub organziations in which it&amp;#x27;s projects are advanced. See the repository overview below.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;a href=&quot;https://docs.google.com/document/d/1brtiJhdzal_O6NBZU_JQXiBff2InNtmgL_G1JgAiZtk/edit&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn faqbutton&quot; title=&quot;Layer5 Repository Overview&quot;&gt; Layer5 Repository Overview&lt;/button&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-13&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-13&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;As a community member, what can I expect from Layer5? What does Layer5 expect of me?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-13&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The Layer5 community expects you to get as much or more out of your time than you give to the projects. We expect earnest effort from its contributors. What “earnest effort” means is different for each community member as all have different circumstances. Suffice to say, the more you put into your efforts, the greater your reward will be. Most community contributors stay with the project for many months, if not indefinitely. Length of involvement is entirely up to the individual community member. You can expect to be challenged, to be assisted, to learn, to be recognized for your effort and to have your contributions appreciated.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;As a member of the Layer5 community, you are expected to be a good representative of Layer5&amp;#x27;s cultures and values of helping fellow members and paying it forward as we all learn together. You are expected to offer your ideas and skills to help advance our community and its projects. You are expected to share your experiences with others, to be curious, to be helpful, to ask questions, to challenge others and to be challenged yourself, to spread the word about what we collectively do here, to invite new members, to learn, to share, to make friends, to build a network, to write blog posts, to tweet, to become maintainers, to become MeshMates, to earn an internship, to get hired by Layer5 - - any and all of these things.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;a href=&quot;https://layer5.io/community/meshmates&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn faqbutton&quot; title=&quot;Reach out to a MeshMate to find out more&quot;&gt; Reach out to a MeshMate to find out more&lt;/button&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-14&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-14&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;I see works of other contributors being highlighted. Will my contributions be highlighted, too?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-14&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;We might not get to everyone, but we try to elevate the works of all of our contributors. All of our community members are proud of their work and so are we! We want their work and names to be recognized across our collective technology industry. Make sure that you follow and engage with the Twitter, YouTube, and LinkedIn accounts.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;a href=&quot;https://twitter.com/layer5&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn faqbutton&quot; title=&quot;Layer5 on Twitter&quot;&gt; Layer5 on Twitter&lt;/button&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-15&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-15&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;I am not a coder. Can I contribute, too?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-15&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Some community members join to contribute to open source projects, others jump in to put those projects to use, some are here to help cultivate and steward our community, while others are here just to hangout and absorb. All members are most welcome. Make sure that you introduce yourself in the Layer5 Slack and let other community members get acquainted with you and vice-versa.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;a href=&quot;https://slack.layer5.io&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn faqbutton&quot; title=&quot;Layer5 Slack&quot;&gt; Layer5 Slack&lt;/button&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;askus_section&quot;&gt;&lt;h2&gt;Didn&amp;#x27;t find an answer to your question?&lt;/h2&gt;&lt;div class=&quot;Contact-Modal__ContactFormModalWrapper-sc-1sqlxv4-0 TKQLf&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn open-modal-btn&quot; title=&quot;Just Ask&quot;&gt; Just Ask&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Internship FAQs]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Internship FAQs",
  "thumbnail": "../../../assets/images/workshops/workshops.png",
  "date": "2021-11-01 10:30:05 -0530",
  "category": "FAQ",
  "tags": ["Internship", "FAQ"],
  "type": "FAQ",
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", null, mdx(FAQ, {
    category: ["internships"],
    mdxType: "FAQ"
  }))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/faq/internship-faqs</link><guid isPermaLink="false">https://layer5.io/resources/faq/internship-faqs</guid><pubDate>Mon, 01 Nov 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/19e6848a9ab1dd41f5e4afc0e48f629a/workshops.png" length="0" type="image/png"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;div&gt;&lt;section id=&quot;faq&quot; class=&quot;faqSectionstyle__FaqSectionWrapper-sc-197kv4v-0 iPiXYd&quot;&gt;&lt;div class=&quot;Container__ContainerWrapper-sc-1i64mot-0 eZMKUd&quot;&gt;&lt;div class=&quot;SectionTitle__TitleWrap-sc-1r9bvfi-0 cfYUXe section-title&quot;&gt;&lt;h1&gt;&lt;span&gt;Frequently Asked Questions&lt;/span&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;Accordion&quot; class=&quot;accordionstyle__AccordionWrapper-sc-zq6yo-0 wUaHE reusecore__accordion&quot;&gt;&lt;h2 class=&quot;category_name&quot;&gt;internships&lt;/h2&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-16&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-16&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;How do I land an internship with Layer5?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-16&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;To best position your candidancy for an internship with Layer5, engage in the community and its projects. Start contributing and keep contributing. Community members who consistently contribute are the first individuals to be awarded internships when new internship opportunities open up - particularly members who are making significantly impactful contributions.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Understand that internships are assigned as a recognition of work that you are already performing. They are not assigned in the hopes of you becoming a good contributor, but are awarded to support and reinforce efforts that you are already giving. Engage and make an impact on an area of a project. Show your passion for helping move the project forward, willingness to work hard, and capacity to learn.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Recognize that there are many hundreds of contributors and relatively few maintainers and MeshMates. If you don&amp;#x27;t get an immediate response, don&amp;#x27;t lose heart. Be tenacious and find a piece of one of the projects to be engaged with and advance.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;a href=&quot;/community/meshmates&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn faqbutton&quot; title=&quot;Engage a MeshMate&quot;&gt; Engage a MeshMate&lt;/button&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-17&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-17&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;How often does Layer5 offer internships?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-17&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Continuously. Layer5 has internships starting and stopping frequently. Some internships rigidly start and stop on particular dates, while other internships offered start as a batch of candidates show collective readiness. We work with individuals to align the timings of the internship with other activities in their life.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;a href=&quot;https://github.com/issues?q=is%3Aopen+is%3Aissue+archived%3Afalse+org%3Alayer5io+org%3Ameshery+org%3Aservice-mesh-performance+org%3Aservice-mesh-patterns+label%3A%22help+wanted%22+&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn faqbutton&quot; title=&quot;Grab a &amp;quot;Help Wanted&amp;quot; Issue&quot;&gt; Grab a &amp;quot;Help Wanted&amp;quot; Issue&lt;/button&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-18&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-18&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;What are characteristics of successful interns?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-18&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Interns that thrive at Layer5 are those that espouse the Layer5 culture of paying it forward. These interns freely help other contributors, understanding that 1) they learn as they teach and assist others, 2) their projects are futhered with more contributors engage, and 3) any contributors path to maintainership is one of enabling others.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Successful interns steward projects naturally as they become a resource to other contributors. These interns frequently become component and/or core maintainers.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Successful interns internalize the fact that the real value of engaging and contributing to projects is the experience gained. They understand that the experience is theirs for the taking and that project maintainers and Layer5 employees want you to seize the opportunity. We consider your success our success and embrace the concept that your meaningful engagement is to all our benefits.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;a href=&quot;/blog/tag/community&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn faqbutton&quot; title=&quot;Hear from other interns&quot;&gt; Hear from other interns&lt;/button&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItem&quot; class=&quot;accordionstyle__AccordionItemWrapper-sc-zq6yo-1 cwuCUo accordion__item&quot;&gt;&lt;div data-accordion-component=&quot;AccordionItemHeading&quot; class=&quot;accordionstyle__AccordionTitleWrapper-sc-zq6yo-4 euxeaJ accordion__header&quot; role=&quot;heading&quot; aria-level=&quot;3&quot;&gt;&lt;div class=&quot;accordionstyle__AccordionItemButtonWrapper-sc-zq6yo-5 ilNMiK&quot; id=&quot;accordion__heading-raa-19&quot; aria-disabled=&quot;false&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;accordion__panel-raa-19&quot; role=&quot;button&quot; tabindex=&quot;0&quot; data-accordion-component=&quot;AccordionItemButton&quot;&gt;&lt;div class=&quot;accordionstyle__IconWrapper-sc-zq6yo-7 jCBZFW&quot;&gt;&lt;h5&gt;What are accomplishments of successful interns?&lt;/h5&gt;&lt;div class=&quot;accordionstyle__OpenIcon-sc-zq6yo-2 eqQQKC&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 217.9L383 345c9.4 9.4 24.6 9.4 33.9 0 9.4-9.4 9.3-24.6 0-34L273 167c-9.1-9.1-23.7-9.3-33.1-.7L95 310.9c-4.7 4.7-7 10.9-7 17s2.3 12.3 7 17c9.4 9.4 24.6 9.4 33.9 0l127.1-127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&quot;accordionstyle__CloseIcon-sc-zq6yo-3 fVIWdl&quot;&gt;&lt;svg stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; viewBox=&quot;0 0 512 512&quot; color=&quot;white&quot; style=&quot;color:white&quot; height=&quot;22&quot; width=&quot;22&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-accordion-component=&quot;AccordionItemPanel&quot; class=&quot;accordionstyle__AccordionBodyWrapper-sc-zq6yo-6 llPzmQ accordion__body&quot; aria-hidden=&quot;true&quot; id=&quot;accordion__panel-raa-19&quot; hidden=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Many Layer5 interns speak at large, public technology conferences like KubeCon, DockerCon, and so on. They write blog posts and share about their experience and learnings on social media. They engage with their whole self.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Many interns become open source maintainers, and have ongoing responsibility to steward Layer5 and CNCF projects.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;faqbutton&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;askus_section&quot;&gt;&lt;h2&gt;Didn&amp;#x27;t find an answer to your question?&lt;/h2&gt;&lt;div class=&quot;Contact-Modal__ContactFormModalWrapper-sc-1sqlxv4-0 TKQLf&quot;&gt;&lt;button class=&quot;btnstyle__ButtonStyle-sc-mhxpaj-0 IBuPZ appion__btn open-modal-btn&quot; title=&quot;Just Ask&quot;&gt; Just Ask&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Envoy and WebAssembly]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Envoy and WebAssembly",
  "thumbnail": "./wasm-envoy.svg",
  "date": "2021-10-29 10:30:05 -0530",
  "category": "WebAssembly Filters",
  "type": "Article",
  "technology": "WebAssembly",
  "tags": ["WebAssembly", "Envoy"],
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", {
    className: "intro"
  }, mdx("p", null, "Learn more about WebAssembly's use within service mesh data planes in ", mdx(Link, {
    className: "blog",
    to: "/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition",
    mdxType: "Link"
  }, "The Enterprise Path to Service Mesh Archictures (2nd Edition)"), " -  free book and excellent resource for anyone looking to understand WASM filters, Lua scripts, and other options available for extending the data plane.")), mdx("p", null, "WASM stands for WebAssembly, which is an open standard for defining a binary format for executable programs. It also defines Interfaces for interacting with host environments through the WebAssembly System Interface (WASI). Browsers and large web applications were the primary focus of these host environments, with the goal of securely running programmes to enhance performance. The W3C maintains WASM as an open standard, and all modern browsers have adopted it. WebAssembly is the fourth language that can run natively in web browsers, following HTML, CSS, and Javascript."), mdx("p", null, "Google's open-source high-performance JavaScript and WebAssembly engine, V8, is being embedded into Envoy, bringing WASM support to the platform. Envoy exposes an Application Binary Interface (ABI) to WASM modules via the WebAssembly System Interface, allowing them to function as Envoy filters. WASI operates effortlessly. Your application is written in one of your favorite languages, such as Rust, C++, or C. Then, for the host environment, build and compile them into a WebAssembly binary. For the resulting binary to execute, the WebAssembly runtime must offer the necessary interfaces to system calls. Conceptually, this is similar to JVM. If you have a JVM installed, then you can run any Java-like languages on it. Similarly, with a runtime, you can run the WebAssembly binary."), mdx("p", null, "Additional filters can be added to Envoy in one of two ways:", mdx("ul", null, mdx("li", null, "By incorporating your custom filter into Envoy's C++ source code and building a new version of Envoy natively. The disadvantage is that you'll have to maintain your own version of Envoy, but the advantage is that your custom filter will run at native speed."), mdx("li", null, "Via WASM, by developing your custom filter in C++, Rust, AssemblyScript, or Go and integrating it as a WebAssembly binary. The disadvantage is that WASM-based filters have considerable overhead, but the advantage is that WASM-based filters may be dynamically loaded and reloaded in Envoy at runtime."))), mdx("p", null, "On startup, Envoy's configuration is initialised using bootstrap. The xDS APIs in Envoy enable\xA0dynamic configuration loading and reloading during runtime. There are several sections in the Envoy configuration (e.g. LDS which is for configuring Listeners and CDS which is for configuring clusters). WASM plugins can be configured in each section (programs)."), mdx("h3", null, "Dynamically (Re)loadable Intelligence"), mdx("p", null, " Data planes are powerful because they can dynamically load WASM programs to inspect, rewrite, and reroute packets carrying application requests. WASM applications can integrate business logic considerations when filtering application requests when using a management plane. The service mesh can implement business logic, as well as common application infrastructure logic: "), mdx("ul", null, mdx("li", null, "Subscription plan enforcement: rate limiting requests based on user\u2019s subscription plan"), mdx("li", null, "Class of Service: directing requests to high performance clusters based on user demographics or activity"), mdx("li", null, "Multivariate testing: facilitating comparison a of high number of variables between deployments (service versions) and users")), mdx("div", {
    className: "fact"
  }, mdx("p", null, "To get a feel of these\xA0capabilities, try experimenting with the ", mdx(Link, {
    to: "/projects/image-hub",
    mdxType: "Link"
  }, "Image Hub"), ",a prototype application developed in Rust that runs on Consul and allows you to explore WebAssembly modules used as Envoy filters.")), mdx("div", {
    className: "center"
  }, mdx("img", {
    src: Infrastructure,
    align: "center",
    alt: "application infrastructure logic"
  }), mdx("p", null, "Figure 1:. How the intelligence of the cloud native management plane and the power of the service mesh data plane combine to deliver application infrastructure logic.  ")), mdx("p", null, "WebAssembly is intriguing in part because of its performance characteristics, which vary depending on the program/filter used. For network filtering use cases, some have a 10% to 20% overhead as compared to natively executed code.\xA0 Given its high degree of portability, WebAssembly resembles Docker in certain ways. WASM's virtual stack machine, like the Java Virtual Machine (JVM), is evolving into a write once, run anywhere system (WORA). WASM executables are precompiled with a wide range of languages that support it as a compilation target (currently around 40 languages).")));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/webassembly-filters/envoy-and-webassembly</link><guid isPermaLink="false">https://layer5.io/resources/webassembly-filters/envoy-and-webassembly</guid><pubDate>Fri, 29 Oct 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/06775492c84a32dae01532165deed01e/wasm-envoy.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;div class=&quot;intro&quot;&gt;&lt;p&gt;Learn more about WebAssembly&amp;#x27;s use within service mesh data planes in &lt;a class=&quot;blog&quot; href=&quot;/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition&quot;&gt;The Enterprise Path to Service Mesh Archictures (2nd Edition)&lt;/a&gt; -  free book and excellent resource for anyone looking to understand WASM filters, Lua scripts, and other options available for extending the data plane.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;WASM stands for WebAssembly, which is an open standard for defining a binary format for executable programs. It also defines Interfaces for interacting with host environments through the WebAssembly System Interface (WASI). Browsers and large web applications were the primary focus of these host environments, with the goal of securely running programmes to enhance performance. The W3C maintains WASM as an open standard, and all modern browsers have adopted it. WebAssembly is the fourth language that can run natively in web browsers, following HTML, CSS, and Javascript.&lt;/p&gt;&lt;p&gt;Google&amp;#x27;s open-source high-performance JavaScript and WebAssembly engine, V8, is being embedded into Envoy, bringing WASM support to the platform. Envoy exposes an Application Binary Interface (ABI) to WASM modules via the WebAssembly System Interface, allowing them to function as Envoy filters. WASI operates effortlessly. Your application is written in one of your favorite languages, such as Rust, C++, or C. Then, for the host environment, build and compile them into a WebAssembly binary. For the resulting binary to execute, the WebAssembly runtime must offer the necessary interfaces to system calls. Conceptually, this is similar to JVM. If you have a JVM installed, then you can run any Java-like languages on it. Similarly, with a runtime, you can run the WebAssembly binary.&lt;/p&gt;&lt;p&gt;Additional filters can be added to Envoy in one of two ways:&lt;ul&gt;&lt;li&gt;By incorporating your custom filter into Envoy&amp;#x27;s C++ source code and building a new version of Envoy natively. The disadvantage is that you&amp;#x27;ll have to maintain your own version of Envoy, but the advantage is that your custom filter will run at native speed.&lt;/li&gt;&lt;li&gt;Via WASM, by developing your custom filter in C++, Rust, AssemblyScript, or Go and integrating it as a WebAssembly binary. The disadvantage is that WASM-based filters have considerable overhead, but the advantage is that WASM-based filters may be dynamically loaded and reloaded in Envoy at runtime.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;On startup, Envoy&amp;#x27;s configuration is initialised using bootstrap. The xDS APIs in Envoy enable dynamic configuration loading and reloading during runtime. There are several sections in the Envoy configuration (e.g. LDS which is for configuring Listeners and CDS which is for configuring clusters). WASM plugins can be configured in each section (programs).&lt;/p&gt;&lt;h3&gt;Dynamically (Re)loadable Intelligence&lt;/h3&gt;&lt;p&gt; Data planes are powerful because they can dynamically load WASM programs to inspect, rewrite, and reroute packets carrying application requests. WASM applications can integrate business logic considerations when filtering application requests when using a management plane. The service mesh can implement business logic, as well as common application infrastructure logic: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Subscription plan enforcement: rate limiting requests based on user’s subscription plan&lt;/li&gt;&lt;li&gt;Class of Service: directing requests to high performance clusters based on user demographics or activity&lt;/li&gt;&lt;li&gt;Multivariate testing: facilitating comparison a of high number of variables between deployments (service versions) and users&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;fact&quot;&gt;&lt;p&gt;To get a feel of these capabilities, try experimenting with the &lt;a href=&quot;/projects/image-hub&quot;&gt;Image Hub&lt;/a&gt;,a prototype application developed in Rust that runs on Consul and allows you to explore WebAssembly modules used as Envoy filters.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;center&quot;&gt;&lt;img src=&quot;static/figure1-8ca07464d8d5a4cb657bed3daa70716e.png&quot; align=&quot;center&quot; alt=&quot;application infrastructure logic&quot;/&gt;&lt;p&gt;Figure 1:. How the intelligence of the cloud native management plane and the power of the service mesh data plane combine to deliver application infrastructure logic.  &lt;/p&gt;&lt;/div&gt;&lt;p&gt;WebAssembly is intriguing in part because of its performance characteristics, which vary depending on the program/filter used. For network filtering use cases, some have a 10% to 20% overhead as compared to natively executed code.  Given its high degree of portability, WebAssembly resembles Docker in certain ways. WASM&amp;#x27;s virtual stack machine, like the Java Virtual Machine (JVM), is evolving into a write once, run anywhere system (WORA). WASM executables are precompiled with a wide range of languages that support it as a compilation target (currently around 40 languages).&lt;/p&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Lua vs WebAssembly]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Lua vs WebAssembly",
  "thumbnail": "./lua-wasm.svg",
  "date": "2021-10-28 10:30:05 -0530",
  "category": "WebAssembly Filters",
  "type": "Article",
  "technology": "WebAssembly",
  "tags": ["WebAssembly", "Envoy"],
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", {
    className: "intro"
  }, mdx("p", null, "Learn more about WebAssembly's use within service mesh data planes in ", mdx(Link, {
    className: "blog",
    to: "/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition",
    mdxType: "Link"
  }, "The Enterprise Path to Service Mesh Archictures (2nd Edition)"), " -  free book and excellent resource for anyone looking to understand WASM filters, Lua scripts, and other options available for extending the data plane.")), mdx("h3", null, "The Power of the Data Plane"), mdx("p", null, "Operators benefit from control planes because they provide much-needed element management. Data planes require control planes to apply service mesh-specific use cases to their fleet of service proxies. A control plane performs activities like configuration management, telemetry collecting, infrastructure-centric authorization, identity, etc. However, the service proxy is a massive source of power for them. Users frequently require customizing the chain of traffic filters (modules) that service proxies employ to perform much of their heavy lifting. Different technologies are used to provide data plane extensibility, and consequently, additional custom data plane intelligence, including:"), mdx("ul", null, mdx("li", null, "Lua - a scripting language for execution inside a Just-In-Time compiler, LuaJIT."), mdx("li", null, "WebAssembly (WASM) - a virtual stack machine as a compilation target for different languages to use as an execution environment.")), mdx("h3", null, "Lua and WebAssembly"), mdx("p", null, "People are discussing the merits of using a WebAssembly runtime since the introduction of WASM into service meshes. A\xA0 Lua runtime\xA0can be as little as 4 kb, with LuaJIT being surprisingly fast, having a runtime of only ~200 kb."), mdx("p", null, "The WebAssembly loader, not the runtime, is the source of complexity for the host software. When comparing the two, how do you weigh GCC or LLVM in terms of making optimized C or C++ faster or slower than LuaJIT?"), mdx("p", null, "The complexity of a WebAssembly runtime stems from the fact that it contains arch-specific optimizers as well as an Intermediate Representation to machine code translation stage that would usually be executed inside GCC or LLVM. Machine code can be created once and then cached on non-volatile storage until the input WASM file's hash changes (like the extracted contents of a Zip file). Since WASM has a similar approach to sandboxing (making the language/bytecode unable to describe accessing resources outside of what is granted), the result is lighter than Lua once the machine code is generated. However, WASM's compiled machine code does not require a garbage collector or JIT engine."), mdx("p", null, "WebAssembly follows the same flat, garbage-collected memory model as malloc and free. Suppose you want a garbage collector in a WebAssembly application. In that case, you can either compile it to WebAssembly and run it inside the sandbox or wait for extensions currently developing, such as \"opaque reference types,\" which allows WebAssembly applications to interact with objects managed by a Garbage Collector outside the sandbox."), mdx("h3", null, "NGINX and Lua"), mdx("p", null, "NGINX allows you to write\xA0dynamic modules that can be loaded at runtime based on\xA0configuration files. By modifying the configuration files and reloading NGINX, these modules can be unloaded. NGINX enables you to use Lua to embed custom logic into dynamic modules."), mdx("p", null, "Lua is a lightweight, embeddable scripting language that supports procedural, functional, and object-oriented programming. Lua is dynamically typed, and runs by interpreting bytecode with a register-based virtual machine."), mdx("p", null, "NGINX provides the ability to integrate dynamic Lua scripts using the ngx_lua module. Using NGINX with ngx_lua helps you offload logic from your services and hand their concerns off to an intelligent data plane. Leveraging NGINX's subrequests, the ngx_lua module allows the integration of Lua threads (or coroutines into the NGINX event model. Instead of passing logic to an upstream server, the Lua script can inspect and process service traffic. ngx_lua modules can be chained to be invoked at different phases of NGINX request processing.")));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/webassembly-filters/lua-vs-webassembly</link><guid isPermaLink="false">https://layer5.io/resources/webassembly-filters/lua-vs-webassembly</guid><pubDate>Thu, 28 Oct 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/e618b16625c039ca1840620451fc92dd/lua-wasm.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;div class=&quot;intro&quot;&gt;&lt;p&gt;Learn more about WebAssembly&amp;#x27;s use within service mesh data planes in &lt;a class=&quot;blog&quot; href=&quot;/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition&quot;&gt;The Enterprise Path to Service Mesh Archictures (2nd Edition)&lt;/a&gt; -  free book and excellent resource for anyone looking to understand WASM filters, Lua scripts, and other options available for extending the data plane.&lt;/p&gt;&lt;/div&gt;&lt;h3&gt;The Power of the Data Plane&lt;/h3&gt;&lt;p&gt;Operators benefit from control planes because they provide much-needed element management. Data planes require control planes to apply service mesh-specific use cases to their fleet of service proxies. A control plane performs activities like configuration management, telemetry collecting, infrastructure-centric authorization, identity, etc. However, the service proxy is a massive source of power for them. Users frequently require customizing the chain of traffic filters (modules) that service proxies employ to perform much of their heavy lifting. Different technologies are used to provide data plane extensibility, and consequently, additional custom data plane intelligence, including:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Lua - a scripting language for execution inside a Just-In-Time compiler, LuaJIT.&lt;/li&gt;&lt;li&gt;WebAssembly (WASM) - a virtual stack machine as a compilation target for different languages to use as an execution environment.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Lua and WebAssembly&lt;/h3&gt;&lt;p&gt;People are discussing the merits of using a WebAssembly runtime since the introduction of WASM into service meshes. A  Lua runtime can be as little as 4 kb, with LuaJIT being surprisingly fast, having a runtime of only ~200 kb.&lt;/p&gt;&lt;p&gt;The WebAssembly loader, not the runtime, is the source of complexity for the host software. When comparing the two, how do you weigh GCC or LLVM in terms of making optimized C or C++ faster or slower than LuaJIT?&lt;/p&gt;&lt;p&gt;The complexity of a WebAssembly runtime stems from the fact that it contains arch-specific optimizers as well as an Intermediate Representation to machine code translation stage that would usually be executed inside GCC or LLVM. Machine code can be created once and then cached on non-volatile storage until the input WASM file&amp;#x27;s hash changes (like the extracted contents of a Zip file). Since WASM has a similar approach to sandboxing (making the language/bytecode unable to describe accessing resources outside of what is granted), the result is lighter than Lua once the machine code is generated. However, WASM&amp;#x27;s compiled machine code does not require a garbage collector or JIT engine.&lt;/p&gt;&lt;p&gt;WebAssembly follows the same flat, garbage-collected memory model as malloc and free. Suppose you want a garbage collector in a WebAssembly application. In that case, you can either compile it to WebAssembly and run it inside the sandbox or wait for extensions currently developing, such as &amp;quot;opaque reference types,&amp;quot; which allows WebAssembly applications to interact with objects managed by a Garbage Collector outside the sandbox.&lt;/p&gt;&lt;h3&gt;NGINX and Lua&lt;/h3&gt;&lt;p&gt;NGINX allows you to write dynamic modules that can be loaded at runtime based on configuration files. By modifying the configuration files and reloading NGINX, these modules can be unloaded. NGINX enables you to use Lua to embed custom logic into dynamic modules.&lt;/p&gt;&lt;p&gt;Lua is a lightweight, embeddable scripting language that supports procedural, functional, and object-oriented programming. Lua is dynamically typed, and runs by interpreting bytecode with a register-based virtual machine.&lt;/p&gt;&lt;p&gt;NGINX provides the ability to integrate dynamic Lua scripts using the ngx_lua module. Using NGINX with ngx_lua helps you offload logic from your services and hand their concerns off to an intelligent data plane. Leveraging NGINX&amp;#x27;s subrequests, the ngx_lua module allows the integration of Lua threads (or coroutines into the NGINX event model. Instead of passing logic to an upstream server, the Lua script can inspect and process service traffic. ngx_lua modules can be chained to be invoked at different phases of NGINX request processing.&lt;/p&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Value of a Service Mesh]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Value of a Service Mesh",
  "thumbnail": "./service-mesh.svg",
  "date": "2021-10-20 10:30:05 -0530",
  "category": "Service Mesh",
  "type": "Article",
  "tags": ["Service mesh"],
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", {
    className: "intro"
  }, mdx("p", null, "Learn more about service mesh fundamentals in ", mdx(Link, {
    className: "blog",
    to: "/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition",
    mdxType: "Link"
  }, "The Enterprise Path to Service Mesh Archictures (2nd Edition)"), " -  free book and excellent resource which addresses how to evaluate your organization\u2019s readiness, provides factors to consider when building new applications and converting existing applications to best take advantage of a service mesh, and offers insight on deployment architectures used to get you there.")), mdx("p", null, "Service meshes provide visibility, resiliency, traffic, and security control of distributed application services."), mdx("h3", null, "Observability"), mdx("p", null, "Many organisations are attracted to the uniform observability that service meshes provide. There is no such thing as a fully healthy complex system. Service-level\xA0 t elemetry\xA0sheds light on difficult-to-answer questions like why your requests are slow\xA0to respond. It's quite simple to figure out when a service is down, but figuring out where it's slow and why is a different story."), mdx("p", null, "Service meshes allow both black-box (observing a system from the outside) and white-box (monitoring a system from the inside)\xA0monitoring of service-to-service communication. To provide white-box monitoring, some service meshes combine with a distributed tracing library. In contrast, other service meshes\xA0use protocol-specific filters as a capability of their proxies to provide a deeper level of visibility. The components of the data plane are well-positioned (transparently, in-band) to create metrics, logs, and traces, ensuring uniform and thorough observability across the mesh."), mdx("div", {
    className: "center"
  }, mdx("img", {
    src: Mixer,
    align: "right",
    alt: "Istio Mixer"
  }), mdx("p", null, "Figure 1: Istio\u2019s Mixer is capable of collecting multiple telemetric signals and sending those signals to backend monitoring, authentication, and quota systems via adapters")), mdx("p", null, "Service meshes centralize and assist in solving these observability challenges by providing the following:"), mdx("div", {
    className: "right"
  }, mdx("img", {
    src: Metrics,
    align: "right",
    alt: "Request Metrics"
  }), mdx("p", null, "Figure 2: Request metrics generated by Istio and visible in Meshery")), mdx("ul", null, mdx("li", null, mdx("strong", null, "Logging"), mdx("p", null, "Logs are used to baseline visibility for access requests to your entire fleet of services. Figure 1 illustrates how telemetry transmitted through service mesh logs include source and destination, request protocol, endpoint (URL), response time, size, and associated response code.")), mdx("li", null, mdx("strong", null, "Metrics"), mdx("p", null, "Metrics are used to eliminate the need for the development process to instrument code in order to emit metrics. When metrics are ubiquitous\xA0across your cluster, additional insights become available. Consistent metrics allow for things like autoscaling to be automated. Telemetry emitted by service mesh metrics include global request volume, global success rate, individual service responses by version, source and time.")), mdx("li", null, mdx("strong", null, "Tracing"), mdx("p", null, "Slow services (as opposed to services that simply fail) are the most difficult to debug without tracing. Imagine manually enumerating and tracking all of your service dependencies in a spreadsheet. Dependencies, request volumes, and failure rates are visualised using traces. Service meshes enable incorporating tracing functionality extremely simple with the help of\xA0automatically generated span identifiers. The mesh's individual services still must forward context headers.\xA0 Many application performance management (APM) solutions, on the other hand, need manual instrumentation to extract traces from your services."))), mdx("h3", null, "Traffic control"), mdx("p", null, "Service meshes provide for granular, declarative control over network traffic, such as determining where a request should be routed to perform\xA0canary release. Circuit breaking, latency-aware load balancing, eventually consistent service discovery, timeouts, deadlines, and retries are all common resiliency features."), mdx("p", null, "When a request does not return to the client within a certain amount of predefined\xA0time, a  ", mdx("strong", null, "timeout"), " is used to terminate it. They provide a time restriction on how much time can be spent on an individual\xA0request and are enforced at a point after which a response is considered invalid. ", mdx("strong", null, "Deadlines"), " are an advanced service mesh feature that helps minimise retry storms by facilitating feature-level timeouts rather than independent service timeouts. As a request travels through the mesh, deadlines deduct time remaining to handle it at each stage, propagating elapsed time with each downstream service call.\xA0 Timeouts and deadlines\xA0might be considered enforcers of your Service-Level Objectives (SLOs)."), mdx("p", null, "You can choose to retry a request if a service\xA0times out or is unsuccessfully returned. Retrying the same call to a service that is already under water (retry three times = 300 percent additional service load) can make things worse. Retry budgets (aka\xA0maximum retries) offer the benefit of multiple tries but come with a limit to avoid overloading an already a load-challenged\xA0service. Some service meshes go even further to reduce client contention by using jitter and an exponential back-off algorithm to calculate the timing of the\xA0next retry attempt."), mdx("div", {
    className: "left"
  }, mdx("img", {
    src: Timeouts,
    align: "right",
    alt: "Deadlines"
  }), mdx("p", null, "Figure 3:Deadlines, not ubiquitously supported by different service meshes, set feature-level timeouts")), mdx("p", null, "You can choose to fail fast and disconnect the service, prohibiting calls to it, rather than retrying and putting more load to the service. ", mdx("strong", null, "Circuit breaking"), " allows users to set\xA0configurable\xA0timeouts (or failure thresholds) to assure safe maximums and graceful failure, which is common for slow-responding services. When applications (services) are oversubscribed, using a service mesh as a distinct layer to implement circuit breaking minimises undue overhead."), mdx("p", null, mdx("strong", null, "Rate limiting"), "(throttling) is implemented to\xA0ensure service stability. When requests by\xA0one client\xA0surge, the service continues to function smoothly for others. The rate limits are calculated over a period of time. You can also utilise various algorithms, such as a fixed or sliding window, a sliding log, etc. The purpose of rate limits is to ensure that your services are not oversubscribed."), mdx("p", null, "When a limit is reached, well-implemented services commonly adhere to IETF RFC 6585, sending 429 Too Many Requests as the response code, including headers, such as the following, describing the request limit, number of requests remaining, and amount of time remaining until the request counter is reset:"), mdx("div", {
    className: "fact-left"
  }, mdx("p", null, "X-RateLimit-Limit: 60"), mdx("p", null, "X-RateLimit-Remaining: 0"), mdx("p", null, "X-RateLimit-Reset: 1372016266")), mdx("p", null, mdx("strong", null, "Quota management"), " (or conditional rate-limiting) accounts for requests based on business requirements instead of limiting rates based on operational concerns. It can be difficult to tell the difference between rate limiting and quota management because both features are handled by the same service mesh capability but are exposed to users in different ways."), mdx("p", null, "Configuring a policy setting a threshold for the number of client requests allowed to a service over time is the canonical example of quota management. User Lee, for example, is on the Free service plan and is allowed upto\xA010 requests per day. Quota policy imposes consumption limitations on services by keeping track of incoming requests in a distributed counter,often using\xA0an in-memory datastore like Redis\xA0 Conditional rate limits are a powerful service mesh capability when applied based on a user-defined set of arbitrary attributes."), mdx("h3", null, "Security"), mdx("div", {
    className: "right"
  }, mdx("img", {
    src: Communication,
    align: "right",
    alt: "Communication Paths"
  }), mdx("p", null, "Figure 4: An example of service mesh architecture. Secure communication paths in Istio")), mdx("p", null, "For securing service-to-service communication, most service meshes include a certificate authority that manages keys and certificates. Certificates are generated for each service and serve as the service's unique identifier. When sidecar proxies are employed, they assume the identity of the service and perform lifecycle management\xA0of certificates (creation, distribution, refresh, and revocation) on its behalf.\xA0\xA0 Local TCP connections are often established between the service and the sidecar proxy, whereas mutual Transport Layer Security (mTLS) connections are typically established between proxies in sidecar proxy deployments."), mdx("p", null, "Internal traffic within your application should be encrypted as a matter of security. The service calls in your application are no longer contained within a single monolith via localhost; they are now exposed over the network. Allowing service calls without TLS on the transport is a recipe for disaster in terms of security. When two mesh-enabled services communicate, they have strong cryptographic proof of their peers.\xA0\xA0 After identities have been established, they are used to create access control policies that determine whether or not a request should be serviced. Policy controls configuration of the key management system (e.g., certificate refresh interval) and operational access control are used to determine whether a request is accepted, based on service mesh employed. Approved and unapproved connection requests, as well as more granular access control parameters like time of day, are identified using white and blacklists."), mdx("h3", null, "Delay and fault injection"), mdx("p", null, "It's important to accept that your networks and/or systems will fail. Why not introduce failure and verify behaviour ahead of time? As proxies sit in line to service\xA0traffic, they frequently support protocol-specific fault injection, which allows you to configure\xA0the percentage of requests that should be subjected to faults or network delays. For example, generating HTTP 500 errors might be used to test the robustness of your distributed application's response behaviour."), mdx("p", null, "Injecting latency into requests without a service mesh is a time-consuming procedure, but it is probably a more prevalent problem encountered during\xA0 operation of an\xA0application. Users are far more irritated by slow replies that result in an HTTP 503 after a minute of waiting than by a 503 after a few seconds. The finest element of these resilience testing capabilities\xA0is that no application code needs to be changed to make these tests possible. The results of the tests, on the other hand, may prompt you to make changes to the application code."), mdx("p", null, "Using a service mesh, developers spend far less time creating code to cope with infrastructure issues\u2014code\xA0that could be commoditized by service meshes in the future. The separation of service and session-layer concerns from application code is manifested as a phenomenon I refer to as decoupling at Layer 5."), mdx("p", null, "A service mesh can be regarded of as surfacing the OSI model's session layer as a separately addressable, first-class citizen in your modern architecture. They are a secret weapon of cloud native systems, waiting to be exploited as a highly configurable work horse.")));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/service-mesh/value-of-a-service-mesh</link><guid isPermaLink="false">https://layer5.io/resources/service-mesh/value-of-a-service-mesh</guid><pubDate>Wed, 20 Oct 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/cb310234b6631abcabb632a85974a3dd/service-mesh.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;div class=&quot;intro&quot;&gt;&lt;p&gt;Learn more about service mesh fundamentals in &lt;a class=&quot;blog&quot; href=&quot;/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition&quot;&gt;The Enterprise Path to Service Mesh Archictures (2nd Edition)&lt;/a&gt; -  free book and excellent resource which addresses how to evaluate your organization’s readiness, provides factors to consider when building new applications and converting existing applications to best take advantage of a service mesh, and offers insight on deployment architectures used to get you there.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Service meshes provide visibility, resiliency, traffic, and security control of distributed application services.&lt;/p&gt;&lt;h3&gt;Observability&lt;/h3&gt;&lt;p&gt;Many organisations are attracted to the uniform observability that service meshes provide. There is no such thing as a fully healthy complex system. Service-level  t elemetry sheds light on difficult-to-answer questions like why your requests are slow to respond. It&amp;#x27;s quite simple to figure out when a service is down, but figuring out where it&amp;#x27;s slow and why is a different story.&lt;/p&gt;&lt;p&gt;Service meshes allow both black-box (observing a system from the outside) and white-box (monitoring a system from the inside) monitoring of service-to-service communication. To provide white-box monitoring, some service meshes combine with a distributed tracing library. In contrast, other service meshes use protocol-specific filters as a capability of their proxies to provide a deeper level of visibility. The components of the data plane are well-positioned (transparently, in-band) to create metrics, logs, and traces, ensuring uniform and thorough observability across the mesh.&lt;/p&gt;&lt;div class=&quot;center&quot;&gt;&lt;img src=&quot;static/figure1-dcc279844f5e980cd2e4eea5f8388b1a.png&quot; align=&quot;right&quot; alt=&quot;Istio Mixer&quot;/&gt;&lt;p&gt;Figure 1: Istio’s Mixer is capable of collecting multiple telemetric signals and sending those signals to backend monitoring, authentication, and quota systems via adapters&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Service meshes centralize and assist in solving these observability challenges by providing the following:&lt;/p&gt;&lt;div class=&quot;right&quot;&gt;&lt;img src=&quot;static/figure2-390054d17df7bf42260a8df2f09c78f4.png&quot; align=&quot;right&quot; alt=&quot;Request Metrics&quot;/&gt;&lt;p&gt;Figure 2: Request metrics generated by Istio and visible in Meshery&lt;/p&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Logging&lt;/strong&gt;&lt;p&gt;Logs are used to baseline visibility for access requests to your entire fleet of services. Figure 1 illustrates how telemetry transmitted through service mesh logs include source and destination, request protocol, endpoint (URL), response time, size, and associated response code.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Metrics&lt;/strong&gt;&lt;p&gt;Metrics are used to eliminate the need for the development process to instrument code in order to emit metrics. When metrics are ubiquitous across your cluster, additional insights become available. Consistent metrics allow for things like autoscaling to be automated. Telemetry emitted by service mesh metrics include global request volume, global success rate, individual service responses by version, source and time.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Tracing&lt;/strong&gt;&lt;p&gt;Slow services (as opposed to services that simply fail) are the most difficult to debug without tracing. Imagine manually enumerating and tracking all of your service dependencies in a spreadsheet. Dependencies, request volumes, and failure rates are visualised using traces. Service meshes enable incorporating tracing functionality extremely simple with the help of automatically generated span identifiers. The mesh&amp;#x27;s individual services still must forward context headers.  Many application performance management (APM) solutions, on the other hand, need manual instrumentation to extract traces from your services.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Traffic control&lt;/h3&gt;&lt;p&gt;Service meshes provide for granular, declarative control over network traffic, such as determining where a request should be routed to perform canary release. Circuit breaking, latency-aware load balancing, eventually consistent service discovery, timeouts, deadlines, and retries are all common resiliency features.&lt;/p&gt;&lt;p&gt;When a request does not return to the client within a certain amount of predefined time, a  &lt;strong&gt;timeout&lt;/strong&gt; is used to terminate it. They provide a time restriction on how much time can be spent on an individual request and are enforced at a point after which a response is considered invalid. &lt;strong&gt;Deadlines&lt;/strong&gt; are an advanced service mesh feature that helps minimise retry storms by facilitating feature-level timeouts rather than independent service timeouts. As a request travels through the mesh, deadlines deduct time remaining to handle it at each stage, propagating elapsed time with each downstream service call.  Timeouts and deadlines might be considered enforcers of your Service-Level Objectives (SLOs).&lt;/p&gt;&lt;p&gt;You can choose to retry a request if a service times out or is unsuccessfully returned. Retrying the same call to a service that is already under water (retry three times = 300 percent additional service load) can make things worse. Retry budgets (aka maximum retries) offer the benefit of multiple tries but come with a limit to avoid overloading an already a load-challenged service. Some service meshes go even further to reduce client contention by using jitter and an exponential back-off algorithm to calculate the timing of the next retry attempt.&lt;/p&gt;&lt;div class=&quot;left&quot;&gt;&lt;img src=&quot;static/figure3-d1eb6e4c19a25c29b8e465646eaa644b.png&quot; align=&quot;right&quot; alt=&quot;Deadlines&quot;/&gt;&lt;p&gt;Figure 3:Deadlines, not ubiquitously supported by different service meshes, set feature-level timeouts&lt;/p&gt;&lt;/div&gt;&lt;p&gt;You can choose to fail fast and disconnect the service, prohibiting calls to it, rather than retrying and putting more load to the service. &lt;strong&gt;Circuit breaking&lt;/strong&gt; allows users to set configurable timeouts (or failure thresholds) to assure safe maximums and graceful failure, which is common for slow-responding services. When applications (services) are oversubscribed, using a service mesh as a distinct layer to implement circuit breaking minimises undue overhead.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Rate limiting&lt;/strong&gt;(throttling) is implemented to ensure service stability. When requests by one client surge, the service continues to function smoothly for others. The rate limits are calculated over a period of time. You can also utilise various algorithms, such as a fixed or sliding window, a sliding log, etc. The purpose of rate limits is to ensure that your services are not oversubscribed.&lt;/p&gt;&lt;p&gt;When a limit is reached, well-implemented services commonly adhere to IETF RFC 6585, sending 429 Too Many Requests as the response code, including headers, such as the following, describing the request limit, number of requests remaining, and amount of time remaining until the request counter is reset:&lt;/p&gt;&lt;div class=&quot;fact-left&quot;&gt;&lt;p&gt;X-RateLimit-Limit: 60&lt;/p&gt;&lt;p&gt;X-RateLimit-Remaining: 0&lt;/p&gt;&lt;p&gt;X-RateLimit-Reset: 1372016266&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Quota management&lt;/strong&gt; (or conditional rate-limiting) accounts for requests based on business requirements instead of limiting rates based on operational concerns. It can be difficult to tell the difference between rate limiting and quota management because both features are handled by the same service mesh capability but are exposed to users in different ways.&lt;/p&gt;&lt;p&gt;Configuring a policy setting a threshold for the number of client requests allowed to a service over time is the canonical example of quota management. User Lee, for example, is on the Free service plan and is allowed upto 10 requests per day. Quota policy imposes consumption limitations on services by keeping track of incoming requests in a distributed counter,often using an in-memory datastore like Redis  Conditional rate limits are a powerful service mesh capability when applied based on a user-defined set of arbitrary attributes.&lt;/p&gt;&lt;h3&gt;Security&lt;/h3&gt;&lt;div class=&quot;right&quot;&gt;&lt;img src=&quot;static/figure4-42e3faa6d38a8c21b7584ee807ee0dec.png&quot; align=&quot;right&quot; alt=&quot;Communication Paths&quot;/&gt;&lt;p&gt;Figure 4: An example of service mesh architecture. Secure communication paths in Istio&lt;/p&gt;&lt;/div&gt;&lt;p&gt;For securing service-to-service communication, most service meshes include a certificate authority that manages keys and certificates. Certificates are generated for each service and serve as the service&amp;#x27;s unique identifier. When sidecar proxies are employed, they assume the identity of the service and perform lifecycle management of certificates (creation, distribution, refresh, and revocation) on its behalf.   Local TCP connections are often established between the service and the sidecar proxy, whereas mutual Transport Layer Security (mTLS) connections are typically established between proxies in sidecar proxy deployments.&lt;/p&gt;&lt;p&gt;Internal traffic within your application should be encrypted as a matter of security. The service calls in your application are no longer contained within a single monolith via localhost; they are now exposed over the network. Allowing service calls without TLS on the transport is a recipe for disaster in terms of security. When two mesh-enabled services communicate, they have strong cryptographic proof of their peers.   After identities have been established, they are used to create access control policies that determine whether or not a request should be serviced. Policy controls configuration of the key management system (e.g., certificate refresh interval) and operational access control are used to determine whether a request is accepted, based on service mesh employed. Approved and unapproved connection requests, as well as more granular access control parameters like time of day, are identified using white and blacklists.&lt;/p&gt;&lt;h3&gt;Delay and fault injection&lt;/h3&gt;&lt;p&gt;It&amp;#x27;s important to accept that your networks and/or systems will fail. Why not introduce failure and verify behaviour ahead of time? As proxies sit in line to service traffic, they frequently support protocol-specific fault injection, which allows you to configure the percentage of requests that should be subjected to faults or network delays. For example, generating HTTP 500 errors might be used to test the robustness of your distributed application&amp;#x27;s response behaviour.&lt;/p&gt;&lt;p&gt;Injecting latency into requests without a service mesh is a time-consuming procedure, but it is probably a more prevalent problem encountered during  operation of an application. Users are far more irritated by slow replies that result in an HTTP 503 after a minute of waiting than by a 503 after a few seconds. The finest element of these resilience testing capabilities is that no application code needs to be changed to make these tests possible. The results of the tests, on the other hand, may prompt you to make changes to the application code.&lt;/p&gt;&lt;p&gt;Using a service mesh, developers spend far less time creating code to cope with infrastructure issues—code that could be commoditized by service meshes in the future. The separation of service and session-layer concerns from application code is manifested as a phenomenon I refer to as decoupling at Layer 5.&lt;/p&gt;&lt;p&gt;A service mesh can be regarded of as surfacing the OSI model&amp;#x27;s session layer as a separately addressable, first-class citizen in your modern architecture. They are a secret weapon of cloud native systems, waiting to be exploited as a highly configurable work horse.&lt;/p&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Swappable Sidecars]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Swappable Sidecars",
  "thumbnail": "./figure1.png",
  "category": "Service Mesh",
  "date": "2021-10-17 10:30:05 -0530",
  "type": "Article",
  "tags": ["Service Mesh"],
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", {
    className: "intro"
  }, mdx("p", null, "Learn more about WebAssembly's use within service mesh data planes in ", mdx(Link, {
    className: "blog",
    to: "/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition",
    mdxType: "Link"
  }, "The Enterprise Path to Service Mesh Archictures (2nd Edition)"), " -  free book and excellent resource for anyone looking to understand WASM filters, Lua scripts, and other options available for extending the data plane.")), mdx("p", null, "One of the most significant\xA0considerations to make when establishing a service mesh is the proxy's functionality. From the standpoint of a developer, a proxy's cloud native integrations (e.g., with OpenTelemetry / OpenTracing, Prometheus, and so on) are extremely important. Surprisingly, a developer may be uninterested in the APIs of a proxy. The control plane for the service mesh is the point of control for managing proxy settings. A developer, however, will be interested in the APIs of a management plane. Protocol support is at the top of the developers' wish list for proxies. Protocol considerations can be divided into two categories:"), mdx("ul", null, mdx("li", null, "TCP, UDP, HTTP: Network team-centric consideration in which efficiency, performance, offload, and load balancing algorithm support are evaluated. Support for HTTP2 often takes top billing."), mdx("li", null, "gRPC, NATS, Kafka: A developer-centric consideration in which the top item on the list is application-level protocols, specifically those commonly used in modern distributed application designs.")), mdx("p", null, "The reality is that selecting the perfect proxy involves more than protocol support. Your proxy should meet all key criteria:"), mdx("ul", null, mdx("li", null, "High performance and low latency"), mdx("li", null, "High scalability and small memory footprint"), mdx("li", null, "Deep observability at all layers of the network stack"), mdx("li", null, "Programmatic configuration and ecosystem integration"), mdx("li", null, "Thorough documentation to facilitate an understanding of expected proxy behavior")), mdx("p", null, "Envoy is used as a service proxy by a variety of service meshes. Within Istio, Envoy is the default service proxy. Using Envoy\u2019s APIs, various projects have demonstrated the ability to displace Envoy as the default service proxy with the choice of an alternative."), mdx("div", {
    className: "intro"
  }, mdx("h3", {
    align: "center"
  }, "Standardizing Data Plane APIs"), mdx("p", null, "The xDS APIs are a collection of Envoy's APIs. The Universal Data Plane API (UDPA) working group attempts to create a set of APIs that will serve as the de facto standard for L4/L7 data plane configuration (similar to OpenFlow's role in SDN at L2/L3/L4). The Envoy xDS APIs are being evolved to address service discovery, load balancing assignments, routing discovery, listener configuration, secret discovery, load reporting, health check delegation, and more, in combination with a well-defined, stable API versioning policy.")), mdx("p", null, "In early versions of Istio, Linkerd exhibited an integration in which Istio was the control plane, supplying configuration to Linkerd proxies.\xA0 NGINX also hosted a project called nginMesh, in which Istio served as the control plane and NGINX proxies operated as the data plane."), mdx("p", null, "With many service proxies in the ecosystem, outside of Envoy, only two have currently demonstrated integration with Istio . Linkerd is not yet intended to be a general-purpose proxy; instead, it is focused on being lightweight, placing extensibility as a secondary concern by offering extensions via gRPC plug-in.\xA0 Consul makes use of Envoy as a proxy. Why would you want to use another\xA0service proxy?"), mdx("strong", null, "NGINX"), mdx("p", null, "While you won't be able to use NGINX as a proxy to replace Envoy, you could wish to employ NGINX based on your operational expertise, the necessity for a battle-tested proxy, or the integration of an F5 load balancer. You might also be looking for caching, a web application firewall (WAF), or other features in NGINX Plus. The service proxy used in the NGINX Service Mesh data plane is an enhanced version of NGINX Plus that interfaces natively with Kubernetes."), mdx("strong", null, "CPX"), mdx("p", null, "If you already have Citrix Application Delivery Controllers and want to use them across your diverse infrastructure, you might choose to use the Citrix Service Mesh (which is an Istio control plane with a CPX data plane).With infrastructure diversity, holistic control, and monitoring for operational consistency across all your workloads (new microservices and existing monoliths)."), mdx("strong", null, "MOSN"), mdx("p", null, "MOSN can deploy as an Istio data plane. You might choose to deploy MOSN if you need to highly customize your service proxy and are a Golang shop. MOSN supports a multi-protocol framework, and you access private protocols with a unified routing framework. It has a multi-process plug-in mechanism, which can easily extend the plug-ins of independent MOSN processes through the plug-in framework, and do some other management, bypass and other functional module extensions."), mdx("div", {
    className: "fact"
  }, "You might find this article on ", mdx("a", {
    href: "https://www.oreilly.com/content/how-to-customize-an-istio-service-mesh/"
  }, "How to customize an Istio service mesh and its adjoining webcast"), " helpful in further understanding Istio\u2019s extensibility with respect to swappable service proxies."), mdx("p", null, "Without configuration, proxies are without instructions to perform their tasks. Pilot is the head of the ship in an Istio mesh, keeping synchronized with the underlying platform by tracking and representing its services to istio-proxy. istio-proxy contains the proxy of choice (e.g. Envoy). Typically, the same istio-proxy Docker image is used by Istio sidecar and Istio ingress gateway, which contains not only the service proxy but also the Istio Pilot agent.  At regular intervals, the Istio Pilot agent pulls configuration from Pilot to the service proxy, so that each proxy knows where to route traffic."), mdx("div", {
    className: "center"
  }, mdx("img", {
    src: Swappingproxy,
    align: "center",
    alt: "Swapping Proxy"
  }), mdx("p", null, "Figure 1: Example of swapping proxies\u2014Istio + nginMesh."))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/service-mesh/swappable-sidecars</link><guid isPermaLink="false">https://layer5.io/resources/service-mesh/swappable-sidecars</guid><pubDate>Sun, 17 Oct 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/cfb74577108949bc2ca373257e95e16c/figure1.png" length="0" type="image/png"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;div class=&quot;intro&quot;&gt;&lt;p&gt;Learn more about WebAssembly&amp;#x27;s use within service mesh data planes in &lt;a class=&quot;blog&quot; href=&quot;/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition&quot;&gt;The Enterprise Path to Service Mesh Archictures (2nd Edition)&lt;/a&gt; -  free book and excellent resource for anyone looking to understand WASM filters, Lua scripts, and other options available for extending the data plane.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;One of the most significant considerations to make when establishing a service mesh is the proxy&amp;#x27;s functionality. From the standpoint of a developer, a proxy&amp;#x27;s cloud native integrations (e.g., with OpenTelemetry / OpenTracing, Prometheus, and so on) are extremely important. Surprisingly, a developer may be uninterested in the APIs of a proxy. The control plane for the service mesh is the point of control for managing proxy settings. A developer, however, will be interested in the APIs of a management plane. Protocol support is at the top of the developers&amp;#x27; wish list for proxies. Protocol considerations can be divided into two categories:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;TCP, UDP, HTTP: Network team-centric consideration in which efficiency, performance, offload, and load balancing algorithm support are evaluated. Support for HTTP2 often takes top billing.&lt;/li&gt;&lt;li&gt;gRPC, NATS, Kafka: A developer-centric consideration in which the top item on the list is application-level protocols, specifically those commonly used in modern distributed application designs.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The reality is that selecting the perfect proxy involves more than protocol support. Your proxy should meet all key criteria:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;High performance and low latency&lt;/li&gt;&lt;li&gt;High scalability and small memory footprint&lt;/li&gt;&lt;li&gt;Deep observability at all layers of the network stack&lt;/li&gt;&lt;li&gt;Programmatic configuration and ecosystem integration&lt;/li&gt;&lt;li&gt;Thorough documentation to facilitate an understanding of expected proxy behavior&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Envoy is used as a service proxy by a variety of service meshes. Within Istio, Envoy is the default service proxy. Using Envoy’s APIs, various projects have demonstrated the ability to displace Envoy as the default service proxy with the choice of an alternative.&lt;/p&gt;&lt;div class=&quot;intro&quot;&gt;&lt;h3 align=&quot;center&quot;&gt;Standardizing Data Plane APIs&lt;/h3&gt;&lt;p&gt;The xDS APIs are a collection of Envoy&amp;#x27;s APIs. The Universal Data Plane API (UDPA) working group attempts to create a set of APIs that will serve as the de facto standard for L4/L7 data plane configuration (similar to OpenFlow&amp;#x27;s role in SDN at L2/L3/L4). The Envoy xDS APIs are being evolved to address service discovery, load balancing assignments, routing discovery, listener configuration, secret discovery, load reporting, health check delegation, and more, in combination with a well-defined, stable API versioning policy.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;In early versions of Istio, Linkerd exhibited an integration in which Istio was the control plane, supplying configuration to Linkerd proxies.  NGINX also hosted a project called nginMesh, in which Istio served as the control plane and NGINX proxies operated as the data plane.&lt;/p&gt;&lt;p&gt;With many service proxies in the ecosystem, outside of Envoy, only two have currently demonstrated integration with Istio . Linkerd is not yet intended to be a general-purpose proxy; instead, it is focused on being lightweight, placing extensibility as a secondary concern by offering extensions via gRPC plug-in.  Consul makes use of Envoy as a proxy. Why would you want to use another service proxy?&lt;/p&gt;&lt;strong&gt;NGINX&lt;/strong&gt;&lt;p&gt;While you won&amp;#x27;t be able to use NGINX as a proxy to replace Envoy, you could wish to employ NGINX based on your operational expertise, the necessity for a battle-tested proxy, or the integration of an F5 load balancer. You might also be looking for caching, a web application firewall (WAF), or other features in NGINX Plus. The service proxy used in the NGINX Service Mesh data plane is an enhanced version of NGINX Plus that interfaces natively with Kubernetes.&lt;/p&gt;&lt;strong&gt;CPX&lt;/strong&gt;&lt;p&gt;If you already have Citrix Application Delivery Controllers and want to use them across your diverse infrastructure, you might choose to use the Citrix Service Mesh (which is an Istio control plane with a CPX data plane).With infrastructure diversity, holistic control, and monitoring for operational consistency across all your workloads (new microservices and existing monoliths).&lt;/p&gt;&lt;strong&gt;MOSN&lt;/strong&gt;&lt;p&gt;MOSN can deploy as an Istio data plane. You might choose to deploy MOSN if you need to highly customize your service proxy and are a Golang shop. MOSN supports a multi-protocol framework, and you access private protocols with a unified routing framework. It has a multi-process plug-in mechanism, which can easily extend the plug-ins of independent MOSN processes through the plug-in framework, and do some other management, bypass and other functional module extensions.&lt;/p&gt;&lt;div class=&quot;fact&quot;&gt;You might find this article on &lt;a href=&quot;https://www.oreilly.com/content/how-to-customize-an-istio-service-mesh/&quot;&gt;How to customize an Istio service mesh and its adjoining webcast&lt;/a&gt; helpful in further understanding Istio’s extensibility with respect to swappable service proxies.&lt;/div&gt;&lt;p&gt;Without configuration, proxies are without instructions to perform their tasks. Pilot is the head of the ship in an Istio mesh, keeping synchronized with the underlying platform by tracking and representing its services to istio-proxy. istio-proxy contains the proxy of choice (e.g. Envoy). Typically, the same istio-proxy Docker image is used by Istio sidecar and Istio ingress gateway, which contains not only the service proxy but also the Istio Pilot agent.  At regular intervals, the Istio Pilot agent pulls configuration from Pilot to the service proxy, so that each proxy knows where to route traffic.&lt;/p&gt;&lt;div class=&quot;center&quot;&gt;&lt;img src=&quot;static/figure1-4af4feafa8c502823390ae35112b891f.png&quot; align=&quot;center&quot; alt=&quot;Swapping Proxy&quot;/&gt;&lt;p&gt;Figure 1: Example of swapping proxies—Istio + nginMesh.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Service Mesh Fundamentals]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Service Mesh Fundamentals",
  "thumbnail": "../../service-mesh.svg",
  "date": "2021-10-05 10:30:05 -0530",
  "category": "Service Mesh",
  "type": "Article",
  "tags": ["Service mesh"],
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", {
    className: "intro"
  }, mdx("p", null, "Learn more about service mesh fundamentals in ", mdx(Link, {
    className: "blog",
    to: "/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition",
    mdxType: "Link"
  }, "The Enterprise Path to Service Mesh Archictures (2nd Edition)"), " -  free book and excellent resource which addresses how to evaluate your organization\u2019s readiness, provides factors to consider when building new applications and converting existing applications to best take advantage of a service mesh, and offers insight on deployment architectures used to get you there.")), mdx("p", null, "Many emerging technologies are based on or reincarnated from prior thinking and approaches to computing and networking paradigms. Why is this phenomenon required? We'll look to the microservices and containers movement for service meshes, a cloud-native approach to design scalable, independently supplied services. What was previously internal application communications have become a mesh of service-to-service remote procedure calls (RPCs) transported via networks thanks to microservices. Microservices democratize language and technology choice across independent service teams that generate new features quickly as they iteratively and continuously provide software(typically as a service). The most crucial driver of microservices as an architectural model is the decoupling of engineering teams and their enhanced speed."), mdx("h3", null, "Operating Many Services"), mdx("p", null, "The initial couple of microservices are relatively simple to deliver and operate\u2014at least in comparison to organizations' challenges when they first use many microservices. Whether that \"many\" is three or one hundred, a major technological issue will inevitably arise. To relieve microservices headaches, several remedies are prescribed; one notable example is the use of client libraries. In microservices environments, language and framework-specific client libraries, whether pre-existing or generated, are utilized to address distributed systems challenges. Many teams first explore their path to a service mesh in these situations. The sheer volume of services that must be managed on an individual, distributed basis (rather than centrally as with monoliths) and the challenges of ensuring their reliability, observability, and security cannot be met with outmoded paradigms, necessitating the need to reincarnate prior thinking and approaches. It is necessary to adapt new tools and techniques."), mdx("p", null, "Since microservices are distributed (often ephemeral) by nature, and the network is critical to their functioning, we should consider the fallacy that networks are reliable, have no latency, have infinite bandwidth, and that communication is guaranteed. When you consider how important it is to be able to control and secure service communication in distributed systems that rely on network calls with every transaction, every time an application is invoked, you can see why you are under tooled and why running more than a few microservices on a network topology that is in constant flux is so difficult. In the age of microservices, a new layer of tooling for the caretaking of services is needed\u2014a service mesh is needed."), mdx("h3", null, "What Is a Service Mesh?"), mdx("p", null, "Service meshes provide intent-based networking for microservices describing desired behavior of the network in the face of constantly changing conditions and network topology. At their core, service meshes provide:"), mdx("ul", null, mdx("li", null, "A services-first network;"), mdx("li", null, "A developer-driven network;"), mdx("li", null, "A network that is primarily concerned with alleviating application developers from building infrastructure concerns into their application code; "), mdx("li", null, "A network that empowers operators with the ability to declaratively define network behavior, node identity, and traffic flow through policy; "), mdx("li", null, "A network that enables service owners to control application logic without engaging developers to change its code.")), mdx("p", null, "Value derived from the layer of tooling that service meshes provide is most evident in the land of microservices. The more services, the more value derived from the mesh. In subsequent chapters, I show how service meshes provide value outside of the use of microservices and containers and help modernize existing services (running on virtual or bare metal servers) as well."), mdx("p", null, "Many of you will find yourself working in organizations that have more than one sort of service mesh. Diversity is driven by a broad set of workload requirements varying from process-based to event-driven in their design, from those running on bare metal to executing in functions and those representing every style of deployment artifact in-between. The scope of service mesh capability required by different organizations varies. As a result, different service meshes are created with slightly different use cases in mind, resulting in differences in service mesh architecture and deployment models. Service meshes, which are driven by Cloud, Hybrid, On-Prem, and Edge, can enable each of these. With the requirements of different edge devices and their functions, along with ephemeral cloud-based workloads, microservice patterns and technologies give a plethora of opportunities for service mesh differentiation and specialization. Cloud vendors produce and collaborate as they provide service mesh as a managed service on their platforms."), mdx("div", {
    className: "center"
  }, mdx("img", {
    src: Differences,
    align: "center",
    alt: "comparative spectrum"
  }), mdx("p", null, "Figure 1: A comparative spectrum of the difference between some of the service meshes based on their individual strengths.")), mdx("p", null, "The demand for service meshes, including meshes native to specific cloud platforms, is growing in tandem with the number of microservices. As a result, many enterprises now use various service mesh products, either separately or together."), mdx("h3", null, "Service Mesh Abstractions"), mdx("p", null, "Because there are any number of service meshes available, independent specifications have cropped up to provide abstraction and standardization across them. Three service mesh abstractions exist today:"), mdx("ul", null, mdx("li", null, mdx(Link, {
    to: "/projects/service-mesh-performance",
    mdxType: "Link"
  }, "Service Mesh Performance"), " (SMP) is a format for describing and capturing service mesh performance. Created by Layer5; Meshery is the canonical implementation of this specification."), mdx("li", null, "Multi-Vendor Service Mesh Interoperation (Hamlet) is a set of API standards for enabling service mesh federation. Created by VMware."), mdx("li", null, mdx(Link, {
    to: "/projects/service-mesh-interface-conformance",
    mdxType: "Link"
  }, "Service Mesh Interface"), " (SMI) is a standard interface for service meshes on Kubernetes. Created by Microsoft; Meshery is the official SMI conformance tool used to ensure that a cluster is properly configured and that its behavior conforms to official SMI specifications.")), mdx("h3", null, "Service Mesh Landscape"), mdx("p", null, "Let's start characterizing different service meshes now that we better understand why we live in a multi-mesh world. Some service meshes support non-containerized workloads (services operating on a VM or on bare metal), while others specialize in layering on top of container orchestrators, such as Kubernetes. All service meshes support integration with service discovery systems. The subsections that follow provide a very brief survey of service mesh offerings within the current technology landscape."), mdx("div", {
    className: "fact-left"
  }, mdx("p", null, "See the Layer5 ", mdx(Link, {
    to: "/service-mesh-landscape",
    mdxType: "Link"
  }, "service mesh landscape"), " for a comprehensive overview and characterizing of all of the service meshes, service proxies, and related tools available today. This landscape is community-maintained and places service meshes in contrast with one another so that the reader might make the most informed decision about which service mesh best suits their needs.")), mdx("h3", null, "Why Do I Need One?"), mdx("p", null, "\"I have a container orchestrator; why do I need another infrastructure layer?\" you might wonder. Container orchestrators provide most of what the cluster (nodes and containers) requires.\xA0 Container orchestrators' primary focus is on scheduling, discovery, and health, mainly at the infrastructure level (networking being a Layer 4 and below focus). As a result, microservices have unmet service-level\xA0needs. A service mesh is a specialized infrastructure layer that makes service-to-service communication safe, fast, and reliable. Its operation is typically based on a container orchestrator or integration\xA0with another service discovery system. Although service meshes are frequently deployed as a separate layer on top of container orchestrators, they do\xA0not require one\xA0because control and data plane components could be deployed independently of containerized infrastructure."), mdx("p", null, "As stated previously, the network is directly and critically involved in every transaction, every execution of business logic, and every request made to the application in microservices deployments. For modern, cloud-native applications, network stability and latency are top priorities. A cloud native application may be made up of hundreds of microservices, each of which could have several instances, and each of those ephemeral instances could be rescheduled by a container orchestrator as needed."), mdx("p", null, "What would you want from a network that connects your microservices, given the network's criticality? You want your network to be as intelligent and resilient as possible. To improve the aggregate reliability\xA0of your cluster, you want your network to route traffic around from\xA0failures. You want to avoid overhead\xA0like high-latency routes or servers with cold caches in your network. You want your network to protect the traffic that flows between services against trivial attacks. You want your network to provide insight into service communication failures by exposing unforeseen dependencies and root causes. You want your network to let you impose policies at the granularity of service behaviors, not just at the connection level. You also don\u2019t want to write all this logic into your application."), mdx("p", null, "You want Layer 5 management. You want a services-first network. You want a service mesh!")));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/service-mesh/service-mesh-fundamentals</link><guid isPermaLink="false">https://layer5.io/resources/service-mesh/service-mesh-fundamentals</guid><pubDate>Tue, 05 Oct 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/cb310234b6631abcabb632a85974a3dd/service-mesh.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;div class=&quot;intro&quot;&gt;&lt;p&gt;Learn more about service mesh fundamentals in &lt;a class=&quot;blog&quot; href=&quot;/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition&quot;&gt;The Enterprise Path to Service Mesh Archictures (2nd Edition)&lt;/a&gt; -  free book and excellent resource which addresses how to evaluate your organization’s readiness, provides factors to consider when building new applications and converting existing applications to best take advantage of a service mesh, and offers insight on deployment architectures used to get you there.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Many emerging technologies are based on or reincarnated from prior thinking and approaches to computing and networking paradigms. Why is this phenomenon required? We&amp;#x27;ll look to the microservices and containers movement for service meshes, a cloud-native approach to design scalable, independently supplied services. What was previously internal application communications have become a mesh of service-to-service remote procedure calls (RPCs) transported via networks thanks to microservices. Microservices democratize language and technology choice across independent service teams that generate new features quickly as they iteratively and continuously provide software(typically as a service). The most crucial driver of microservices as an architectural model is the decoupling of engineering teams and their enhanced speed.&lt;/p&gt;&lt;h3&gt;Operating Many Services&lt;/h3&gt;&lt;p&gt;The initial couple of microservices are relatively simple to deliver and operate—at least in comparison to organizations&amp;#x27; challenges when they first use many microservices. Whether that &amp;quot;many&amp;quot; is three or one hundred, a major technological issue will inevitably arise. To relieve microservices headaches, several remedies are prescribed; one notable example is the use of client libraries. In microservices environments, language and framework-specific client libraries, whether pre-existing or generated, are utilized to address distributed systems challenges. Many teams first explore their path to a service mesh in these situations. The sheer volume of services that must be managed on an individual, distributed basis (rather than centrally as with monoliths) and the challenges of ensuring their reliability, observability, and security cannot be met with outmoded paradigms, necessitating the need to reincarnate prior thinking and approaches. It is necessary to adapt new tools and techniques.&lt;/p&gt;&lt;p&gt;Since microservices are distributed (often ephemeral) by nature, and the network is critical to their functioning, we should consider the fallacy that networks are reliable, have no latency, have infinite bandwidth, and that communication is guaranteed. When you consider how important it is to be able to control and secure service communication in distributed systems that rely on network calls with every transaction, every time an application is invoked, you can see why you are under tooled and why running more than a few microservices on a network topology that is in constant flux is so difficult. In the age of microservices, a new layer of tooling for the caretaking of services is needed—a service mesh is needed.&lt;/p&gt;&lt;h3&gt;What Is a Service Mesh?&lt;/h3&gt;&lt;p&gt;Service meshes provide intent-based networking for microservices describing desired behavior of the network in the face of constantly changing conditions and network topology. At their core, service meshes provide:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A services-first network;&lt;/li&gt;&lt;li&gt;A developer-driven network;&lt;/li&gt;&lt;li&gt;A network that is primarily concerned with alleviating application developers from building infrastructure concerns into their application code; &lt;/li&gt;&lt;li&gt;A network that empowers operators with the ability to declaratively define network behavior, node identity, and traffic flow through policy; &lt;/li&gt;&lt;li&gt;A network that enables service owners to control application logic without engaging developers to change its code.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Value derived from the layer of tooling that service meshes provide is most evident in the land of microservices. The more services, the more value derived from the mesh. In subsequent chapters, I show how service meshes provide value outside of the use of microservices and containers and help modernize existing services (running on virtual or bare metal servers) as well.&lt;/p&gt;&lt;p&gt;Many of you will find yourself working in organizations that have more than one sort of service mesh. Diversity is driven by a broad set of workload requirements varying from process-based to event-driven in their design, from those running on bare metal to executing in functions and those representing every style of deployment artifact in-between. The scope of service mesh capability required by different organizations varies. As a result, different service meshes are created with slightly different use cases in mind, resulting in differences in service mesh architecture and deployment models. Service meshes, which are driven by Cloud, Hybrid, On-Prem, and Edge, can enable each of these. With the requirements of different edge devices and their functions, along with ephemeral cloud-based workloads, microservice patterns and technologies give a plethora of opportunities for service mesh differentiation and specialization. Cloud vendors produce and collaborate as they provide service mesh as a managed service on their platforms.&lt;/p&gt;&lt;div class=&quot;center&quot;&gt;&lt;img src=&quot;static/figure1-624b7da78797752b7cf79ce222606415.png&quot; align=&quot;center&quot; alt=&quot;comparative spectrum&quot;/&gt;&lt;p&gt;Figure 1: A comparative spectrum of the difference between some of the service meshes based on their individual strengths.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;The demand for service meshes, including meshes native to specific cloud platforms, is growing in tandem with the number of microservices. As a result, many enterprises now use various service mesh products, either separately or together.&lt;/p&gt;&lt;h3&gt;Service Mesh Abstractions&lt;/h3&gt;&lt;p&gt;Because there are any number of service meshes available, independent specifications have cropped up to provide abstraction and standardization across them. Three service mesh abstractions exist today:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;/projects/service-mesh-performance&quot;&gt;Service Mesh Performance&lt;/a&gt; (SMP) is a format for describing and capturing service mesh performance. Created by Layer5; Meshery is the canonical implementation of this specification.&lt;/li&gt;&lt;li&gt;Multi-Vendor Service Mesh Interoperation (Hamlet) is a set of API standards for enabling service mesh federation. Created by VMware.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/projects/service-mesh-interface-conformance&quot;&gt;Service Mesh Interface&lt;/a&gt; (SMI) is a standard interface for service meshes on Kubernetes. Created by Microsoft; Meshery is the official SMI conformance tool used to ensure that a cluster is properly configured and that its behavior conforms to official SMI specifications.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Service Mesh Landscape&lt;/h3&gt;&lt;p&gt;Let&amp;#x27;s start characterizing different service meshes now that we better understand why we live in a multi-mesh world. Some service meshes support non-containerized workloads (services operating on a VM or on bare metal), while others specialize in layering on top of container orchestrators, such as Kubernetes. All service meshes support integration with service discovery systems. The subsections that follow provide a very brief survey of service mesh offerings within the current technology landscape.&lt;/p&gt;&lt;div class=&quot;fact-left&quot;&gt;&lt;p&gt;See the Layer5 &lt;a href=&quot;/service-mesh-landscape&quot;&gt;service mesh landscape&lt;/a&gt; for a comprehensive overview and characterizing of all of the service meshes, service proxies, and related tools available today. This landscape is community-maintained and places service meshes in contrast with one another so that the reader might make the most informed decision about which service mesh best suits their needs.&lt;/p&gt;&lt;/div&gt;&lt;h3&gt;Why Do I Need One?&lt;/h3&gt;&lt;p&gt;&amp;quot;I have a container orchestrator; why do I need another infrastructure layer?&amp;quot; you might wonder. Container orchestrators provide most of what the cluster (nodes and containers) requires.  Container orchestrators&amp;#x27; primary focus is on scheduling, discovery, and health, mainly at the infrastructure level (networking being a Layer 4 and below focus). As a result, microservices have unmet service-level needs. A service mesh is a specialized infrastructure layer that makes service-to-service communication safe, fast, and reliable. Its operation is typically based on a container orchestrator or integration with another service discovery system. Although service meshes are frequently deployed as a separate layer on top of container orchestrators, they do not require one because control and data plane components could be deployed independently of containerized infrastructure.&lt;/p&gt;&lt;p&gt;As stated previously, the network is directly and critically involved in every transaction, every execution of business logic, and every request made to the application in microservices deployments. For modern, cloud-native applications, network stability and latency are top priorities. A cloud native application may be made up of hundreds of microservices, each of which could have several instances, and each of those ephemeral instances could be rescheduled by a container orchestrator as needed.&lt;/p&gt;&lt;p&gt;What would you want from a network that connects your microservices, given the network&amp;#x27;s criticality? You want your network to be as intelligent and resilient as possible. To improve the aggregate reliability of your cluster, you want your network to route traffic around from failures. You want to avoid overhead like high-latency routes or servers with cold caches in your network. You want your network to protect the traffic that flows between services against trivial attacks. You want your network to provide insight into service communication failures by exposing unforeseen dependencies and root causes. You want your network to let you impose policies at the granularity of service behaviors, not just at the connection level. You also don’t want to write all this logic into your application.&lt;/p&gt;&lt;p&gt;You want Layer 5 management. You want a services-first network. You want a service mesh!&lt;/p&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Service Mesh Architecture and Components]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Service Mesh Architecture and Components",
  "thumbnail": "./figure2.png",
  "date": "2021-10-02 10:30:05 -0530",
  "category": "Service Mesh",
  "type": "Article",
  "tags": ["Service mesh", "Network Planes"],
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", {
    className: "intro"
  }, mdx("p", null, "Learn more about service mesh fundamentals in ", mdx(Link, {
    className: "blog",
    to: "/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition",
    mdxType: "Link"
  }, "The Enterprise Path to Service Mesh Archictures (2nd Edition)"), " -  free book and excellent resource which addresses how to evaluate your organization\u2019s readiness, provides factors to consider when building new applications and converting existing applications to best take advantage of a service mesh, and offers insight on deployment architectures used to get you there.")), mdx("p", null, "Service mesh architectures typically consist of three planes: a management plane, a control plane, and a data plane. The analogy between how physical networks (and their equipment) are designed and managed along with\xA0the concept of these three planes immediately resonates with network engineers.\xA0 The OSI model is another type of training that network engineers receive. For those who haven't seen the OSI model in a while, Figure 1 serves as a refresher."), mdx("div", {
    className: "right"
  }, mdx("img", {
    src: Planes,
    align: "right",
    alt: "Network Planes"
  }), mdx("p", null, "Figure 1: Physical networking versus software-defined networking planes")), mdx("p", null, "Let\u2019s contrast physical networking planes and network topologies with those of service meshes:"), mdx("h3", null, "Physical network planes"), mdx("p", null, "The application traffic created by hosts, clients, servers, and applications that use the network as a transport is contained in the physical network data plane (also known as the forwarding plane). As a result, data plane traffic should never have source or destination IP addresses that are assigned to network elements like routers and switches; instead, it should be originated from and delivered to end devices like PCs and servers. To forward data plane traffic as swiftly as possible, routers and switches use hardware chips called application-specific integrated circuits (ASICs). A forwarding information base is referenced by the physical networking data plane (FIB). A forwarding information base (FIB) is a basic, dynamic table that maps a media access control address (MAC address) to a physical network port, allowing traffic to be transmitted at wire speed (using ASICs) to the next device."), mdx("p", null, "The physical networking control plane is the\xA0logical entity that is linked to router processes and functions and is responsible for generating and maintaining necessary intelligence about the state of the network (topology) and the router's interfaces. The control plane includes network protocols, such as routing, signaling, and link-state protocols that are used to build and maintain the operational state of the network and provide IP connectivity between IP hosts.\xA0\xA0 As physical network control planes run in-band with network traffic, they are vulnerable to Denial of service (DoS) attacks, which can result in:"), mdx("ul", null, mdx("li", null, "Exhaustion of memory and/or buffer resources."), mdx("li", null, "Loss of routing protocol updates and keepalives."), mdx("li", null, "Slow or blocked access to interactive management sessions."), mdx("li", null, "High CPU utilization."), mdx("li", null, "Routing instability, interrupted network reachability, or inconsistent packet delivery.")), mdx("p", null, "The physical networking management plane is a logical entity that specifies the traffic used to access, manage, and monitor all network elements via protocols such as SNMP, SSH, HTTPS, and\xA0Telnet. All network provisioning, maintenance, and monitoring operations are supported by the management plane. Although control plane network traffic is handled in-band with all other data plane traffic, management plane traffic\xA0can be carried over an out-of-band (OOB) management network to enable separate reachability if the primary in-band IP path is unavailable (and create a security boundary). Restricting management plane access to devices on trusted networks is critical."), mdx("p", null, "Physical networking control and data planes are tightly coupled and generally vendor-provided as a proprietary integration of hardware and firmware. Software-defined networking (SDN) has done much to standardize and decouple. OpenvSwitch and OpenDaylight are two examples of SDN projects. We\u2019ll see that control and data planes of service meshes are not necessarily tightly coupled."), mdx("div", {
    className: "left"
  }, mdx("img", {
    src: Topology,
    align: "right",
    alt: "Mesh Topology"
  }), mdx("p", null, "Figure 2: Mesh topology\u2014fully connected network nodes")), mdx("h3", null, "Physical network topologies"), mdx("p", null, "Star, spoke-and-hub, tree (also called\xA0hierarchical), and mesh are some of the most used physical networking topologies. Nodes in mesh networks connect directly and non-hierarchically, such that each node is connected to an indefinite number (typically as many as possible or as needed dynamically) of neighbour nodes, allowing at least one path from a given node to any other node to route data efficiently ."), mdx("p", null, "Wireless is the canonical use case for physical mesh networks in which the networking medium is sensitive to line-of-sight, weather-induced, or other disruptions, and so reliability is a top priority. Mesh networks typically self-configure, allowing\xA0dynamic task distribution. This ability is especially important to mitigate\xA0the risk of failure (improving resiliency) and reacting to continuously changing topologies. It's easy to see why this network topology\xA0is the preferred design for service mesh architectures."), mdx("h3", null, "Service mesh network planes"), mdx("p", null, "Service mesh architectures typically employ the same three networking planes: data, control, and management. "), mdx("div", {
    className: "right"
  }, mdx("img", {
    src: Architecture,
    align: "right",
    alt: "Service mesh architecture"
  }), mdx("p", null, "Figure 3: An example of service mesh architecture. In Conduit\u2019s architecture, control and data planes divide in-band and out-of-band responsibility for service traffic")), mdx("p", null, "A service mesh data plane (also known as the proxying layer) intercepts all packets in a request and performs health checks, routing, load balancing, authentication, authorization, and generation of observable signals. Service proxies are transparently inserted, and applications are oblivious of the data plane's existence when they conduct service-to-service calls. Intra-service communication, as well as inbound (ingress) and outbound (egress) service mesh traffic, are handled by data planes. Whether traffic is entering the mesh (ingressing) or leaving the mesh (egressing), application service traffic is directed first to the service proxy for handling prior to sending (or not sending) along to the application.\xA0 Traffic is transparently intercepted and redirected to the service proxy in order to reroute traffic from the service proxy to the service application. The service proxy intercepts and redirects traffic between\xA0the service proxy and service application places the service application\u2019s container onto a network it would otherwise not be on.\xA0All traffic to and from the service application is seen by the service proxy.\xA0 Service proxies are the building blocks of service mesh data planes."), mdx("div", {
    className: "fact"
  }, "Traffic Interception and Redirection:", mdx("p", null, "The technology utilised to intercept and redirect traffic varies between service meshes. Some meshes allow you the option of using iptables, IPVS, or eBPF to transparently proxy requests between clients and service applications. Other service mesh proxies operate in a less transparent manner, requiring application traffic to be configured to direct their traffic to the proxy. The operating system type and kernel version used for the service mesh deployment are constrained by the choice of each of these technologies, which influences the speed with which packets are processed.")), mdx("p", null, "Envoy is one of the most widely used proxy in service mesh data planes. It's also common to see it deployed\xA0as a load balancer or ingress gateway. The proxies used in service mesh data planes are highly intelligent.\xA0 In order to manipulate network packets\xA0(including application level data), they\xA0may include any number of protocol-specific filters . Extending data plane capabilities with technology advancements like WebAssembly allows service meshes to inject additional logic into requests while simultaneously handling large traffic loads."), mdx("p", null, "When the number of proxies becomes unmanageable or when a single point of visibility and control is required, a service mesh control plane is essential. Control planes offer policy and configuration for the services in the mesh, transforming a set of isolated, stateless proxies into a service mesh. Control planes run out-of-band and do not directly touch any network packets in the mesh. Control planes usually include a command-line interface (CLI) and a user interface to interact with, both of which provide access to a centralised API for regulating proxy behaviour holistically.\xA0You can use the control plane's APIs to automate changes to its configuration (for example, using a continuous integration/continuous deployment pipeline), where configuration is generally version controlled and updated."), mdx("div", {
    className: "fact"
  }, "Proxies are generally considered stateless, but this is a thought-provoking concept. In the way in which proxies are generally informed by the control plane of the presence of services, mesh topology updates, traffic and authorization policy, and so on, proxies cache the state of the mesh but aren\u2019t regarded as the source of truth for the state of the mesh."), mdx("p", null, "We can see how the data and control planes are packaged and deployed in Linkerd (pronounced \"linker-dee\") and Istio (pronounced \"Ist-tee-oh\"), two prominent open source service meshes. In terms of packaging, Linkerdv1 contains both its proxying components (linkerd) and its control plane (namerd) packaged together simply as \u201CLinkerd,\u201D and Istio brings a collection of control plane components (Galley, Pilot, and Citadel) to pair by default with Envoy (a data plane) packaged together as \u201CIstio.\u201D Envoy is often labeled a service mesh, inappropriately so, because it takes packaging with a control plane to form a service mesh."), mdx("p", null, "A service mesh management plane is a higher order level of control as shown in Figure 4. A management plane may provide a variety of functions. As such, implementations vary in their functionality: some focusing on orchestrating service meshes (e.g., service mesh lifecycle management) and mesh federation, providing insight across a collection of diverse meshes. Some management planes focus on integrating service meshes with business process and policy, including governance, compliance, validation of configuration, and extensible access control."), mdx("div", {
    className: "left"
  }, mdx("img", {
    src: Meshery,
    align: "right",
    alt: "Meshery"
  }), mdx("p", null, "Figure 4: Meshery, the cloud native management plane\u2019s architecture.")), mdx("p", null, "A service mesh management plane is a higher order level of control. A management plane can provide\xA0various functions. As a result, implementations differ in functionality, with some focused on orchestrating service meshes (e.g., service mesh lifecycle management) and mesh federation, which provides insight across a set of meshes.\xA0Some management planes focus on integrating service meshes with business process and policy, including governance, compliance, validation of configuration, and extensible access control."), mdx("p", null, "In terms of deployments, data planes, such as Linkerdv2, contain proxies that are created as part of the project and are not designed to be configured by hand, but rather to have their behaviour completely controlled by the control plane. Other service meshes, such as Istio, prefer not to develop their own proxy and instead ingest and utilise independent proxies (separate projects), simplifying proxy selection and deployment outside of the mesh(standalone). Control planes are often deployed in a separate \"system\" namespace,\xA0using\xA0Kubernetes as the example infrastructure. Depending on how closely they integrate with non-containerized workloads and a business's backend systems, management planes are deployed both on and off cluster.")));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/service-mesh/service-mesh-architecture-and-components</link><guid isPermaLink="false">https://layer5.io/resources/service-mesh/service-mesh-architecture-and-components</guid><pubDate>Sat, 02 Oct 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/bed9d3fcfe69a84ae0787ff2ca8845aa/figure2.png" length="0" type="image/png"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;div class=&quot;intro&quot;&gt;&lt;p&gt;Learn more about service mesh fundamentals in &lt;a class=&quot;blog&quot; href=&quot;/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition&quot;&gt;The Enterprise Path to Service Mesh Archictures (2nd Edition)&lt;/a&gt; -  free book and excellent resource which addresses how to evaluate your organization’s readiness, provides factors to consider when building new applications and converting existing applications to best take advantage of a service mesh, and offers insight on deployment architectures used to get you there.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Service mesh architectures typically consist of three planes: a management plane, a control plane, and a data plane. The analogy between how physical networks (and their equipment) are designed and managed along with the concept of these three planes immediately resonates with network engineers.  The OSI model is another type of training that network engineers receive. For those who haven&amp;#x27;t seen the OSI model in a while, Figure 1 serves as a refresher.&lt;/p&gt;&lt;div class=&quot;right&quot;&gt;&lt;img src=&quot;static/figure1-6e4093aff217b5c671eada947906c711.png&quot; align=&quot;right&quot; alt=&quot;Network Planes&quot;/&gt;&lt;p&gt;Figure 1: Physical networking versus software-defined networking planes&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Let’s contrast physical networking planes and network topologies with those of service meshes:&lt;/p&gt;&lt;h3&gt;Physical network planes&lt;/h3&gt;&lt;p&gt;The application traffic created by hosts, clients, servers, and applications that use the network as a transport is contained in the physical network data plane (also known as the forwarding plane). As a result, data plane traffic should never have source or destination IP addresses that are assigned to network elements like routers and switches; instead, it should be originated from and delivered to end devices like PCs and servers. To forward data plane traffic as swiftly as possible, routers and switches use hardware chips called application-specific integrated circuits (ASICs). A forwarding information base is referenced by the physical networking data plane (FIB). A forwarding information base (FIB) is a basic, dynamic table that maps a media access control address (MAC address) to a physical network port, allowing traffic to be transmitted at wire speed (using ASICs) to the next device.&lt;/p&gt;&lt;p&gt;The physical networking control plane is the logical entity that is linked to router processes and functions and is responsible for generating and maintaining necessary intelligence about the state of the network (topology) and the router&amp;#x27;s interfaces. The control plane includes network protocols, such as routing, signaling, and link-state protocols that are used to build and maintain the operational state of the network and provide IP connectivity between IP hosts.   As physical network control planes run in-band with network traffic, they are vulnerable to Denial of service (DoS) attacks, which can result in:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Exhaustion of memory and/or buffer resources.&lt;/li&gt;&lt;li&gt;Loss of routing protocol updates and keepalives.&lt;/li&gt;&lt;li&gt;Slow or blocked access to interactive management sessions.&lt;/li&gt;&lt;li&gt;High CPU utilization.&lt;/li&gt;&lt;li&gt;Routing instability, interrupted network reachability, or inconsistent packet delivery.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The physical networking management plane is a logical entity that specifies the traffic used to access, manage, and monitor all network elements via protocols such as SNMP, SSH, HTTPS, and Telnet. All network provisioning, maintenance, and monitoring operations are supported by the management plane. Although control plane network traffic is handled in-band with all other data plane traffic, management plane traffic can be carried over an out-of-band (OOB) management network to enable separate reachability if the primary in-band IP path is unavailable (and create a security boundary). Restricting management plane access to devices on trusted networks is critical.&lt;/p&gt;&lt;p&gt;Physical networking control and data planes are tightly coupled and generally vendor-provided as a proprietary integration of hardware and firmware. Software-defined networking (SDN) has done much to standardize and decouple. OpenvSwitch and OpenDaylight are two examples of SDN projects. We’ll see that control and data planes of service meshes are not necessarily tightly coupled.&lt;/p&gt;&lt;div class=&quot;left&quot;&gt;&lt;img src=&quot;static/figure2-1a9f1b412652dfd917052e9ac2854c73.png&quot; align=&quot;right&quot; alt=&quot;Mesh Topology&quot;/&gt;&lt;p&gt;Figure 2: Mesh topology—fully connected network nodes&lt;/p&gt;&lt;/div&gt;&lt;h3&gt;Physical network topologies&lt;/h3&gt;&lt;p&gt;Star, spoke-and-hub, tree (also called hierarchical), and mesh are some of the most used physical networking topologies. Nodes in mesh networks connect directly and non-hierarchically, such that each node is connected to an indefinite number (typically as many as possible or as needed dynamically) of neighbour nodes, allowing at least one path from a given node to any other node to route data efficiently .&lt;/p&gt;&lt;p&gt;Wireless is the canonical use case for physical mesh networks in which the networking medium is sensitive to line-of-sight, weather-induced, or other disruptions, and so reliability is a top priority. Mesh networks typically self-configure, allowing dynamic task distribution. This ability is especially important to mitigate the risk of failure (improving resiliency) and reacting to continuously changing topologies. It&amp;#x27;s easy to see why this network topology is the preferred design for service mesh architectures.&lt;/p&gt;&lt;h3&gt;Service mesh network planes&lt;/h3&gt;&lt;p&gt;Service mesh architectures typically employ the same three networking planes: data, control, and management. &lt;/p&gt;&lt;div class=&quot;right&quot;&gt;&lt;img src=&quot;static/figure3-58e1728df81b55a288fc15de629455ce.png&quot; align=&quot;right&quot; alt=&quot;Service mesh architecture&quot;/&gt;&lt;p&gt;Figure 3: An example of service mesh architecture. In Conduit’s architecture, control and data planes divide in-band and out-of-band responsibility for service traffic&lt;/p&gt;&lt;/div&gt;&lt;p&gt;A service mesh data plane (also known as the proxying layer) intercepts all packets in a request and performs health checks, routing, load balancing, authentication, authorization, and generation of observable signals. Service proxies are transparently inserted, and applications are oblivious of the data plane&amp;#x27;s existence when they conduct service-to-service calls. Intra-service communication, as well as inbound (ingress) and outbound (egress) service mesh traffic, are handled by data planes. Whether traffic is entering the mesh (ingressing) or leaving the mesh (egressing), application service traffic is directed first to the service proxy for handling prior to sending (or not sending) along to the application.  Traffic is transparently intercepted and redirected to the service proxy in order to reroute traffic from the service proxy to the service application. The service proxy intercepts and redirects traffic between the service proxy and service application places the service application’s container onto a network it would otherwise not be on. All traffic to and from the service application is seen by the service proxy.  Service proxies are the building blocks of service mesh data planes.&lt;/p&gt;&lt;div class=&quot;fact&quot;&gt;Traffic Interception and Redirection:&lt;p&gt;The technology utilised to intercept and redirect traffic varies between service meshes. Some meshes allow you the option of using iptables, IPVS, or eBPF to transparently proxy requests between clients and service applications. Other service mesh proxies operate in a less transparent manner, requiring application traffic to be configured to direct their traffic to the proxy. The operating system type and kernel version used for the service mesh deployment are constrained by the choice of each of these technologies, which influences the speed with which packets are processed.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Envoy is one of the most widely used proxy in service mesh data planes. It&amp;#x27;s also common to see it deployed as a load balancer or ingress gateway. The proxies used in service mesh data planes are highly intelligent.  In order to manipulate network packets (including application level data), they may include any number of protocol-specific filters . Extending data plane capabilities with technology advancements like WebAssembly allows service meshes to inject additional logic into requests while simultaneously handling large traffic loads.&lt;/p&gt;&lt;p&gt;When the number of proxies becomes unmanageable or when a single point of visibility and control is required, a service mesh control plane is essential. Control planes offer policy and configuration for the services in the mesh, transforming a set of isolated, stateless proxies into a service mesh. Control planes run out-of-band and do not directly touch any network packets in the mesh. Control planes usually include a command-line interface (CLI) and a user interface to interact with, both of which provide access to a centralised API for regulating proxy behaviour holistically. You can use the control plane&amp;#x27;s APIs to automate changes to its configuration (for example, using a continuous integration/continuous deployment pipeline), where configuration is generally version controlled and updated.&lt;/p&gt;&lt;div class=&quot;fact&quot;&gt;Proxies are generally considered stateless, but this is a thought-provoking concept. In the way in which proxies are generally informed by the control plane of the presence of services, mesh topology updates, traffic and authorization policy, and so on, proxies cache the state of the mesh but aren’t regarded as the source of truth for the state of the mesh.&lt;/div&gt;&lt;p&gt;We can see how the data and control planes are packaged and deployed in Linkerd (pronounced &amp;quot;linker-dee&amp;quot;) and Istio (pronounced &amp;quot;Ist-tee-oh&amp;quot;), two prominent open source service meshes. In terms of packaging, Linkerdv1 contains both its proxying components (linkerd) and its control plane (namerd) packaged together simply as “Linkerd,” and Istio brings a collection of control plane components (Galley, Pilot, and Citadel) to pair by default with Envoy (a data plane) packaged together as “Istio.” Envoy is often labeled a service mesh, inappropriately so, because it takes packaging with a control plane to form a service mesh.&lt;/p&gt;&lt;p&gt;A service mesh management plane is a higher order level of control as shown in Figure 4. A management plane may provide a variety of functions. As such, implementations vary in their functionality: some focusing on orchestrating service meshes (e.g., service mesh lifecycle management) and mesh federation, providing insight across a collection of diverse meshes. Some management planes focus on integrating service meshes with business process and policy, including governance, compliance, validation of configuration, and extensible access control.&lt;/p&gt;&lt;div class=&quot;left&quot;&gt;&lt;img src=&quot;static/figure4-b3eeda7dcac8dcf72d83a4cc33156ded.png&quot; align=&quot;right&quot; alt=&quot;Meshery&quot;/&gt;&lt;p&gt;Figure 4: Meshery, the cloud native management plane’s architecture.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;A service mesh management plane is a higher order level of control. A management plane can provide various functions. As a result, implementations differ in functionality, with some focused on orchestrating service meshes (e.g., service mesh lifecycle management) and mesh federation, which provides insight across a set of meshes. Some management planes focus on integrating service meshes with business process and policy, including governance, compliance, validation of configuration, and extensible access control.&lt;/p&gt;&lt;p&gt;In terms of deployments, data planes, such as Linkerdv2, contain proxies that are created as part of the project and are not designed to be configured by hand, but rather to have their behaviour completely controlled by the control plane. Other service meshes, such as Istio, prefer not to develop their own proxy and instead ingest and utilise independent proxies (separate projects), simplifying proxy selection and deployment outside of the mesh(standalone). Control planes are often deployed in a separate &amp;quot;system&amp;quot; namespace, using Kubernetes as the example infrastructure. Depending on how closely they integrate with non-containerized workloads and a business&amp;#x27;s backend systems, management planes are deployed both on and off cluster.&lt;/p&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Network Planes]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Network Planes",
  "thumbnail": "./network-planes.png",
  "date": "2021-10-01 10:30:05 -0530",
  "category": "Network Planes",
  "type": "Article",
  "product": "Service Mesh Performance",
  "tags": ["Network Planes"],
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", {
    className: "intro"
  }, mdx("p", null, "Learn more about service mesh fundamentals in ", mdx(Link, {
    className: "blog",
    to: "/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition",
    mdxType: "Link"
  }, "The Enterprise Path to Service Mesh Archictures (2nd Edition)"), " -  free book and excellent resource which addresses how to evaluate your organization\u2019s readiness, provides factors to consider when building new applications and converting existing applications to best take advantage of a service mesh, and offers insight on deployment architectures used to get you there.")), mdx("h2", null, "Data Plane"), mdx("p", null, "Service proxies (gateways) are elements of the data plane. The number of proxies present depends on the number of services you\u2019re running and the design of the service mesh\u2019s deployment model. Some service mesh initiatives create their own proxies, while others rely on existing ones. Envoy is a popular choice as the data plane element."), mdx("strong", null, "BFE"), mdx("p", null, mdx("a", {
    href: "https://github.com/bfenetworks/bfe"
  }, "BFE"), " is a Golang-based modern proxy. HTTP, HTTPS, SPDY, HTTP2, WebSocket, TLS, and FastCGI are among the load balancing algorithms and multiple protocols it supports. Users can configure rule and content-based routing using BFE's own domain-specific language."), mdx("strong", null, "Envoy"), mdx("p", null, "Envoy is a modern proxy developed in C++. Envoy's initial success stemmed from its ability to hot-reload both its configuration and itself (update itself in place while handling connections). API gateways, ingress controllers, service meshes, and managed offerings by Cloud providers are just a few of the projects that have been built on top of Envoy. Istio, App Mesh, Kuma, Open Service Mesh, and other service meshes (discussed in the Control Plane section) have been built on top of Envoy."), mdx("strong", null, "Linkerdv2 "), mdx("p", null, "The linkerd2-proxy is explicitly built for the service mesh sidecar use case, Linkerd, can be significantly smaller and faster than Envoy-based service meshes. Rust was chosen as the implementation language because it is memory-safe and highly performant. This service proxy purports a sub-1ms p99 traffic latency. Open-source.  From Buoyant."), mdx("strong", null, "NGINX"), mdx("p", null, mdx("a", {
    href: "https://github.com/nginxinc/nginmesh"
  }, "nginMesh"), " project deploys NGINX as a sidecar proxy in Istio. Open source. Written primarily in C and Rust. From NGINX. "), mdx("br", null), mdx("p", null, "The following are a couple of early, and now antiquated, service mesh\u2013like projects, forming control planes around existing load-balancers:"), mdx("strong", null, "SmartStack"), mdx("p", null, "Comprising two components: Nerve for health-checking and Synapse for service discovery. Open source. From AirBnB. Written in Ruby."), mdx("strong", null, "Nelson"), mdx("p", null, "Takes advantage of integrations with Envoy, Prometheus, Vault, and Nomad to provide Git-centric, developer-driven deployments with automated build-and-release workflow. Open source. From Verizon Labs. Written in Scala."), mdx("h2", null, "Control Plane"), mdx("strong", null, "Consul "), mdx("p", null, "Announced service mesh capable intention in v1.5. Became a full service mesh in v1.8. Consul uses Envoy as its dataplane, offering multi-cluster federation. Open and closed source. From HashiCorp. Primarily written in Go."), mdx("strong", null, "Linkerd"), mdx("p", null, "Linkerd is hosted by the Cloud Native Computing Foundation (CNCF) and has undergone two major releases with significant architectural changes and an entirely different code base used between the two versions."), mdx("strong", null, "Linkerdv1"), mdx("p", null, "The first version of Linkerd was built on top of Twitter Finagle. Pronounced \u201Clinker-dee\u201D, it includes both a proxying data plane and control plane, Namerd (\u201Cnamer-dee\u201D), all in one package. Open source. Written primarily in Scala."), mdx("li", null, "Data plane can be deployed in a node proxy model (commonly)  or in a proxy sidecar (not common). Proven scale, having served more than one trillion service requests."), mdx("li", null, "Supports services running within container orchestrators and as standalone virtual or physical machines."), mdx("li", null, "Service discovery abstractions to unite multiple systems."), mdx("strong", null, "Linkerdv2"), mdx("p", null, "The second major version of Linkerd is based on a project formerly known as Conduit, a Kubernetes-native and Kubernetes-only service mesh announced as a project in December 2017. In contrast to Istio and in learning from Linkerdv1, Linkerdv2\u2019s design principles revolve around a minimalist architecture and zero configuration philosophy, optimizing for streamlined setup."), mdx("li", null, "Open Source. From Buoyant. Control-plane written in Go. Hosted by the CNCF."), mdx("li", null, "Support for gRPC, HTTP/2, and HTTP/1.x requests plus all TCP traffic. Currently only supports Kubernetes."), mdx("strong", null, "Istio"), mdx("p", null, "Announced as a project in May 2017, Istio is considered to be a \u201Csecond explosion after Kubernetes\u201D given its architecture and surface area of functional aspiration."), mdx("li", null, "Supports services running within container orchestrators and as standalone virtual or physical machines."), mdx("li", null, "Was the first service mesh to promote the model of supporting automatic injection of service proxies as sidecars using Kubernetes Admission controller."), mdx("li", null, "Many projects have been built around Istio. Commercial, closed source offerings built around Istio include: AspenMesh, VMware Tanzu Service Mesh, Octarine (acquired by VMware in 2020). Commercial, closed source offerings built inside of Istio include Citrix Service Mesh To be built \u201Cwithin Istio\u201D means to offer the Istio control plane with an alternative service proxy. Citrix Service Mesh displaces Envoy with CPX. Open source, data plane proxy, MOSN released support for running under Istio as the control plane, while displacing Envoy as the service proxy."), mdx("li", null, "Many projects have been built within Istio."), mdx("li", null, "Mesher. Layer 7 (L7) proxy that runs as a sidecar deployable on Huawei Cloud Service Engine. Open source. Written primarily in Go. From Huawei."), mdx("strong", null, "NGINX Service Mesh "), mdx("p", null, "NGINX Service Mesh is a more recent arrival into the service mesh arena, having released in September 2020. Using an Nginx Plus augmented to interface with Kubernetes natively as its dataplane, supports ingress and egress gateways through NGINX Plus Kubernetes Ingress Controllers. NGINX Service Mesh offers its control plane as a CLI, meshctl, using the Service Mesh Interface (SMI) specification as its API. Both Open and closed source. From NGINX. Primarily written in C."), mdx("strong", null, "Others including Open Service Mesh, Maesh, Kuma, App Mesh..."), mdx("p", null, "This list is meant to give you an idea of the wide range of service meshes that are currently available. A complete list of service meshes and their details may be found in the Layer5 ", mdx(Link, {
    to: "/landscape",
    mdxType: "Link"
  }, "service mesh landscape"), ", maintained by the community."), mdx("h2", null, "Management Plane"), mdx("p", null, "The management plane sits a level above the control plane. It can perform various tasks such as operational patterns, business system integration, and application logic enhancement while functioning across different service meshes. A management plane can perform workload and mesh configuration validation, whether in preparation for onboarding a workload into the mesh or as you upgrade to new versions of components running your control and data planes or new versions of your applications. Management planes help organizations running a service mesh get the most out of their investment. Performance management is one part of maintaining service meshes, a function at which Meshery excels."), mdx("strong", null, "Meshery"), mdx("p", null, "the cloud native management plane for adopting, operating and developing on different service meshes. Meshery integrates business processes and application logic into service meshes by deploying custom WebAssembly (WASM) modules as filters in Envoy-based data planes. It provides governance, policy and performance and configuration management of service meshes with a visual topology for designing service mesh deployments and managing the fine-grained traffic control of a service mesh. - Open source. Created by Layer5. Primarily written in Go."), mdx("div", {
    className: "fact"
  }, "Service Mesh Linguistics", mdx("p", null, "As the lingua franca of the cloud-native ecosystem, Go is certainly prevalent and you might expect most service mesh projects to be written in Go. By the nature of their task, data planes must be highly efficient in the interception, introspection, and rewriting of network traffic. As a data plane component, Envoy is written in C++11 because it provides excellent performance (surprisingly, some say it provides a great developer experience). Rust has found its way into service meshes as a growing language (and something of a C++ competitor). Because of its properties around efficiency (outperforming Go) and memory safety (when written to be so) without garbage collection, Rust has been used for Linkerdv2\u2019s data plane component, for the former nginMesh\u2019s Mixer module (see \u201CHow to customize an Istio service mesh\u201D), and is now being used in WebAssembly programs as data plane filters (see \u201CWrite WASM filters for Envoy in Rust and deploy with Consul\u201D)."))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/network-planes/network-planes</link><guid isPermaLink="false">https://layer5.io/resources/network-planes/network-planes</guid><pubDate>Fri, 01 Oct 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/17825725d58d3f0c12d511f863833f64/network-planes.png" length="0" type="image/png"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;div class=&quot;intro&quot;&gt;&lt;p&gt;Learn more about service mesh fundamentals in &lt;a class=&quot;blog&quot; href=&quot;/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition&quot;&gt;The Enterprise Path to Service Mesh Archictures (2nd Edition)&lt;/a&gt; -  free book and excellent resource which addresses how to evaluate your organization’s readiness, provides factors to consider when building new applications and converting existing applications to best take advantage of a service mesh, and offers insight on deployment architectures used to get you there.&lt;/p&gt;&lt;/div&gt;&lt;h2&gt;Data Plane&lt;/h2&gt;&lt;p&gt;Service proxies (gateways) are elements of the data plane. The number of proxies present depends on the number of services you’re running and the design of the service mesh’s deployment model. Some service mesh initiatives create their own proxies, while others rely on existing ones. Envoy is a popular choice as the data plane element.&lt;/p&gt;&lt;strong&gt;BFE&lt;/strong&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/bfenetworks/bfe&quot;&gt;BFE&lt;/a&gt; is a Golang-based modern proxy. HTTP, HTTPS, SPDY, HTTP2, WebSocket, TLS, and FastCGI are among the load balancing algorithms and multiple protocols it supports. Users can configure rule and content-based routing using BFE&amp;#x27;s own domain-specific language.&lt;/p&gt;&lt;strong&gt;Envoy&lt;/strong&gt;&lt;p&gt;Envoy is a modern proxy developed in C++. Envoy&amp;#x27;s initial success stemmed from its ability to hot-reload both its configuration and itself (update itself in place while handling connections). API gateways, ingress controllers, service meshes, and managed offerings by Cloud providers are just a few of the projects that have been built on top of Envoy. Istio, App Mesh, Kuma, Open Service Mesh, and other service meshes (discussed in the Control Plane section) have been built on top of Envoy.&lt;/p&gt;&lt;strong&gt;Linkerdv2 &lt;/strong&gt;&lt;p&gt;The linkerd2-proxy is explicitly built for the service mesh sidecar use case, Linkerd, can be significantly smaller and faster than Envoy-based service meshes. Rust was chosen as the implementation language because it is memory-safe and highly performant. This service proxy purports a sub-1ms p99 traffic latency. Open-source.  From Buoyant.&lt;/p&gt;&lt;strong&gt;NGINX&lt;/strong&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/nginxinc/nginmesh&quot;&gt;nginMesh&lt;/a&gt; project deploys NGINX as a sidecar proxy in Istio. Open source. Written primarily in C and Rust. From NGINX. &lt;/p&gt;&lt;br/&gt;&lt;p&gt;The following are a couple of early, and now antiquated, service mesh–like projects, forming control planes around existing load-balancers:&lt;/p&gt;&lt;strong&gt;SmartStack&lt;/strong&gt;&lt;p&gt;Comprising two components: Nerve for health-checking and Synapse for service discovery. Open source. From AirBnB. Written in Ruby.&lt;/p&gt;&lt;strong&gt;Nelson&lt;/strong&gt;&lt;p&gt;Takes advantage of integrations with Envoy, Prometheus, Vault, and Nomad to provide Git-centric, developer-driven deployments with automated build-and-release workflow. Open source. From Verizon Labs. Written in Scala.&lt;/p&gt;&lt;h2&gt;Control Plane&lt;/h2&gt;&lt;strong&gt;Consul &lt;/strong&gt;&lt;p&gt;Announced service mesh capable intention in v1.5. Became a full service mesh in v1.8. Consul uses Envoy as its dataplane, offering multi-cluster federation. Open and closed source. From HashiCorp. Primarily written in Go.&lt;/p&gt;&lt;strong&gt;Linkerd&lt;/strong&gt;&lt;p&gt;Linkerd is hosted by the Cloud Native Computing Foundation (CNCF) and has undergone two major releases with significant architectural changes and an entirely different code base used between the two versions.&lt;/p&gt;&lt;strong&gt;Linkerdv1&lt;/strong&gt;&lt;p&gt;The first version of Linkerd was built on top of Twitter Finagle. Pronounced “linker-dee”, it includes both a proxying data plane and control plane, Namerd (“namer-dee”), all in one package. Open source. Written primarily in Scala.&lt;/p&gt;&lt;li&gt;Data plane can be deployed in a node proxy model (commonly)  or in a proxy sidecar (not common). Proven scale, having served more than one trillion service requests.&lt;/li&gt;&lt;li&gt;Supports services running within container orchestrators and as standalone virtual or physical machines.&lt;/li&gt;&lt;li&gt;Service discovery abstractions to unite multiple systems.&lt;/li&gt;&lt;strong&gt;Linkerdv2&lt;/strong&gt;&lt;p&gt;The second major version of Linkerd is based on a project formerly known as Conduit, a Kubernetes-native and Kubernetes-only service mesh announced as a project in December 2017. In contrast to Istio and in learning from Linkerdv1, Linkerdv2’s design principles revolve around a minimalist architecture and zero configuration philosophy, optimizing for streamlined setup.&lt;/p&gt;&lt;li&gt;Open Source. From Buoyant. Control-plane written in Go. Hosted by the CNCF.&lt;/li&gt;&lt;li&gt;Support for gRPC, HTTP/2, and HTTP/1.x requests plus all TCP traffic. Currently only supports Kubernetes.&lt;/li&gt;&lt;strong&gt;Istio&lt;/strong&gt;&lt;p&gt;Announced as a project in May 2017, Istio is considered to be a “second explosion after Kubernetes” given its architecture and surface area of functional aspiration.&lt;/p&gt;&lt;li&gt;Supports services running within container orchestrators and as standalone virtual or physical machines.&lt;/li&gt;&lt;li&gt;Was the first service mesh to promote the model of supporting automatic injection of service proxies as sidecars using Kubernetes Admission controller.&lt;/li&gt;&lt;li&gt;Many projects have been built around Istio. Commercial, closed source offerings built around Istio include: AspenMesh, VMware Tanzu Service Mesh, Octarine (acquired by VMware in 2020). Commercial, closed source offerings built inside of Istio include Citrix Service Mesh To be built “within Istio” means to offer the Istio control plane with an alternative service proxy. Citrix Service Mesh displaces Envoy with CPX. Open source, data plane proxy, MOSN released support for running under Istio as the control plane, while displacing Envoy as the service proxy.&lt;/li&gt;&lt;li&gt;Many projects have been built within Istio.&lt;/li&gt;&lt;li&gt;Mesher. Layer 7 (L7) proxy that runs as a sidecar deployable on Huawei Cloud Service Engine. Open source. Written primarily in Go. From Huawei.&lt;/li&gt;&lt;strong&gt;NGINX Service Mesh &lt;/strong&gt;&lt;p&gt;NGINX Service Mesh is a more recent arrival into the service mesh arena, having released in September 2020. Using an Nginx Plus augmented to interface with Kubernetes natively as its dataplane, supports ingress and egress gateways through NGINX Plus Kubernetes Ingress Controllers. NGINX Service Mesh offers its control plane as a CLI, meshctl, using the Service Mesh Interface (SMI) specification as its API. Both Open and closed source. From NGINX. Primarily written in C.&lt;/p&gt;&lt;strong&gt;Others including Open Service Mesh, Maesh, Kuma, App Mesh...&lt;/strong&gt;&lt;p&gt;This list is meant to give you an idea of the wide range of service meshes that are currently available. A complete list of service meshes and their details may be found in the Layer5 &lt;a href=&quot;/landscape&quot;&gt;service mesh landscape&lt;/a&gt;, maintained by the community.&lt;/p&gt;&lt;h2&gt;Management Plane&lt;/h2&gt;&lt;p&gt;The management plane sits a level above the control plane. It can perform various tasks such as operational patterns, business system integration, and application logic enhancement while functioning across different service meshes. A management plane can perform workload and mesh configuration validation, whether in preparation for onboarding a workload into the mesh or as you upgrade to new versions of components running your control and data planes or new versions of your applications. Management planes help organizations running a service mesh get the most out of their investment. Performance management is one part of maintaining service meshes, a function at which Meshery excels.&lt;/p&gt;&lt;strong&gt;Meshery&lt;/strong&gt;&lt;p&gt;the cloud native management plane for adopting, operating and developing on different service meshes. Meshery integrates business processes and application logic into service meshes by deploying custom WebAssembly (WASM) modules as filters in Envoy-based data planes. It provides governance, policy and performance and configuration management of service meshes with a visual topology for designing service mesh deployments and managing the fine-grained traffic control of a service mesh. - Open source. Created by Layer5. Primarily written in Go.&lt;/p&gt;&lt;div class=&quot;fact&quot;&gt;Service Mesh Linguistics&lt;p&gt;As the lingua franca of the cloud-native ecosystem, Go is certainly prevalent and you might expect most service mesh projects to be written in Go. By the nature of their task, data planes must be highly efficient in the interception, introspection, and rewriting of network traffic. As a data plane component, Envoy is written in C++11 because it provides excellent performance (surprisingly, some say it provides a great developer experience). Rust has found its way into service meshes as a growing language (and something of a C++ competitor). Because of its properties around efficiency (outperforming Go) and memory safety (when written to be so) without garbage collection, Rust has been used for Linkerdv2’s data plane component, for the former nginMesh’s Mixer module (see “How to customize an Istio service mesh”), and is now being used in WebAssembly programs as data plane filters (see “Write WASM filters for Envoy in Rust and deploy with Consul”).&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[7 Key Considerations for Microservices-Based Application Delivery]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "7 Key Considerations for Microservices-Based Application Delivery",
  "subtitle": "Ensuring the Success of Your Cloud Native Journey",
  "date": "2021-09-15 10:30:05 -0530",
  "thumbnail": "./citrix-path-to-cloud-native.svg",
  "category": "Service Mesh",
  "type": "Article",
  "tags": ["Microservices"],
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("h2", null, "The Role of Application Delivery in Your Cloud Native Journey"), mdx("p", null, "As digital transformation is changing how your organization conducts business, so is it changing how your products and services are delivered. The infrastructure and practices by which your software is continuously deployed and operated \u2014 your application delivery \u2014 is the fulcrum of your organization\u2019s digital transformation. Likely you are progressing on your cloud native journey \u2014 that is, transitioning from monolithic to container-based microservices architectures with the goal of achieving agility, portability, and on-demand scalability. Kubernetes is the platform of choice for many, providing the automation and control necessary to manage microservices-based applications at scale and with high velocity."), mdx("p", null, "With the network part and parcel to each and every service request in your microservices-based application, it may come as no surprise that at the core of application delivery is your application delivery controller, an intelligent proxy that accelerates and manages application delivery. With no standard definition of what an application delivery controller does, the capabilities of intelligent proxies vary broadly. And so in this white paper, we\u2019ll explore application delivery controllers as they relate to your architecture choices, your use of Kubernetes platforms, and open source tools."), mdx("h2", null, "7 Key Considerations for Microservices-Based Application Delivery"), mdx("p", null, "Before embarking on your cloud native journey, it is essential to critically assess your organization\u2019s readiness with regard to skill set so that you can choose the solutions that best fit the business objective you are seeking to meet in context of your ability to do so. There are seven key considerations to address when planning your microservices-based application delivery design:"), mdx("ol", null, mdx("li", null, "Architecting your foundation the right way "), mdx("li", null, "Openly integrating with the cloud native ecosystem"), mdx("li", null, "Choosing the perfect proxy"), mdx("li", null, "Securing your applications and APIs"), mdx("li", null, "Enabling CI/CD and canary deployment with advanced traffic steering "), mdx("li", null, "Achieving holistic observability"), mdx("li", null, "Managing monoliths and microservices")), mdx("p", null, "A thorough evaluation of these seven considerations is best done with specific tasks and goals in mind. Depending on the size and diversity of your organization, you may need to account for a variety of stakeholders\u2019 needs \u2014 that is, tasks and goals that differ based on role and responsibility. In context of application delivery, let\u2019s survey the most common roles with a generalized view of their responsibilities and needs as stakeholders. To help facilitate a general understanding, we\u2019ve grouped some roles when responsibilities overlap across multiple teams:"), mdx("ul", null, mdx("li", null, mdx("h3", null, "Platform"), mdx("p", null, "Platform teams are responsible for deploying and managing their Kubernetes infrastructure. They are responsible for platform governance, operational efficiency, and developer agility. The platform team is the connective tissue among various teams like DevOps, SREs, developers, and network operations teams and therefore must address and balance the unique needs of a diverse group of stakeholders, or influencers, when choosing cloud native solutions.")), mdx("li", null, mdx("h3", null, "DevOps"), mdx("p", null, "DevOps teams are responsible for continuously deploying applications. They care about faster development and release cycles, CI/CD and automation, and canary and progressive rollout.")), mdx("li", null, mdx("h3", null, "SREs"), mdx("p", null, "Site reliability engineers must ensure application availability. They care about observability, incident response, and postmortems. SREs often act as architects for DevOps team and as such are often extensions of or directly belong to DevOps teams.")), mdx("li", null, mdx("h3", null, "Developers"), mdx("p", null, "Development teams are responsible for application performance and are focused on ensuring a seamless end-user experience, including troubleshooting and microservices discovery and routing. Application performance and troubleshooting is shared responsibility among multiple teams.")), mdx("li", null, mdx("h3", null, "NetOps "), mdx("p", null, "Network operations teams are responsible for ensuring stable, high-performing network connectivity, resiliency, security (e.g. web application firewalls and TLS), and are commonly focused on north-south traffic. They care about establishing networking policies and enforcing compliance; achieving management, control, and monitoring of the network; and gaining visibility for the purpose of resources and capacity planning.")), mdx("li", null, mdx("h3", null, "DevSecOps"), mdx("p", null, "DevSecOps teams care about ensuring a strong security posture and rely on automated tools to orchestrate security for infrastructure, applications, containers, and API gateways. DevSecOps works very closley with NetOps team for holistic secure posture."))), mdx("div", {
    className: "center"
  }, mdx("img", {
    src: Stakeholders,
    align: "center",
    alt: "Diverse Stakeholders have different needs"
  })), mdx("p", null, "Each role has nuanced responsibilities. Whether you have a single person or teams of people assigned to these roles, each role\u2019s function needs to be accounted for."), mdx("p", null, "It\u2019s important to note that these stakeholders are undergoing a transformation in their responsibilities \u2014 or at least a transformation in the way in which they perform their responsibilities. Depending upon your organization\u2019s size and structure, your stakeholders may have clearly defined lines of accountability or not among roles. As you adopt a cloud native approach to application deployment and delivery, you may find that the once-defined lines have blurred or that they are being redrawn. Be aware that the individuals who fill these roles typically go through a period of adjustment that can be unsettling until they adapt to their own and their teams\u2019 new identities."), mdx("p", null, "Your cloud native infrastructure should be as accommodating as possible to you, your team, and your collective responsibilities and process, so we encourage you to seek solutions that address the needs of all your stakeholders. Significantly, this includes evaluating different architectural models for as best fit for purpose. While every organization doesn\u2019t travel the same road to cloud native, every journey starts with initial architectural decisions \u2013 decisions which have substantial bearing on your path to cloud native."), mdx("h2", null, "Architecting Your Foundation the Right Way"), mdx("p", null, "Cloud native novices and experts alike find that designing their application delivery architectures is the most challenging part of building microservices. Your architectural choices will have a significant impact on your cloud native journey. Some architectures will provide greater or fewer benefits while others will prove less or more difficult to implement."), mdx("p", null, "Whether you are a cloud native pro or a novice, your selection of the right application delivery architecture will be one that balances the tradeoff between the greatest benefits and the simplicity needed to match your team\u2019s skill set. Figure 1 highlights four common application delivery architecture deployment models:"), mdx("div", {
    className: "center"
  }, mdx("img", {
    src: Graph,
    align: "center",
    alt: "Graph"
  })), mdx("div", {
    className: "intro"
  }, mdx("h3", {
    align: "center"
  }, "Tip: Traffic Directions"), mdx("p", null, "North-south (N-S) traffic refers to traffic between clients outside the Kubernetes cluster and services inside the cluster, while east-west (E-W) traffic refers to traffic between services inside the Kubernetes cluster.")), mdx("p", null, "Each of the deployment models in Figure 1 come with their list of pros and cons and are typically the point of focus of different teams. So how do you choose the right architecture for your deployment? Given the needs of your stakeholders and the many specifics involved in managing both north-south (N-S) and east-west (E-W) traffic, it is critical to assess the four different architectures with respect to the following areas:"), mdx("ul", null, mdx("li", null, "Application security "), mdx("li", null, "Observability "), mdx("li", null, "Continuous deployment "), mdx("li", null, "Scalability and performance "), mdx("li", null, "Open source tools integration "), mdx("li", null, "Service mesh & Istio  integration "), mdx("li", null, "IT skill set required ")), mdx("p", null, "Let\u2019s examine each of the four deployment models."), mdx("h3", null, "Two-Tier Ingress"), mdx("div", {
    className: "right"
  }, mdx("img", {
    src: TwoTier,
    align: "centre",
    alt: "Two Tier Ingress"
  })), mdx("p", null, "Two-tier ingress is the simplest architectural model to deploy to get teams up and running quickly. In this deployment model, Tthere are two layers of ADCs for N-S traffic ingress. The external ADC (at Tier 1), shown in green in Figure 2, provides L4 traffic management. Frequently, additional services are assigned to this ADC and can include web application firewall (WAF) and, secure sockets layer/transport layer security offload (SSL/TLS) functionality and authentication. A two-tier ingress deployment model is often managed by the existing network team (which is familiar with internet-facing traffic), and it can also be used as an ADC for other existing applications simultaneously."), mdx("p", null, "The second ADC (Tier 2), shown in yellow in Figure 2, handles L7 load balancing for N-S traffic. It is managed by the platform team and is used within the Kubernetes cluster to direct traffic to the correct node. Layer 7 attributes, like information in the URL and HTTP headers, can be used for traffic load-balancing decisions. The yellow ADC continuously receives updates about the availability and respective IP addresses of the microservices pods within the Kubernetes cluster and can make decisions about which pod is best able to handle the request. Deployed as a container inside the Kubernetes cluster, the yellow ADC can be deployed as a container with Citrix CPX or with another similar product."), mdx("p", null, "The E-W traffic between microservices pods is managed by kube-proxy, an open source, basic L4 load balancer with simple IP address-based round robin or least connection algorithm. kube-proxy lacks advanced features like Layer 7 load balancing, security, and observability, making it a blind spot for E-W traffic."), mdx("b", null, "Pros of Two-Tier Ingress"), mdx("p", null, "With the right proxy, SSL termination can be done at the edge, and traffic can be inspected easily. This enables N-S traffic to be comprehensively secured across L3-7. ADC collects and reports telemetry on the N-S application traffic it sees, which means that this architecture provides robust observability for N-S traffic. ADC can also also integrate with CI/CD tools like Spinnaker to provide traffic management to N-S traffic for excellent continuous deployment capabilities."), mdx("p", null, "Two-tier ingress scales very well for N-S traffic, as an example Citrix ADC reach hundreds of Gbps or even Tbps throughput through active-active clustering of ADCs if required. Integration with third-party tools like Prometheus, Grafana and Zipkin are supported out of the box with ADC, so you can continue to use the tools with which you are familiar to collect data and manage your systems for N-S traffic."), mdx("p", null, "The bifurcated design of two-tier ingress makes it relatively simple to implement demarcation points for control. The network team can own and manage the green ADC, and the platform team can work inside the Kubernetes environment. Neither the network team nor the platform team needs extensive retraining, which makes this architecture quick to implement."), mdx("b", null, "Cons of Two-Tier Ingress"), mdx("p", null, "The limitations of kube-proxy have made the use of third-party tools like Project Calico necessary to provide network policies, segmentation, and security support for inter-microservices communication. Similarly, kube-proxy's lack of detailed telemetry capabilities provides very little observability for E-W traffic. kube-proxy does not have the extensive APIs to integrate with continuous deployment tools, and its basic round-robin load balancing does not provide the granular load balancing needed to incorporate a CI/CD strategy inside the cluster. In general so you lack advanced load balancing tool set required to manage your inter-pod traffic. And kube-proxy does not currently integrate with service meshes, so there is no open source control plane integration for your E-W traffic management."), mdx("p", null, "Overall, two-tier ingress provides excellent services for N-S traffic but lacks control for E-W traffic. It is a popular architecture because it is simple to implement and is frequently a starting point for enterprises on their cloud native journey to microservices adoption."), mdx("div", {
    className: "note"
  }, "By default, kube-proxy uses iptables (x_tables kernel modules), so it does not perform as well as other proxies. You can configure kube-proxy to run in different modes by setting the --proxy-mode flag. Setting this flag to ipvs enables IPVS mode (netfilter kernel modules), which provides a much improved performance and also enables choice of load balancing algorithm through the --ipvs-scheduler parameter beyond the default round robin algorithm."), mdx("h3", null, "Unified Ingress"), mdx("div", {
    className: "right"
  }, mdx("img", {
    src: Unified,
    align: "centre",
    height: "50%",
    alt: "Unified Ingress"
  })), mdx("p", null, "Unified ingress is very similar to the two-tier ingress architecture, except that it unifies two tiers of application delivery controllers (ADCs) for N-S traffic into one. Reducing an ADC tier effectively removes one hop of latency for N-S traffic."), mdx("p", null, "Unified ingress has the same benefits and drawbacks as the two-tier ingress proxy architecture for security, observability, continuous deployment, scale and performance, open source tools support, and service mesh integration. Where it differs is in the skill sets required for implementation. With unified ingress, both the ADCs for N-S traffic and kube-proxy for the E-W traffic are managed by the platform team, who must be very network savvy to implement and manage this architecture."), mdx("p", null, "A unified ingress proxy architecture is capable of participating in the Kubernetes cluster\u2019s overlay network. This allows it to communicate directly with the microservices pods. Therefore, the platform team has to be knowledgeable about layers 3-7 of the network stack to take full advantage of this architecture."), mdx("p", null, "In summary, unified ingress proxy architecture is moderately simple to deploy compared to service mesh (which we will cover next), and it offers robust capabilities for N-S traffic, but has very limited functionality for E-W traffic due to the limitations of kube-proxy. A network-savvy platform team is key for implementing this architecture."), mdx("h3", null, "Service Mesh"), mdx("p", null, "A service mesh is a dedicated infrastructure layer to control how different parts of an application communicate with one another with one another. The service mesh landscape has exploded because service meshes offer the best observability, security, and fine-grained management for traffic among microservices \u2014 that is, for E-W traffic. As an additional layer of infrastructure, service meshes do bear additional complexity as a tradeoff to the value they provide."), mdx("div", {
    className: "left"
  }, mdx("img", {
    src: Servicemesh,
    align: "centre",
    alt: "Service Mesh"
  })), mdx("p", null, "A typical service mesh architecture is similar to the two-tier ingress proxy architecture for N-S traffic and offers the same rich benefits for N-S traffic. The key difference between service mesh and two-tier ingress, and where most of the value lies, is that service mesh employs a lightweight proxy as a sidecar to each microservice pod for E-W traffic. Microservices do not communicate directly: Communication among microservices happens via the sidecar, which enables inter-pod traffic to be inspected and managed as it enters and leaves the pods."), mdx("p", null, "By using proxy sidecars, service mesh offers the highest levels of observability, security, and fine-grained traffic management and control among microservices. Additionally, select repetitive microservice functions like retries and encryption can be offloaded to the sidecars. Despite each sidecar\u2019s being assigned its own memory and CPU resources, sidecars are typically lightweight."), mdx("p", null, "You have the option to use Citrix CPX as a sidecar. Sidecars, which are managed by the platform team and attached to each pod, create a highly scalable, distributed architecture, but they also add complexity because they result in more moving parts."), mdx("strong", null, "Pros of Service Mesh"), mdx("p", null, "The advantages of service mesh for N-S traffic are similar to those for two-tier ingress. Service mesh, however, brings added advantages for E-W traffic.The presence of sidecars enables you to set security policies and control communication among your microservices. You can mandate things like authentication, encryption, and rate limiting for APIs among microservices if required."), mdx("p", null, "Because E-W traffic is seen by the sidecars, there is much more telemetry to provide holistic observability for better insights and improved troubleshooting. Furthermore, Citrix CPX as a sidecar has well-defined APIs that integrate with myriad open source tools, so that you can use the observability tools you're used to. Sidecar APIs allow integration with CI/CD tools like Spinnaker."), mdx("p", null, "Similarly, sidecars will integrate with a service mesh control plane like Istio for E-W traffic. Additionally, repetitive functions like retries and encryption can be offloaded to the sidecars. The distributed nature of the sidecar means that the solution is scalable for such features as observability and security."), mdx("strong", null, "Cons of Service Mesh"), mdx("p", null, "The biggest drawback of a service mesh architecture is the complexity of implementation (managing hundreds or thousands of sidecars is not trivial). The learning curve can be steep for the platform team because there are so many moving parts. A sidecar for every pod adds to CPU and memory needs. Similarly, sidecars add latency. Latency, which may affect application performance, varies with proxy implementation and can be easily measured by the open source tool, Meshery. Citrix CPX as a sidecar offers latency as low as 1ms, whereas other solutions can add much more."), mdx("p", null, "Overall, a service mesh architecture provides excellent security, observability, and fine-grained traffic management for all traffic flows. The major downside is that it is complex to implement and manage."), mdx("h3", null, "Service Mesh Lite"), mdx("div", {
    className: "right"
  }, mdx("img", {
    src: Servicemeshlite,
    align: "centre",
    alt: "Service Mesh Lite"
  })), mdx("p", null, "What if you want service mesh-like benefits with much less complexity?  The answer is service mesh lite, which is a variant of service mesh."), mdx("p", null, "With a service mesh lite architecture, the ADC shown in green in Figure 5 is responsible for Layer 4-7 load balancing for N-S traffic to handle inbound requests and load balance to the right Kubernetes cluster. The green ADC may carry out SSL termination, web application firewalling, authentication, or other network services. It is managed by the networking team."), mdx("p", null, "Depending on isolation and scale requirements, service mesh lite proxy architecture uses a single or several ADCs (shown in yellow in Figure 5) that proxy communications among microservices pods to manage inter-pod (E-W) traffic rather than using individual sidecars attached to each pod. Proxies can be deployed per node or per namespace and are managed by platform teams."), mdx("strong", null, "Pros of Service Mesh Lite"), mdx("p", null, "Service mesh lite provides many of the same benefits as service mesh but reduces the overall complexity by only having a small set of proxy instances per cluster to manage the inter-pod traffic. Passing all E-W traffic through a small set of proxies provides the same advanced policy control, security, and fine-grained traffic management of a service mesh proxy architecture without all the complexity."), mdx("p", null, "Another advantage of service mesh lite is reduced latency as compared to service mesh because end user request goes through fewer  proxies. The main advantage is reduced complexity and the lower skill set required to implement compared to service mesh. Similar to two-tier ingress, the networking team can manage the green ADC, and the platform team can manage the yellow ADC. With service mesh lite, both teams can work in familiar environments and develop at their own speed."), mdx("strong", null, "Cons of Service Mesh Lite"), mdx("p", null, "Service mesh lite removes the implementation and management associated with service mesh, but the absence of a proxy per pod means that you sacrifice some functionality offload. For example, encryption for E-W must be implemented in each microservice, itself, if required."), mdx("p", null, "Overall, service mesh lite provides most of the service mesh features but with reduced complexity and a lower IT skill set requirement. Many organizations who started with the two-tier ingress architecture find it an easy transition to service mesh lite for the added benefits it brings to their E-W traffic including better observability, enhanced security, better integration with open source tools, and support for continuous deployment."), mdx("p", null, "So after reviewing the four architecture choices, you\u2019re probably wondering: What \u2018s the right architecture choice for my organization? There are no right or wrong answers. Like other architectural choices, proxy deployment models should be selected based on, in part, your application needs and your team structure and your team\u2019s skill set."), mdx("p", null, "Your model of proxy deployment is an important consideration, but just one of many when planning for your application delivery infrastructure. Ensuring that the application delivery components in your deployment are well-integrated into the cloud native ecosystem is your next consideration."), mdx("h2", null, "Openly Integrating with the Cloud Native Ecosystem "), mdx("p", null, "It\u2019s imperative that your various application delivery tools and processes, including your proxy, be well-integrated into commonplace cloud native infrastructure. It\u2019s no secret that much of today\u2019s innovation happens in open source software. And clouds, both public and private, are built upon open source software. So in most cases, your infrastructure will be comprised of popular open source infrastructure and tools that you have picked up on your journey to cloud native. To the extent this is the case, you\u2019ll find common integrations by categories in Figure below:"), mdx("div", {
    className: "center"
  }, mdx("img", {
    src: Comparison,
    align: "center",
    alt: ""
  }), mdx("p", null, "Figure - Key categories of consideration for proxy integration with Kubernetes platforms and open source tools")), mdx("p", null, "Cloud native environments make liberal use of open source software projects. Irrespective of which projects you use, suffice it to say that cloud native application delivery can\u2019t be done with just containers. The combination of containers, container orchestration, and a service mesh will get you very far. And alongside a CI/CD system, these components are the most significant and ubiquitously used components of cloud native infrastructure. Integration with each of these categories of cloud native infrastructure is critical so that developers and operators can design and run systems that communicate and inter-operate as a whole. The fact that these bedrocks of cloud native infrastructure are open source unlocks their ability to be integrated."), mdx("p", null, "At the heart of the cloud native ecosystem is the extensible and scalable orchestration infrastructure that is Kubernetes. The cloud native ecosystem (both open source and closed source) extends Kubernetes by writing custom resource definitions (CRDs) and associated controllers. The controllers and CRDs give operators a Kubernetes-native way to manage all parts of their platforms \u2014 both open source and closed source. This integration affords tool unification and powerful composable intent-based primitives that truly enable a software-defined platform."), mdx("p", null, "Critical to the speed of delivery is an early investment in continuous integration/continuous delivery (CI/CD). It\u2019s likely you have already wrangled continuous integration. Continuous deployment pipelines are your next step in seeing that changes to your source code automatically result in a new container being built and a new version of your microservice being tested and deployed to staging and eventually to production."), mdx("p", null, "For many, the notion that CI/CD is an area of early investment is counterintuitive, and they find it hard to swallow the upfront engineering effort required to get a solid pipeline in place. The sooner CI/CD basics are implemented, however, the sooner the dividends start paying out. We will cover advanced continuous delivery considerations later in this white paper."), mdx("p", null, "With cloud native infrastructure\u2019s being inherently dynamic (in contrast to infrastructure not driven by APIs,) the ability to observe cloud native infrastructure and its workloads is also necessary. Software is written with functionality and debugging in mind. Most often, developers use logging as the primary method for debugging their applications. Integration with Elasticsearch and Kibana is key here."), mdx("p", null, "Performance counters are another way to track application behavior and performance. Akin to SNMP for physical and virtual network monitoring, the equivalent cloud native \u201Cstandard\u201D is the use of Prometheus and Grafana, so it\u2019s important that your application delivery solution integrate with these tools. Currently there is no recognized standard for cloud native application performance monitoring metrics."), mdx("div", {
    className: "intro"
  }, mdx("h3", {
    align: "center"
  }, "OpenMetrics"), mdx("p", null, "The cloud native ecosystem needs a common format for the exchange of metrics. Observability pains grow with the release of each newly instrumented service that presents its own metric format. OpenMetrics is an effort to create an open standard for transmitting metrics at scale, with support for both text representation and protocolbBuffers. OpenMetrics builds on Prometheus\u2019s exposition format, popular telemetry formats, and protocols used in infrastructure and application monitoring.")), mdx("p", null, "Irrespective of the metrics format, there are a few metrics that have been identified as key indicators of the health of a cloud native application (that is, the health of a service): latency, traffic, errors, and saturation. Your application delivery solution should assist in producing these signals as well as provide support for the tracing of your distributed, cloud native workloads."), mdx("p", null, "The aforementioned integrations with open source tools enable loosely coupled systems that are resilient, manageable, and observable. Citrix ADC also embodies these characteristics. All of the infrastructure integrations detailed here depend upon APIs for interchange and interoperability. Cloud native applications, too, are centered around declarative APIs to interface with the infrastructure and serve user-facing workloads."), mdx("p", null, "The endpoints that your APIs expose are now being managed by open source service meshes. Service meshes deliver the next generation of networking designed for cloud native applications. At the core of a service mesh is its data plane (its collection of proxies). Proxy selection criteria and deployment model tradeoffs are our next area of consideration."), mdx("p", null, mdx("em", {
    parentName: "p"
  }, mdx("strong", {
    parentName: "em"
  }, " Check out the topic ", mdx(Link, {
    to: "/resources/service-mesh/choosing-the-perfect-proxy",
    mdxType: "Link"
  }, "Choosing the Perfect Proxy"), " to learn more! ")))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/service-mesh/7-key-considerations-for-microservices-based-application-delivery</link><guid isPermaLink="false">https://layer5.io/resources/service-mesh/7-key-considerations-for-microservices-based-application-delivery</guid><pubDate>Wed, 15 Sep 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/d933a542c39e21f591328eb08d0ce2b2/citrix-path-to-cloud-native.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;h2&gt;The Role of Application Delivery in Your Cloud Native Journey&lt;/h2&gt;&lt;p&gt;As digital transformation is changing how your organization conducts business, so is it changing how your products and services are delivered. The infrastructure and practices by which your software is continuously deployed and operated — your application delivery — is the fulcrum of your organization’s digital transformation. Likely you are progressing on your cloud native journey — that is, transitioning from monolithic to container-based microservices architectures with the goal of achieving agility, portability, and on-demand scalability. Kubernetes is the platform of choice for many, providing the automation and control necessary to manage microservices-based applications at scale and with high velocity.&lt;/p&gt;&lt;p&gt;With the network part and parcel to each and every service request in your microservices-based application, it may come as no surprise that at the core of application delivery is your application delivery controller, an intelligent proxy that accelerates and manages application delivery. With no standard definition of what an application delivery controller does, the capabilities of intelligent proxies vary broadly. And so in this white paper, we’ll explore application delivery controllers as they relate to your architecture choices, your use of Kubernetes platforms, and open source tools.&lt;/p&gt;&lt;h2&gt;7 Key Considerations for Microservices-Based Application Delivery&lt;/h2&gt;&lt;p&gt;Before embarking on your cloud native journey, it is essential to critically assess your organization’s readiness with regard to skill set so that you can choose the solutions that best fit the business objective you are seeking to meet in context of your ability to do so. There are seven key considerations to address when planning your microservices-based application delivery design:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Architecting your foundation the right way &lt;/li&gt;&lt;li&gt;Openly integrating with the cloud native ecosystem&lt;/li&gt;&lt;li&gt;Choosing the perfect proxy&lt;/li&gt;&lt;li&gt;Securing your applications and APIs&lt;/li&gt;&lt;li&gt;Enabling CI/CD and canary deployment with advanced traffic steering &lt;/li&gt;&lt;li&gt;Achieving holistic observability&lt;/li&gt;&lt;li&gt;Managing monoliths and microservices&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A thorough evaluation of these seven considerations is best done with specific tasks and goals in mind. Depending on the size and diversity of your organization, you may need to account for a variety of stakeholders’ needs — that is, tasks and goals that differ based on role and responsibility. In context of application delivery, let’s survey the most common roles with a generalized view of their responsibilities and needs as stakeholders. To help facilitate a general understanding, we’ve grouped some roles when responsibilities overlap across multiple teams:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h3&gt;Platform&lt;/h3&gt;&lt;p&gt;Platform teams are responsible for deploying and managing their Kubernetes infrastructure. They are responsible for platform governance, operational efficiency, and developer agility. The platform team is the connective tissue among various teams like DevOps, SREs, developers, and network operations teams and therefore must address and balance the unique needs of a diverse group of stakeholders, or influencers, when choosing cloud native solutions.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;h3&gt;DevOps&lt;/h3&gt;&lt;p&gt;DevOps teams are responsible for continuously deploying applications. They care about faster development and release cycles, CI/CD and automation, and canary and progressive rollout.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;h3&gt;SREs&lt;/h3&gt;&lt;p&gt;Site reliability engineers must ensure application availability. They care about observability, incident response, and postmortems. SREs often act as architects for DevOps team and as such are often extensions of or directly belong to DevOps teams.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;h3&gt;Developers&lt;/h3&gt;&lt;p&gt;Development teams are responsible for application performance and are focused on ensuring a seamless end-user experience, including troubleshooting and microservices discovery and routing. Application performance and troubleshooting is shared responsibility among multiple teams.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;h3&gt;NetOps &lt;/h3&gt;&lt;p&gt;Network operations teams are responsible for ensuring stable, high-performing network connectivity, resiliency, security (e.g. web application firewalls and TLS), and are commonly focused on north-south traffic. They care about establishing networking policies and enforcing compliance; achieving management, control, and monitoring of the network; and gaining visibility for the purpose of resources and capacity planning.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;h3&gt;DevSecOps&lt;/h3&gt;&lt;p&gt;DevSecOps teams care about ensuring a strong security posture and rely on automated tools to orchestrate security for infrastructure, applications, containers, and API gateways. DevSecOps works very closley with NetOps team for holistic secure posture.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;center&quot;&gt;&lt;img src=&quot;static/figure1-6657bcb989b9255c6f56776e21b2b9ee.png&quot; align=&quot;center&quot; alt=&quot;Diverse Stakeholders have different needs&quot;/&gt;&lt;/div&gt;&lt;p&gt;Each role has nuanced responsibilities. Whether you have a single person or teams of people assigned to these roles, each role’s function needs to be accounted for.&lt;/p&gt;&lt;p&gt;It’s important to note that these stakeholders are undergoing a transformation in their responsibilities — or at least a transformation in the way in which they perform their responsibilities. Depending upon your organization’s size and structure, your stakeholders may have clearly defined lines of accountability or not among roles. As you adopt a cloud native approach to application deployment and delivery, you may find that the once-defined lines have blurred or that they are being redrawn. Be aware that the individuals who fill these roles typically go through a period of adjustment that can be unsettling until they adapt to their own and their teams’ new identities.&lt;/p&gt;&lt;p&gt;Your cloud native infrastructure should be as accommodating as possible to you, your team, and your collective responsibilities and process, so we encourage you to seek solutions that address the needs of all your stakeholders. Significantly, this includes evaluating different architectural models for as best fit for purpose. While every organization doesn’t travel the same road to cloud native, every journey starts with initial architectural decisions – decisions which have substantial bearing on your path to cloud native.&lt;/p&gt;&lt;h2&gt;Architecting Your Foundation the Right Way&lt;/h2&gt;&lt;p&gt;Cloud native novices and experts alike find that designing their application delivery architectures is the most challenging part of building microservices. Your architectural choices will have a significant impact on your cloud native journey. Some architectures will provide greater or fewer benefits while others will prove less or more difficult to implement.&lt;/p&gt;&lt;p&gt;Whether you are a cloud native pro or a novice, your selection of the right application delivery architecture will be one that balances the tradeoff between the greatest benefits and the simplicity needed to match your team’s skill set. Figure 1 highlights four common application delivery architecture deployment models:&lt;/p&gt;&lt;div class=&quot;center&quot;&gt;&lt;img src=&quot;static/Graph1-922f70168e5eac45ea8da896ca6e827d.png&quot; align=&quot;center&quot; alt=&quot;Graph&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;intro&quot;&gt;&lt;h3 align=&quot;center&quot;&gt;Tip: Traffic Directions&lt;/h3&gt;&lt;p&gt;North-south (N-S) traffic refers to traffic between clients outside the Kubernetes cluster and services inside the cluster, while east-west (E-W) traffic refers to traffic between services inside the Kubernetes cluster.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Each of the deployment models in Figure 1 come with their list of pros and cons and are typically the point of focus of different teams. So how do you choose the right architecture for your deployment? Given the needs of your stakeholders and the many specifics involved in managing both north-south (N-S) and east-west (E-W) traffic, it is critical to assess the four different architectures with respect to the following areas:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Application security &lt;/li&gt;&lt;li&gt;Observability &lt;/li&gt;&lt;li&gt;Continuous deployment &lt;/li&gt;&lt;li&gt;Scalability and performance &lt;/li&gt;&lt;li&gt;Open source tools integration &lt;/li&gt;&lt;li&gt;Service mesh &amp;amp; Istio  integration &lt;/li&gt;&lt;li&gt;IT skill set required &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Let’s examine each of the four deployment models.&lt;/p&gt;&lt;h3&gt;Two-Tier Ingress&lt;/h3&gt;&lt;div class=&quot;right&quot;&gt;&lt;img src=&quot;static/citrix-two-tier-ingress-5c271192e7c2aec7e0cc115d2796f66e.svg&quot; align=&quot;centre&quot; alt=&quot;Two Tier Ingress&quot;/&gt;&lt;/div&gt;&lt;p&gt;Two-tier ingress is the simplest architectural model to deploy to get teams up and running quickly. In this deployment model, Tthere are two layers of ADCs for N-S traffic ingress. The external ADC (at Tier 1), shown in green in Figure 2, provides L4 traffic management. Frequently, additional services are assigned to this ADC and can include web application firewall (WAF) and, secure sockets layer/transport layer security offload (SSL/TLS) functionality and authentication. A two-tier ingress deployment model is often managed by the existing network team (which is familiar with internet-facing traffic), and it can also be used as an ADC for other existing applications simultaneously.&lt;/p&gt;&lt;p&gt;The second ADC (Tier 2), shown in yellow in Figure 2, handles L7 load balancing for N-S traffic. It is managed by the platform team and is used within the Kubernetes cluster to direct traffic to the correct node. Layer 7 attributes, like information in the URL and HTTP headers, can be used for traffic load-balancing decisions. The yellow ADC continuously receives updates about the availability and respective IP addresses of the microservices pods within the Kubernetes cluster and can make decisions about which pod is best able to handle the request. Deployed as a container inside the Kubernetes cluster, the yellow ADC can be deployed as a container with Citrix CPX or with another similar product.&lt;/p&gt;&lt;p&gt;The E-W traffic between microservices pods is managed by kube-proxy, an open source, basic L4 load balancer with simple IP address-based round robin or least connection algorithm. kube-proxy lacks advanced features like Layer 7 load balancing, security, and observability, making it a blind spot for E-W traffic.&lt;/p&gt;&lt;b&gt;Pros of Two-Tier Ingress&lt;/b&gt;&lt;p&gt;With the right proxy, SSL termination can be done at the edge, and traffic can be inspected easily. This enables N-S traffic to be comprehensively secured across L3-7. ADC collects and reports telemetry on the N-S application traffic it sees, which means that this architecture provides robust observability for N-S traffic. ADC can also also integrate with CI/CD tools like Spinnaker to provide traffic management to N-S traffic for excellent continuous deployment capabilities.&lt;/p&gt;&lt;p&gt;Two-tier ingress scales very well for N-S traffic, as an example Citrix ADC reach hundreds of Gbps or even Tbps throughput through active-active clustering of ADCs if required. Integration with third-party tools like Prometheus, Grafana and Zipkin are supported out of the box with ADC, so you can continue to use the tools with which you are familiar to collect data and manage your systems for N-S traffic.&lt;/p&gt;&lt;p&gt;The bifurcated design of two-tier ingress makes it relatively simple to implement demarcation points for control. The network team can own and manage the green ADC, and the platform team can work inside the Kubernetes environment. Neither the network team nor the platform team needs extensive retraining, which makes this architecture quick to implement.&lt;/p&gt;&lt;b&gt;Cons of Two-Tier Ingress&lt;/b&gt;&lt;p&gt;The limitations of kube-proxy have made the use of third-party tools like Project Calico necessary to provide network policies, segmentation, and security support for inter-microservices communication. Similarly, kube-proxy&amp;#x27;s lack of detailed telemetry capabilities provides very little observability for E-W traffic. kube-proxy does not have the extensive APIs to integrate with continuous deployment tools, and its basic round-robin load balancing does not provide the granular load balancing needed to incorporate a CI/CD strategy inside the cluster. In general so you lack advanced load balancing tool set required to manage your inter-pod traffic. And kube-proxy does not currently integrate with service meshes, so there is no open source control plane integration for your E-W traffic management.&lt;/p&gt;&lt;p&gt;Overall, two-tier ingress provides excellent services for N-S traffic but lacks control for E-W traffic. It is a popular architecture because it is simple to implement and is frequently a starting point for enterprises on their cloud native journey to microservices adoption.&lt;/p&gt;&lt;div class=&quot;note&quot;&gt;By default, kube-proxy uses iptables (x_tables kernel modules), so it does not perform as well as other proxies. You can configure kube-proxy to run in different modes by setting the --proxy-mode flag. Setting this flag to ipvs enables IPVS mode (netfilter kernel modules), which provides a much improved performance and also enables choice of load balancing algorithm through the --ipvs-scheduler parameter beyond the default round robin algorithm.&lt;/div&gt;&lt;h3&gt;Unified Ingress&lt;/h3&gt;&lt;div class=&quot;right&quot;&gt;&lt;img src=&quot;static/citrix-unified-ingress-e24b73fc8f6ed89ecae0a73a8483f8d8.svg&quot; align=&quot;centre&quot; height=&quot;50%&quot; alt=&quot;Unified Ingress&quot;/&gt;&lt;/div&gt;&lt;p&gt;Unified ingress is very similar to the two-tier ingress architecture, except that it unifies two tiers of application delivery controllers (ADCs) for N-S traffic into one. Reducing an ADC tier effectively removes one hop of latency for N-S traffic.&lt;/p&gt;&lt;p&gt;Unified ingress has the same benefits and drawbacks as the two-tier ingress proxy architecture for security, observability, continuous deployment, scale and performance, open source tools support, and service mesh integration. Where it differs is in the skill sets required for implementation. With unified ingress, both the ADCs for N-S traffic and kube-proxy for the E-W traffic are managed by the platform team, who must be very network savvy to implement and manage this architecture.&lt;/p&gt;&lt;p&gt;A unified ingress proxy architecture is capable of participating in the Kubernetes cluster’s overlay network. This allows it to communicate directly with the microservices pods. Therefore, the platform team has to be knowledgeable about layers 3-7 of the network stack to take full advantage of this architecture.&lt;/p&gt;&lt;p&gt;In summary, unified ingress proxy architecture is moderately simple to deploy compared to service mesh (which we will cover next), and it offers robust capabilities for N-S traffic, but has very limited functionality for E-W traffic due to the limitations of kube-proxy. A network-savvy platform team is key for implementing this architecture.&lt;/p&gt;&lt;h3&gt;Service Mesh&lt;/h3&gt;&lt;p&gt;A service mesh is a dedicated infrastructure layer to control how different parts of an application communicate with one another with one another. The service mesh landscape has exploded because service meshes offer the best observability, security, and fine-grained management for traffic among microservices — that is, for E-W traffic. As an additional layer of infrastructure, service meshes do bear additional complexity as a tradeoff to the value they provide.&lt;/p&gt;&lt;div class=&quot;left&quot;&gt;&lt;img src=&quot;static/citrix-service-mesh-9424773542766dde1581086f1363a84b.svg&quot; align=&quot;centre&quot; alt=&quot;Service Mesh&quot;/&gt;&lt;/div&gt;&lt;p&gt;A typical service mesh architecture is similar to the two-tier ingress proxy architecture for N-S traffic and offers the same rich benefits for N-S traffic. The key difference between service mesh and two-tier ingress, and where most of the value lies, is that service mesh employs a lightweight proxy as a sidecar to each microservice pod for E-W traffic. Microservices do not communicate directly: Communication among microservices happens via the sidecar, which enables inter-pod traffic to be inspected and managed as it enters and leaves the pods.&lt;/p&gt;&lt;p&gt;By using proxy sidecars, service mesh offers the highest levels of observability, security, and fine-grained traffic management and control among microservices. Additionally, select repetitive microservice functions like retries and encryption can be offloaded to the sidecars. Despite each sidecar’s being assigned its own memory and CPU resources, sidecars are typically lightweight.&lt;/p&gt;&lt;p&gt;You have the option to use Citrix CPX as a sidecar. Sidecars, which are managed by the platform team and attached to each pod, create a highly scalable, distributed architecture, but they also add complexity because they result in more moving parts.&lt;/p&gt;&lt;strong&gt;Pros of Service Mesh&lt;/strong&gt;&lt;p&gt;The advantages of service mesh for N-S traffic are similar to those for two-tier ingress. Service mesh, however, brings added advantages for E-W traffic.The presence of sidecars enables you to set security policies and control communication among your microservices. You can mandate things like authentication, encryption, and rate limiting for APIs among microservices if required.&lt;/p&gt;&lt;p&gt;Because E-W traffic is seen by the sidecars, there is much more telemetry to provide holistic observability for better insights and improved troubleshooting. Furthermore, Citrix CPX as a sidecar has well-defined APIs that integrate with myriad open source tools, so that you can use the observability tools you&amp;#x27;re used to. Sidecar APIs allow integration with CI/CD tools like Spinnaker.&lt;/p&gt;&lt;p&gt;Similarly, sidecars will integrate with a service mesh control plane like Istio for E-W traffic. Additionally, repetitive functions like retries and encryption can be offloaded to the sidecars. The distributed nature of the sidecar means that the solution is scalable for such features as observability and security.&lt;/p&gt;&lt;strong&gt;Cons of Service Mesh&lt;/strong&gt;&lt;p&gt;The biggest drawback of a service mesh architecture is the complexity of implementation (managing hundreds or thousands of sidecars is not trivial). The learning curve can be steep for the platform team because there are so many moving parts. A sidecar for every pod adds to CPU and memory needs. Similarly, sidecars add latency. Latency, which may affect application performance, varies with proxy implementation and can be easily measured by the open source tool, Meshery. Citrix CPX as a sidecar offers latency as low as 1ms, whereas other solutions can add much more.&lt;/p&gt;&lt;p&gt;Overall, a service mesh architecture provides excellent security, observability, and fine-grained traffic management for all traffic flows. The major downside is that it is complex to implement and manage.&lt;/p&gt;&lt;h3&gt;Service Mesh Lite&lt;/h3&gt;&lt;div class=&quot;right&quot;&gt;&lt;img src=&quot;static/citrix-service-mesh-lite-50ff6a2997a34a7d742ad9f5dd996e67.svg&quot; align=&quot;centre&quot; alt=&quot;Service Mesh Lite&quot;/&gt;&lt;/div&gt;&lt;p&gt;What if you want service mesh-like benefits with much less complexity?  The answer is service mesh lite, which is a variant of service mesh.&lt;/p&gt;&lt;p&gt;With a service mesh lite architecture, the ADC shown in green in Figure 5 is responsible for Layer 4-7 load balancing for N-S traffic to handle inbound requests and load balance to the right Kubernetes cluster. The green ADC may carry out SSL termination, web application firewalling, authentication, or other network services. It is managed by the networking team.&lt;/p&gt;&lt;p&gt;Depending on isolation and scale requirements, service mesh lite proxy architecture uses a single or several ADCs (shown in yellow in Figure 5) that proxy communications among microservices pods to manage inter-pod (E-W) traffic rather than using individual sidecars attached to each pod. Proxies can be deployed per node or per namespace and are managed by platform teams.&lt;/p&gt;&lt;strong&gt;Pros of Service Mesh Lite&lt;/strong&gt;&lt;p&gt;Service mesh lite provides many of the same benefits as service mesh but reduces the overall complexity by only having a small set of proxy instances per cluster to manage the inter-pod traffic. Passing all E-W traffic through a small set of proxies provides the same advanced policy control, security, and fine-grained traffic management of a service mesh proxy architecture without all the complexity.&lt;/p&gt;&lt;p&gt;Another advantage of service mesh lite is reduced latency as compared to service mesh because end user request goes through fewer  proxies. The main advantage is reduced complexity and the lower skill set required to implement compared to service mesh. Similar to two-tier ingress, the networking team can manage the green ADC, and the platform team can manage the yellow ADC. With service mesh lite, both teams can work in familiar environments and develop at their own speed.&lt;/p&gt;&lt;strong&gt;Cons of Service Mesh Lite&lt;/strong&gt;&lt;p&gt;Service mesh lite removes the implementation and management associated with service mesh, but the absence of a proxy per pod means that you sacrifice some functionality offload. For example, encryption for E-W must be implemented in each microservice, itself, if required.&lt;/p&gt;&lt;p&gt;Overall, service mesh lite provides most of the service mesh features but with reduced complexity and a lower IT skill set requirement. Many organizations who started with the two-tier ingress architecture find it an easy transition to service mesh lite for the added benefits it brings to their E-W traffic including better observability, enhanced security, better integration with open source tools, and support for continuous deployment.&lt;/p&gt;&lt;p&gt;So after reviewing the four architecture choices, you’re probably wondering: What ‘s the right architecture choice for my organization? There are no right or wrong answers. Like other architectural choices, proxy deployment models should be selected based on, in part, your application needs and your team structure and your team’s skill set.&lt;/p&gt;&lt;p&gt;Your model of proxy deployment is an important consideration, but just one of many when planning for your application delivery infrastructure. Ensuring that the application delivery components in your deployment are well-integrated into the cloud native ecosystem is your next consideration.&lt;/p&gt;&lt;h2&gt;Openly Integrating with the Cloud Native Ecosystem &lt;/h2&gt;&lt;p&gt;It’s imperative that your various application delivery tools and processes, including your proxy, be well-integrated into commonplace cloud native infrastructure. It’s no secret that much of today’s innovation happens in open source software. And clouds, both public and private, are built upon open source software. So in most cases, your infrastructure will be comprised of popular open source infrastructure and tools that you have picked up on your journey to cloud native. To the extent this is the case, you’ll find common integrations by categories in Figure below:&lt;/p&gt;&lt;div class=&quot;center&quot;&gt;&lt;img src=&quot;static/citrix-oss-integration-categories-a43533cd84808f3554b20eb4c7b6f1b7.svg&quot; align=&quot;center&quot; alt=&quot;&quot;/&gt;&lt;p&gt;Figure - Key categories of consideration for proxy integration with Kubernetes platforms and open source tools&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Cloud native environments make liberal use of open source software projects. Irrespective of which projects you use, suffice it to say that cloud native application delivery can’t be done with just containers. The combination of containers, container orchestration, and a service mesh will get you very far. And alongside a CI/CD system, these components are the most significant and ubiquitously used components of cloud native infrastructure. Integration with each of these categories of cloud native infrastructure is critical so that developers and operators can design and run systems that communicate and inter-operate as a whole. The fact that these bedrocks of cloud native infrastructure are open source unlocks their ability to be integrated.&lt;/p&gt;&lt;p&gt;At the heart of the cloud native ecosystem is the extensible and scalable orchestration infrastructure that is Kubernetes. The cloud native ecosystem (both open source and closed source) extends Kubernetes by writing custom resource definitions (CRDs) and associated controllers. The controllers and CRDs give operators a Kubernetes-native way to manage all parts of their platforms — both open source and closed source. This integration affords tool unification and powerful composable intent-based primitives that truly enable a software-defined platform.&lt;/p&gt;&lt;p&gt;Critical to the speed of delivery is an early investment in continuous integration/continuous delivery (CI/CD). It’s likely you have already wrangled continuous integration. Continuous deployment pipelines are your next step in seeing that changes to your source code automatically result in a new container being built and a new version of your microservice being tested and deployed to staging and eventually to production.&lt;/p&gt;&lt;p&gt;For many, the notion that CI/CD is an area of early investment is counterintuitive, and they find it hard to swallow the upfront engineering effort required to get a solid pipeline in place. The sooner CI/CD basics are implemented, however, the sooner the dividends start paying out. We will cover advanced continuous delivery considerations later in this white paper.&lt;/p&gt;&lt;p&gt;With cloud native infrastructure’s being inherently dynamic (in contrast to infrastructure not driven by APIs,) the ability to observe cloud native infrastructure and its workloads is also necessary. Software is written with functionality and debugging in mind. Most often, developers use logging as the primary method for debugging their applications. Integration with Elasticsearch and Kibana is key here.&lt;/p&gt;&lt;p&gt;Performance counters are another way to track application behavior and performance. Akin to SNMP for physical and virtual network monitoring, the equivalent cloud native “standard” is the use of Prometheus and Grafana, so it’s important that your application delivery solution integrate with these tools. Currently there is no recognized standard for cloud native application performance monitoring metrics.&lt;/p&gt;&lt;div class=&quot;intro&quot;&gt;&lt;h3 align=&quot;center&quot;&gt;OpenMetrics&lt;/h3&gt;&lt;p&gt;The cloud native ecosystem needs a common format for the exchange of metrics. Observability pains grow with the release of each newly instrumented service that presents its own metric format. OpenMetrics is an effort to create an open standard for transmitting metrics at scale, with support for both text representation and protocolbBuffers. OpenMetrics builds on Prometheus’s exposition format, popular telemetry formats, and protocols used in infrastructure and application monitoring.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Irrespective of the metrics format, there are a few metrics that have been identified as key indicators of the health of a cloud native application (that is, the health of a service): latency, traffic, errors, and saturation. Your application delivery solution should assist in producing these signals as well as provide support for the tracing of your distributed, cloud native workloads.&lt;/p&gt;&lt;p&gt;The aforementioned integrations with open source tools enable loosely coupled systems that are resilient, manageable, and observable. Citrix ADC also embodies these characteristics. All of the infrastructure integrations detailed here depend upon APIs for interchange and interoperability. Cloud native applications, too, are centered around declarative APIs to interface with the infrastructure and serve user-facing workloads.&lt;/p&gt;&lt;p&gt;The endpoints that your APIs expose are now being managed by open source service meshes. Service meshes deliver the next generation of networking designed for cloud native applications. At the core of a service mesh is its data plane (its collection of proxies). Proxy selection criteria and deployment model tradeoffs are our next area of consideration.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt; Check out the topic &lt;a href=&quot;/resources/service-mesh/choosing-the-perfect-proxy&quot;&gt;Choosing the Perfect Proxy&lt;/a&gt; to learn more! &lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Service Proxy]]></title><description><![CDATA[var _excluded = ["components"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  "title": "Service Proxy",
  "thumbnail": "../../../../assets/images/service-mesh-icons/envoy/icon/color/envoy-icon-color.svg",
  "date": "2021-09-11 10:30:05 -0530",
  "type": "Article",
  "category": "Service Mesh",
  "mesh": "Istio",
  "technology": "Kubernetes",
  "tags": ["Istio", "Envoy"],
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("h3", null, "What Is a Service Proxy?"), mdx("p", null, "A service proxy is a client-side mediator that handles requests for a service. The service proxy allows applications to send and receive messages as method calls via a channel. Service proxy connections can be created as needed or persist open connections to facilitate pooling. Applications are oblivious to the data plane's existence. As applications conduct service-to-service calls, service proxies are transparently inserted. Inbound (ingress) and outbound (egress) cluster network traffic are handled by data planes. Whether traffic is entering the mesh (ingressing) or leaving the mesh (egressing), application service traffic is directed first to the service proxy for handling. In Istio, traffic is transparently intercepted using iptables rules and redirected to the service proxy."), mdx("p", null, "Remember that Pilot configures traffic policy and service proxies implement it. The data plane is a collection of service proxies. Service proxies are responsible for health checks, routing, load balancing, authentication, authorization, and the production of observable signals by intercepting every packet in the request. As the service may change from location to location, proxies provide indirection so that clients may point to the same location (e.g., proxy.example.com), representing a permanent reference. They add resilience to distributed systems."), mdx("h3", null, "Envoy Proxy Overview"), mdx("p", null, "The versatile and performant Envoy has evolved as an open source, application-level service proxy, living up to its tagline as the universal data plane API. Lyft developed Envoy in order to solve major distributed systems problems. Envoy has had broad reuse\xA0and has been integrated into the cloud native ecosystem."), mdx("h4", null, "Why Envoy?"), mdx("p", null, "Envoy was originally intended to be used as an edge proxy rather than a sidecar. Envoy transitioned to the sidecar pattern over time. The concept of hot reloads vs. hot restarts was at the center of the decision for the Istio project to leverage Envoy. Envoy's runtime configuration has always been API-driven, allowing it to drain and hot reload its own process with an old configuration with a new process and new configuration (displacing itself). Envoy achieves hot reloading of its processes by shared memory and communication through a Unix Domain Socket (UDS), in a manner that resembles GitHub's tool for zero-downtime HAProxy reloads. Additionally, and uniquely, Envoy offers an Aggregated Discovery Service (ADS) for delivering the data for each xDS API."), mdx("h4", null, "HTTP/2 and gRPC"), mdx("p", null, "Envoy stood apart from other proxies at the time because of its early support for HTTP/2 and gRPC. HTTP/2 significantly improves on HTTP/1.1 in that HTTP/2 enables request multiplexing over a single TCP connection. Proxies that support HTTP/2 benefit from the reduced overhead of combining several connections into a single one. HTTP/2 allows clients to send numerous parallel requests and load resources preemptively using server-push."), mdx("p", null, "Envoy is HTTP/1.1 and HTTP/2 compatible, including proxying compatibility for both downstream and upstream protocols. This means Envoy can accept incoming HTTP/2 connections and proxy them to upstream HTTP/2 clusters, but it can also take HTTP/1.1 connections and proxy them to HTTP/2 clusters (and vice-versa)."), mdx("p", null, "gRPC is an RPC protocol that uses protocol buffers on top of HTTP/2. Envoy supports gRPC natively (over HTTP/2) and can also bridge an HTTP/1.1 client to gRPC. Envoy has the ability to operate as a gRPC-JSON transcoder. The gRPC-JSON transcoder functionality allows a client to send HTTP/1.1 requests with a JSON payload to Envoy, which translates the request into the corresponding gRPC call and subsequently translates the response message back into JSON. These are powerful capabilities (and challenging to execute correctly), which set Envoy apart from other service proxies."), mdx("h3", null, "Envoy in Istio"), mdx("p", null, "As an out of process proxy, Envoy transparently forms the base unit of the mesh. Akin to proxies in other service meshes, it is the workhorse of Istio. Istio deploys Envoy sidecarred to application services. Identified as ", mdx("code", null, "istio-proxy"), " in deployment files, Envoy does not require root privileges to run, but runs as user 1337 (non root)."), mdx("h3", null, "Sidecar Injection (or Sidecarring)"), mdx("p", null, "There are two steps to adding a service proxy: sidecar injection and network capture. Sidecar injection is the method of adding a proxy to a given application. Network capture is the method of directing inbound traffic to the proxy (instead of the application) and outbound traffic to the proxy (instead of directly back to the client or directly to subsequent upstream application services)."), mdx("h4", null, "Manual Sidecar Injection"), mdx("p", null, mdx("code", null, "Istioctl"), " can be used to manually inject\xA0the Envoy sidecar definition into Kubernetes manifests manually. Use ", mdx("code", null, "istioctl"), "\u2019s ", mdx("code", null, "kube-inject"), " capability to manually inject the sidecar into deployment manifests by manipulating yaml."), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "$ istioctl kube-inject -f samples/sleep/sleep.yaml | kubectl apply -f -\n")), mdx("p", null, "You can update Kubernetes specifications on-the-fly at the time of applying them to Kubernetes for scheduling. Alternatively, you might use the ", mdx("code", null, "istioctl kube-inject"), " utility like so:"), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "$ kubectl apply -f <(istioctl kube-inject -f <resource.yaml>)\n")), mdx("p", null, "If you don\u2019t have the source manifests available, you can update an existing Kubernetes deployment to bring its services onto the mesh:"), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "$ kubectl get deployment -o yaml | istioctl kube-inject -f - | kubectl apply -f -\n")), mdx("p", null, "Let's look at an example of an existing application being onboarded onto the mesh. Let's use a freshly installed copy of BookInfo as an example of a Kubernetes application that isn't\xA0deployed on\xA0the service mesh yet. We'll start with\xA0exploring BookInfo's pods."), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "$ kubectl get pods\nNAME                              READY   STATUS    RESTARTS   AGE\ndetails-v1-69658dcf78-nghss       1/1     Running   0          43m\nproductpage-v1-6b6798cb84-nzfhd   1/1     Running   0          43m\nratings-v1-6f97d68b6-v6wj6        1/1     Running   0          43m\nreviews-v1-7c98dcd6dc-b974c       1/1     Running   0          43m\nreviews-v2-6677766d47-2qz2g       1/1     Running   0          43m\nreviews-v3-79f9bcc54c-sjndp       1/1     Running   0          43m\n")), mdx("p", null, "The atomic unit of deployment in Kubernetes is a Pod.\xA0 Since a Pod is a collection of containers, it can be one or more containers deployed atomically together. In our example, we can see that each of BookInfo's pods is only executing one container. When ", mdx("code", null, "istioctl kube-inject"), "\xA0is run against\xA0\xA0on BookInfo's manifests, it adds another container to the Pod specification but does not deploy anything yet."), mdx("p", null, mdx("code", null, "istioctl kube-inject"), " supports modification of Pod-based Kubernetes objects (Job, DaemonSet, ReplicaSet, Pod and Deployment) that may be embedded into long yaml files containing other Kubernetes objects. ", mdx("code", null, "Istioctl kube-inject"), " will parse the other Kubernetes objects without modification. Unsupported resources are left unmodified so it is safe to run kube-inject over a single file that contains multiple Service, ConfigMap, Deployment, etc. definitions for a complex application. It is best to do this when the resource is initially created."), mdx("p", null, "In order to onboard this existing application, we can execute ", mdx("code", null, "istioctl kube-inject"), " against each Deployment and have a rolling update of that Deployment initiated by Kubernetes as shown below. Let\u2019s start with the ", mdx("code", null, "productpage"), " service."), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "$ kubectl get deployment productpage-v1 -o yaml | istioctl kube-inject -f - | kubectl apply -f -\ndeployment.extensions/productpage-v1 configured\n")), mdx("p", null, "We now notice that the productpage pod has grown to two containers when we look at the BookInfo pods again. Istio\u2019s sidecar has been successfully injected. The rest of BookInfo\u2019s application services need to be onboarded in order for BookInfo as an application to work."), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "$ kubectl get pods\nNAME                              READY   STATUS    RESTARTS   AGE\ndetails-v1-69658dcf78-nghss       1/1     Running   0          45m\nproductpage-v1-64647d4c5f-z95dl   2/2     Running   0          64s\nratings-v1-6f97d68b6-v6wj6        1/1     Running   0          45m\nreviews-v1-7c98dcd6dc-b974c       1/1     Running   0          45m\nreviews-v2-6677766d47-2qz2g       1/1     Running   0          45m\nreviews-v3-79f9bcc54c-sjndp       1/1     Running   0          45m\n")), mdx("p", null, "You may choose to do this manual injection operation once and persist the new manifest file with istio-proxy (Envoy) inserted instead of ad-hoc onboarding of a running application. You can create a persistent version of the sidecar injected deployment outputting the results of ", mdx("code", null, "istioctl kube-inject"), " to a file. As Istio evolves the default sidecar configuration is subject to change."), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "$ istioctl kube-inject -f deployment.yaml -o deployment-injected.yaml\n")), mdx("p", null, "Or like so:"), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "$ istioctl kube-inject -f deployment.yaml > deployment-injected.yaml\n")), mdx("h4", null, "Ad-hoc Sidecarring"), mdx("p", null, "Sidecar injection is responsible for configuring network capture. Injection and network capture can be selectively applied to enable incremental adoption of Istio. Using the BookInfo sample application as an example, let\u2019s take the ", mdx("code", null, "productpage"), " service as the external-facing service and selectively remove this service (and just this service out of the set of four) from the service mesh. Let's start by checking for the presence of its sidecarred service proxy."), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "$ kubectl get pods productpage-8459b4f9cf-tfblj -o jsonpath=\"{.spec.containers[*].image}\"\nlayer5/istio-bookinfo-productpage:v1 docker.io/istio/proxyv2:1.0.5\n")), mdx("p", null, "As you can see, productpage container is our application container, while the istio/proxy is the service proxy (Envoy) that Istio injected into the pod. To manually onboard and offboard a deployment onto and off of the service mesh, you can manipulate annotation within its Kubernetes Deployment specification."), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "$ kubectl patch deployment nginx --type=json --patch='[{\"op\": \"add\", \"path\": \"/spec/template/metadata/annotations\", \"value\": {\"sidecar.istio.io/inject\": \"false\"}}]'\ndeployment.extensions/productpage-v1 patched\n")), mdx("p", null, "On opening your browser to the ", mdx("code", null, "productpage"), " application, and you\u2019ll find that it is still being served through Istio\u2019s Ingress Gateway, but that its pods no longer have sidecars. Hence, the productpage app has been removed from the mesh."), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "UNAVAILABLE:upstream connect error or disconnect/reset before headers\n")), mdx("h4", null, "Automatic Sidecar Injection"), mdx("p", null, "No code change to receive much more visibility into how your services are behaving and how they are being interacted gives Istio a magical feeling once your services are on the mesh. Automatic sidecar injection is the magical feeling you get as you go to onramp your services.Not only does automatic sidecar injection eliminate the need to alter your code, but it also eliminates the need to change your Kubernetes manifests. Automatic sidecar injection in Kubernetes relies on mutating admission webhooks. The ", mdx("code", null, "istio-sidecar-injector"), " is added as a mutating webhook configuration resource when Istio is installed on Kubernetes."), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "$ kubectl get mutatingwebhookconfigurations\nNAME                                    CREATED AT\nistio-sidecar-injector                  2019-04-18T16:35:03Z\nlinkerd-proxy-injector-webhook-config   2019-04-18T16:48:49Z\n")), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "$ kubectl get mutatingwebhookconfigurations istio-sidecar-injector -o yaml\n\napiVersion: admissionregistration.k8s.io/v1beta1\nkind: MutatingWebhookConfiguration\nmetadata:\n  creationTimestamp: \"2019-04-18T16:35:03Z\"\n  generation: 2\n  labels:\n    app: sidecarInjectorWebhook\n    chart: sidecarInjectorWebhook\n    heritage: Tiller\n    release: istio\n  name: istio-sidecar-injector\n  resourceVersion: \"192908\"\n  selfLink: /apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/istio-sidecar-injector\n  uid: eaa85688-61f7-11e9-a968-00505698ee31\nwebhooks:\n- admissionReviewVersions:\n  - v1beta1\n  clientConfig:\n    caBundle: <redacted>\n    service:\n      name: istio-sidecar-injector\n      namespace: istio-system\n      path: /inject\n  failurePolicy: Fail\n  name: sidecar-injector.istio.io\n  namespaceSelector:\n    matchLabels:\n      istio-injection: enabled\n  rules:\n  - apiGroups:\n    - \"\"\n    apiVersions:\n    - v1\n    operations:\n    - CREATE\n    resources:\n    - pods\n    scope: '*'\n  sideEffects: Unknown\n  timeoutSeconds: 30\n")), mdx("p", null, "If the namespace contains the ", mdx("code", null, "istio-injection=enabled"), "\xA0label, Kubernetes will transmit all Pod creation events to the ", mdx("code", null, "istio-sidecar-injector"), "\xA0service (in the istio-system namespace) if this mutating\xA0webhook is registered. The injector service will then modify the PodSpec to include two more containers, one for the init-container to configure traffic rules and the other for istio-proxy (Envoy) to perform proxying.\xA0 The sidecar injector service uses a template to add these two additional containers; the template may be found in the ", mdx("code", null, "istio-sidecar-injector configmap"), "."), mdx("p", null, "Kubernetes lifecycle allows customization of resources before they are committed to the etcd store, the \u2018source of truth\u2019 for Kubernetes configuration. When an individual Pod is created (either via kubectl or a Deployment resource), it goes through this same lifecycle, hitting mutating admission webhooks which modify the pod before it actually gets applied."), mdx("h4", null, "Kubernetes Labels"), mdx("p", null, "Automatic sidecar injection relies on labels to identify which pods to inject Istio\u2019s service proxy and initialize as pod on the data plane. Kubernetes objects, like pods and namespaces, can have user-defined labels attached to them. Labels are essentially ", mdx("code", null, "key:value"), " pairs like you finding in other systems that support the concept of tags. Webhook Admission controller relies on labels to select the namespaces they apply to. Istio-injection is the specific label that Istio uses. Familiarize by labeling the default namespace with ", mdx("code", null, "istio-injection=enabled"), ":"), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "$ kubectl label namespace default istio-injection=enabled\n")), mdx("p", null, "Confirm which namespaces have the istio-injection label associated:"), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "$ kubectl get namespace -L istio-injection\nNAME           STATUS    AGE       ISTIO-INJECTION\ndefault        Active    1h        enabled\nDocker         Active    1h        enabled\nistio-system   Active    1h        disabled\nkube-public    Active    1h        \nkube-system    Active    1h\n")), mdx("p", null, "Notice that only the ", mdx("code", null, "istio-system"), " namespace has the ", mdx("code", null, "istio-injection"), " label assigned. By virtue of having the ", mdx("code", null, "istio-injection"), " label and its value set to disabled, the ", mdx("code", null, "istio-system"), " namespace will not have service proxies automatically injected into their pods upon deployment. This does not mean that pods in this namespace cannot have service proxies. It just means that service proxies won\u2019t be automatically injected."), mdx("p", null, "One caveat to watch out for, when using the ", mdx("code", null, "namespaceSelector"), ", make sure that the namespace(s) you are selecting really has the label you are using. Keep in mind that the built-in namespaces like default and ", mdx("code", null, "kube-system"), " don\u2019t have labels out of the box."), mdx("p", null, "Conversely, the namespace in the metadata section is the actual name of the namespace, not a label:"), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: test-network-policy\n  namespace: default\nspec:\n...\n")), mdx("h4", null, "Kubernetes Init Containers"), mdx("p", null, "Very similar to cloud-init for those familiar with VM provisioning, init containers in Kubernetes allows you to run temporary containers to perform a task before engaging your primary container(s). Init containers are Init containers in Kubernetes allow you to run temporary containers to execute a task before activating your principal container, comparable to cloud-init for people acquainted with VM provisioning (s). Init containers are frequently used for provisioning operations such as asset bundling, database migration, and cloning a git repository onto a volume. In the instance of Istio, init containers are used to set up network filters - iptables - that control traffic flow. used to perform provisioning tasks like bundling assets, performing database migration, or clone a git repository into a volume. In Istio\u2019s case, init containers are used to setup network filters - iptables to control the flow of traffic.")));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/service-mesh/service-proxy</link><guid isPermaLink="false">https://layer5.io/resources/service-mesh/service-proxy</guid><pubDate>Sat, 11 Sep 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/ef8ca37dab5018498438c17e69966940/envoy-icon-color.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;div class=&quot;Resourcesstyle__ResourcesWrapper-sc-1y33ukx-0 sfJrc&quot;&gt;&lt;h3&gt;What Is a Service Proxy?&lt;/h3&gt;&lt;p&gt;A service proxy is a client-side mediator that handles requests for a service. The service proxy allows applications to send and receive messages as method calls via a channel. Service proxy connections can be created as needed or persist open connections to facilitate pooling. Applications are oblivious to the data plane&amp;#x27;s existence. As applications conduct service-to-service calls, service proxies are transparently inserted. Inbound (ingress) and outbound (egress) cluster network traffic are handled by data planes. Whether traffic is entering the mesh (ingressing) or leaving the mesh (egressing), application service traffic is directed first to the service proxy for handling. In Istio, traffic is transparently intercepted using iptables rules and redirected to the service proxy.&lt;/p&gt;&lt;p&gt;Remember that Pilot configures traffic policy and service proxies implement it. The data plane is a collection of service proxies. Service proxies are responsible for health checks, routing, load balancing, authentication, authorization, and the production of observable signals by intercepting every packet in the request. As the service may change from location to location, proxies provide indirection so that clients may point to the same location (e.g., proxy.example.com), representing a permanent reference. They add resilience to distributed systems.&lt;/p&gt;&lt;h3&gt;Envoy Proxy Overview&lt;/h3&gt;&lt;p&gt;The versatile and performant Envoy has evolved as an open source, application-level service proxy, living up to its tagline as the universal data plane API. Lyft developed Envoy in order to solve major distributed systems problems. Envoy has had broad reuse and has been integrated into the cloud native ecosystem.&lt;/p&gt;&lt;h4&gt;Why Envoy?&lt;/h4&gt;&lt;p&gt;Envoy was originally intended to be used as an edge proxy rather than a sidecar. Envoy transitioned to the sidecar pattern over time. The concept of hot reloads vs. hot restarts was at the center of the decision for the Istio project to leverage Envoy. Envoy&amp;#x27;s runtime configuration has always been API-driven, allowing it to drain and hot reload its own process with an old configuration with a new process and new configuration (displacing itself). Envoy achieves hot reloading of its processes by shared memory and communication through a Unix Domain Socket (UDS), in a manner that resembles GitHub&amp;#x27;s tool for zero-downtime HAProxy reloads. Additionally, and uniquely, Envoy offers an Aggregated Discovery Service (ADS) for delivering the data for each xDS API.&lt;/p&gt;&lt;h4&gt;HTTP/2 and gRPC&lt;/h4&gt;&lt;p&gt;Envoy stood apart from other proxies at the time because of its early support for HTTP/2 and gRPC. HTTP/2 significantly improves on HTTP/1.1 in that HTTP/2 enables request multiplexing over a single TCP connection. Proxies that support HTTP/2 benefit from the reduced overhead of combining several connections into a single one. HTTP/2 allows clients to send numerous parallel requests and load resources preemptively using server-push.&lt;/p&gt;&lt;p&gt;Envoy is HTTP/1.1 and HTTP/2 compatible, including proxying compatibility for both downstream and upstream protocols. This means Envoy can accept incoming HTTP/2 connections and proxy them to upstream HTTP/2 clusters, but it can also take HTTP/1.1 connections and proxy them to HTTP/2 clusters (and vice-versa).&lt;/p&gt;&lt;p&gt;gRPC is an RPC protocol that uses protocol buffers on top of HTTP/2. Envoy supports gRPC natively (over HTTP/2) and can also bridge an HTTP/1.1 client to gRPC. Envoy has the ability to operate as a gRPC-JSON transcoder. The gRPC-JSON transcoder functionality allows a client to send HTTP/1.1 requests with a JSON payload to Envoy, which translates the request into the corresponding gRPC call and subsequently translates the response message back into JSON. These are powerful capabilities (and challenging to execute correctly), which set Envoy apart from other service proxies.&lt;/p&gt;&lt;h3&gt;Envoy in Istio&lt;/h3&gt;&lt;p&gt;As an out of process proxy, Envoy transparently forms the base unit of the mesh. Akin to proxies in other service meshes, it is the workhorse of Istio. Istio deploys Envoy sidecarred to application services. Identified as &lt;code&gt;istio-proxy&lt;/code&gt; in deployment files, Envoy does not require root privileges to run, but runs as user 1337 (non root).&lt;/p&gt;&lt;h3&gt;Sidecar Injection (or Sidecarring)&lt;/h3&gt;&lt;p&gt;There are two steps to adding a service proxy: sidecar injection and network capture. Sidecar injection is the method of adding a proxy to a given application. Network capture is the method of directing inbound traffic to the proxy (instead of the application) and outbound traffic to the proxy (instead of directly back to the client or directly to subsequent upstream application services).&lt;/p&gt;&lt;h4&gt;Manual Sidecar Injection&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Istioctl&lt;/code&gt; can be used to manually inject the Envoy sidecar definition into Kubernetes manifests manually. Use &lt;code&gt;istioctl&lt;/code&gt;’s &lt;code&gt;kube-inject&lt;/code&gt; capability to manually inject the sidecar into deployment manifests by manipulating yaml.&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;$ istioctl kube-inject -f samples/sleep/sleep.yaml | kubectl apply -f -&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;You can update Kubernetes specifications on-the-fly at the time of applying them to Kubernetes for scheduling. Alternatively, you might use the &lt;code&gt;istioctl kube-inject&lt;/code&gt; utility like so:&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;$ kubectl apply -f &amp;lt;(istioctl kube-inject -f &amp;lt;resource.yaml&amp;gt;)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;If you don’t have the source manifests available, you can update an existing Kubernetes deployment to bring its services onto the mesh:&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;$ kubectl get deployment -o yaml | istioctl kube-inject -f - | kubectl apply -f -&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;#x27;s look at an example of an existing application being onboarded onto the mesh. Let&amp;#x27;s use a freshly installed copy of BookInfo as an example of a Kubernetes application that isn&amp;#x27;t deployed on the service mesh yet. We&amp;#x27;ll start with exploring BookInfo&amp;#x27;s pods.&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;$ kubectl get pods&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;NAME                              READY   STATUS    RESTARTS   AGE&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;details-v1-69658dcf78-nghss       1/1     Running   0          43m&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;productpage-v1-6b6798cb84-nzfhd   1/1     Running   0          43m&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;ratings-v1-6f97d68b6-v6wj6        1/1     Running   0          43m&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;reviews-v1-7c98dcd6dc-b974c       1/1     Running   0          43m&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;reviews-v2-6677766d47-2qz2g       1/1     Running   0          43m&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;reviews-v3-79f9bcc54c-sjndp       1/1     Running   0          43m&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;The atomic unit of deployment in Kubernetes is a Pod.  Since a Pod is a collection of containers, it can be one or more containers deployed atomically together. In our example, we can see that each of BookInfo&amp;#x27;s pods is only executing one container. When &lt;code&gt;istioctl kube-inject&lt;/code&gt; is run against  on BookInfo&amp;#x27;s manifests, it adds another container to the Pod specification but does not deploy anything yet.&lt;/p&gt;&lt;p&gt;&lt;code&gt;istioctl kube-inject&lt;/code&gt; supports modification of Pod-based Kubernetes objects (Job, DaemonSet, ReplicaSet, Pod and Deployment) that may be embedded into long yaml files containing other Kubernetes objects. &lt;code&gt;Istioctl kube-inject&lt;/code&gt; will parse the other Kubernetes objects without modification. Unsupported resources are left unmodified so it is safe to run kube-inject over a single file that contains multiple Service, ConfigMap, Deployment, etc. definitions for a complex application. It is best to do this when the resource is initially created.&lt;/p&gt;&lt;p&gt;In order to onboard this existing application, we can execute &lt;code&gt;istioctl kube-inject&lt;/code&gt; against each Deployment and have a rolling update of that Deployment initiated by Kubernetes as shown below. Let’s start with the &lt;code&gt;productpage&lt;/code&gt; service.&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;$ kubectl get deployment productpage-v1 -o yaml | istioctl kube-inject -f - | kubectl apply -f -&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;deployment.extensions/productpage-v1 configured&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;We now notice that the productpage pod has grown to two containers when we look at the BookInfo pods again. Istio’s sidecar has been successfully injected. The rest of BookInfo’s application services need to be onboarded in order for BookInfo as an application to work.&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;$ kubectl get pods&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;NAME                              READY   STATUS    RESTARTS   AGE&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;details-v1-69658dcf78-nghss       1/1     Running   0          45m&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;productpage-v1-64647d4c5f-z95dl   2/2     Running   0          64s&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;ratings-v1-6f97d68b6-v6wj6        1/1     Running   0          45m&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;reviews-v1-7c98dcd6dc-b974c       1/1     Running   0          45m&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;reviews-v2-6677766d47-2qz2g       1/1     Running   0          45m&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;reviews-v3-79f9bcc54c-sjndp       1/1     Running   0          45m&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;You may choose to do this manual injection operation once and persist the new manifest file with istio-proxy (Envoy) inserted instead of ad-hoc onboarding of a running application. You can create a persistent version of the sidecar injected deployment outputting the results of &lt;code&gt;istioctl kube-inject&lt;/code&gt; to a file. As Istio evolves the default sidecar configuration is subject to change.&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;$ istioctl kube-inject -f deployment.yaml -o deployment-injected.yaml&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;Or like so:&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;$ istioctl kube-inject -f deployment.yaml &amp;gt; deployment-injected.yaml&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;h4&gt;Ad-hoc Sidecarring&lt;/h4&gt;&lt;p&gt;Sidecar injection is responsible for configuring network capture. Injection and network capture can be selectively applied to enable incremental adoption of Istio. Using the BookInfo sample application as an example, let’s take the &lt;code&gt;productpage&lt;/code&gt; service as the external-facing service and selectively remove this service (and just this service out of the set of four) from the service mesh. Let&amp;#x27;s start by checking for the presence of its sidecarred service proxy.&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;$ kubectl get pods productpage-8459b4f9cf-tfblj -o jsonpath=&amp;quot;{.spec.containers[*].image}&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;layer5/istio-bookinfo-productpage:v1 docker.io/istio/proxyv2:1.0.5&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;As you can see, productpage container is our application container, while the istio/proxy is the service proxy (Envoy) that Istio injected into the pod. To manually onboard and offboard a deployment onto and off of the service mesh, you can manipulate annotation within its Kubernetes Deployment specification.&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;$ kubectl patch deployment nginx --type=json --patch=&amp;#x27;[{&amp;quot;op&amp;quot;: &amp;quot;add&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/spec/template/metadata/annotations&amp;quot;, &amp;quot;value&amp;quot;: {&amp;quot;sidecar.istio.io/inject&amp;quot;: &amp;quot;false&amp;quot;}}]&amp;#x27;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;deployment.extensions/productpage-v1 patched&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;On opening your browser to the &lt;code&gt;productpage&lt;/code&gt; application, and you’ll find that it is still being served through Istio’s Ingress Gateway, but that its pods no longer have sidecars. Hence, the productpage app has been removed from the mesh.&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;UNAVAILABLE:upstream connect error or disconnect/reset before headers&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;h4&gt;Automatic Sidecar Injection&lt;/h4&gt;&lt;p&gt;No code change to receive much more visibility into how your services are behaving and how they are being interacted gives Istio a magical feeling once your services are on the mesh. Automatic sidecar injection is the magical feeling you get as you go to onramp your services.Not only does automatic sidecar injection eliminate the need to alter your code, but it also eliminates the need to change your Kubernetes manifests. Automatic sidecar injection in Kubernetes relies on mutating admission webhooks. The &lt;code&gt;istio-sidecar-injector&lt;/code&gt; is added as a mutating webhook configuration resource when Istio is installed on Kubernetes.&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;$ kubectl get mutatingwebhookconfigurations&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;NAME                                    CREATED AT&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;istio-sidecar-injector                  2019-04-18T16:35:03Z&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;linkerd-proxy-injector-webhook-config   2019-04-18T16:48:49Z&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;$ kubectl get mutatingwebhookconfigurations istio-sidecar-injector -o yaml&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot; style=&quot;display:inline-block&quot;&gt;
&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;apiVersion: admissionregistration.k8s.io/v1beta1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;kind: MutatingWebhookConfiguration&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;metadata:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  creationTimestamp: &amp;quot;2019-04-18T16:35:03Z&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  generation: 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  labels:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    app: sidecarInjectorWebhook&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    chart: sidecarInjectorWebhook&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    heritage: Tiller&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    release: istio&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  name: istio-sidecar-injector&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  resourceVersion: &amp;quot;192908&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  selfLink: /apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/istio-sidecar-injector&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  uid: eaa85688-61f7-11e9-a968-00505698ee31&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;webhooks:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;- admissionReviewVersions:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  - v1beta1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  clientConfig:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    caBundle: &amp;lt;redacted&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    service:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      name: istio-sidecar-injector&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      namespace: istio-system&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      path: /inject&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  failurePolicy: Fail&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  name: sidecar-injector.istio.io&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  namespaceSelector:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    matchLabels:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;      istio-injection: enabled&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  rules:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    - &amp;quot;&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    apiVersions:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    - v1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    operations:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    - CREATE&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    resources:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    - pods&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;    scope: &amp;#x27;*&amp;#x27;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  sideEffects: Unknown&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  timeoutSeconds: 30&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;If the namespace contains the &lt;code&gt;istio-injection=enabled&lt;/code&gt; label, Kubernetes will transmit all Pod creation events to the &lt;code&gt;istio-sidecar-injector&lt;/code&gt; service (in the istio-system namespace) if this mutating webhook is registered. The injector service will then modify the PodSpec to include two more containers, one for the init-container to configure traffic rules and the other for istio-proxy (Envoy) to perform proxying.  The sidecar injector service uses a template to add these two additional containers; the template may be found in the &lt;code&gt;istio-sidecar-injector configmap&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Kubernetes lifecycle allows customization of resources before they are committed to the etcd store, the ‘source of truth’ for Kubernetes configuration. When an individual Pod is created (either via kubectl or a Deployment resource), it goes through this same lifecycle, hitting mutating admission webhooks which modify the pod before it actually gets applied.&lt;/p&gt;&lt;h4&gt;Kubernetes Labels&lt;/h4&gt;&lt;p&gt;Automatic sidecar injection relies on labels to identify which pods to inject Istio’s service proxy and initialize as pod on the data plane. Kubernetes objects, like pods and namespaces, can have user-defined labels attached to them. Labels are essentially &lt;code&gt;key:value&lt;/code&gt; pairs like you finding in other systems that support the concept of tags. Webhook Admission controller relies on labels to select the namespaces they apply to. Istio-injection is the specific label that Istio uses. Familiarize by labeling the default namespace with &lt;code&gt;istio-injection=enabled&lt;/code&gt;:&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;$ kubectl label namespace default istio-injection=enabled&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;Confirm which namespaces have the istio-injection label associated:&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;$ kubectl get namespace -L istio-injection&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;NAME           STATUS    AGE       ISTIO-INJECTION&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;default        Active    1h        enabled&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;Docker         Active    1h        enabled&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;istio-system   Active    1h        disabled&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;kube-public    Active    1h        &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;kube-system    Active    1h&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;Notice that only the &lt;code&gt;istio-system&lt;/code&gt; namespace has the &lt;code&gt;istio-injection&lt;/code&gt; label assigned. By virtue of having the &lt;code&gt;istio-injection&lt;/code&gt; label and its value set to disabled, the &lt;code&gt;istio-system&lt;/code&gt; namespace will not have service proxies automatically injected into their pods upon deployment. This does not mean that pods in this namespace cannot have service proxies. It just means that service proxies won’t be automatically injected.&lt;/p&gt;&lt;p&gt;One caveat to watch out for, when using the &lt;code&gt;namespaceSelector&lt;/code&gt;, make sure that the namespace(s) you are selecting really has the label you are using. Keep in mind that the built-in namespaces like default and &lt;code&gt;kube-system&lt;/code&gt; don’t have labels out of the box.&lt;/p&gt;&lt;p&gt;Conversely, the namespace in the metadata section is the actual name of the namespace, not a label:&lt;/p&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax&quot;&gt;&lt;button class=&quot;CodeBlock__CopyCode-sc-4qx7vm-2 dmwFhm&quot;&gt;Copy&lt;/button&gt;&lt;pre class=&quot;CodeBlock__Pre-sc-4qx7vm-0 eJDaax prism-code language-undefined&quot; style=&quot;color:#d6deeb;background-color:#011627&quot;&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;apiVersion: networking.k8s.io/v1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;kind: NetworkPolicy&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;metadata:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  name: test-network-policy&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;  namespace: default&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;spec:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;token-line&quot; style=&quot;color:#d6deeb&quot;&gt;&lt;span class=&quot;CodeBlock__LineNo-sc-4qx7vm-1 bFANTz&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;...&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;h4&gt;Kubernetes Init Containers&lt;/h4&gt;&lt;p&gt;Very similar to cloud-init for those familiar with VM provisioning, init containers in Kubernetes allows you to run temporary containers to perform a task before engaging your primary container(s). Init containers are Init containers in Kubernetes allow you to run temporary containers to execute a task before activating your principal container, comparable to cloud-init for people acquainted with VM provisioning (s). Init containers are frequently used for provisioning operations such as asset bundling, database migration, and cloning a git repository onto a volume. In the instance of Istio, init containers are used to set up network filters - iptables - that control traffic flow. used to perform provisioning tasks like bundling assets, performing database migration, or clone a git repository into a volume. In Istio’s case, init containers are used to setup network filters - iptables to control the flow of traffic.&lt;/p&gt;&lt;/div&gt;</content:encoded></item></channel></rss>